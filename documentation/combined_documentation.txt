---
title: HeroUI CLI
description: API References for HeroUI CLI
---

# HeroUI CLI

------

Here's the API reference for the `HeroUI CLI`.

Once the `CLI` is installed, run the following command to display available commands:

To get a list of the available CLI commands, run the following command inside your project directory:

```codeBlock bash
heroui -h
```

This will produce the following help output:

```codeBlock bash
HeroUI CLI <version>

A command line tool for seamless integration with HeroUI

Usage: heroui [command]

Options:
  -v, --version                      Output the current version
  --no-cache                         Disable cache, by default data will be cached for 30m after the first request
  -d, --debug                        Debug mode will not install dependencies
  -h --help                          Display help information for commands

Commands:
  init [options] [projectName]       Initializes a new project
  add [options] [components...]      Adds components to your project
  upgrade [options] [components...]  Upgrades project components to the latest versions
  remove [options] [components...]   Removes components from the project
  list [options]                     Lists all components, showing status, descriptions, and versions
  env [options]                      Displays debugging information for the local environment
  doctor [options]                   Checks for issues in the project
  help [command]                     Display help for command
```

## Commands

### Init

Initialize a new HeroUI project with official templates.

```codeBlock bash
heroui init [projectName] [options]
```

#### Init Options

- `-t --template [string]` The template to use for the new project e.g. app, pages, vite
- `-p --package [string]` The package manager to use for the new project (default: `npm`)

##### Example

```codeBlock bash
# Initialize a new HeroUI project with the app template, named my-heroui-app
heroui init my-heroui-app -t app
```

output:

```codeBlock bash
HeroUI CLI v0.2.1

┌  Create a new project
│
◇  Select a template (Enter to select)
│  ● App (A Next.js 14 with app directory template pre-configured with HeroUI (v2) and Tailwind CSS.)
│  ○ Pages (A Next.js 14 with pages directory template pre-configured with HeroUI (v2) and Tailwind CSS.)
│  ○ Vite (A Vite template pre-configured with HeroUI (v2) and Tailwind CSS.)
│
◇  New project name (Enter to skip with default name)
│  my-heroui-app
│
◇  Select a package manager (Enter to select)
│  ● npm
│  ○ yarn
│  ○ pnpm
│  ○ bun
│
◇  Template created successfully!
│
◇  Next steps ───────╮
│                    │
│  cd my-heroui-app  │
│  npm install       │
│                    │
├────────────────────╯
│
└  🚀 Get started with npm run dev
```

### Add

Add HeroUI components to your project.

#### Features

> 1. Auto add the missing required `dependencies` to your project
> 2. Auto add the required `tailwindcss.config.js` configuration to your project
> 3. Detect whether using pnpm, if so, add the required configuration to your `.npmrc` file

```codeBlock bash
heroui add [components...] [options]
```

#### Add Options

- `-a --all` [boolean] Add all the HeroUI components (default: `false`)
- `-p --packagePath` [string] The path to the package.json file
- `-tw --tailwindPath` [string] The path to the tailwind.config file file
- `-app --appPath` [string] The path to the App.tsx file
- `--prettier` [boolean] Add prettier format in the add content which required installed prettier - (default: `false`)
- `--addApp` [boolean] Add App.tsx file content which required provider (default: `false`)
- `-b --beta` [boolean] Add beta components (default: `false`)

##### Example

Without setting a specific component, the `add` command will show a list of available components.

```codeBlock bash
heroui add
```

Output:

```codeBlock bash
HeroUI CLI v0.2.1

? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◉  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◯  button
◯  card
◯  checkbox
◯  chip
◯  code
```

If you want to add a specific component, you can specify the component name.

```codeBlock bash
heroui add button
```

Output:

```codeBlock bash
HeroUI CLI v0.2.1

Adding the required dependencies: @heroui/button

pnpm add @heroui/button
Packages: +1
+
Progress: resolved 470, reused 462, downloaded 0, added 0, done

dependencies:
+ @heroui/button 2.0.24

Done in 3.4s

Tailwind CSS settings have been updated in: /project-path/tailwind.config.js

✅ Components added successfully
```

### Upgrade

Upgrade the HeroUI components to the latest version.

```codeBlock bash
heroui upgrade [components...] [options]
```

#### Upgrade Options

- `-p --packagePath` [string] The path to the package.json file
- `-a --all` [boolean] Upgrade all the HeroUI components (default: `false`)
- `-w --write` [boolean] Write the upgrade version to package.json file (default: `false`)
- `-b --beta` [boolean] Upgrade beta components (default: `false`)
- `-h --help` Display help for command

##### Example

Upgrade the **Button** component to the latest version.

```codeBlock bash
heroui upgrade button
```

Output:

```codeBlock bash
HeroUI CLI v0.2.1

╭───────────────────────── Component ─────────────────────────╮
│  @heroui/button              ^2.0.11  ->  ^2.0.31       │
╰─────────────────────────────────────────────────────────────╯

Required min version: @heroui/theme>=2.1.0, tailwindcss>=3.4.0, react>=18.3.1, react-dom>=18.3.1
╭───────────────────── PeerDependencies ─────────────────────╮
│  @heroui/theme               2.0.1    ->  2.1.0        │
│  tailwindcss                     ^3.2.3   ->  ^3.4.0       │
│  react                           Missing  ->  18.3.1       │
│  react-dom                       Missing  ->  18.3.1       │
╰────────────────────────────────────────────────────────────╯
2 major, 2 minor, 1 patch

? Would you like to proceed with the upgrade? › - Use arrow-keys. Return to submit.
❯   Yes
    No

pnpm add @heroui/button@2.0.31 @heroui/theme@2.1.0 tailwindcss@3.4.0 react@18.3.1 react-dom@18.3.1

dependencies:
- @heroui/theme 2.0.1
+ @heroui/theme 2.1.0 (2.2.3 is available)
+ react 18.3.1
+ react-dom 18.3.1

Done in 1.8s

✅ Upgrade complete. All components are up to date.
```

### Remove

Remove HeroUI components from your project.

> **Note**: If there are no HeroUI components after removing, the required content will also be removed

```codeBlock bash
heroui remove [components...] [options]
```

#### Remove Options

- `-p --packagePath` [string] The path to the package.json file
- `-a --all` [boolean] Remove all the HeroUI components (default: `false`)
- `-tw --tailwindPath` [string] The path to the tailwind.config file file
- `--prettier` [boolean] Add prettier format in the add content which required installed prettier - (default: `false`)

##### Example

Remove the **Button** component from your project.

```codeBlock bash
heroui remove button
```

Output:

```codeBlock bash
HeroUI CLI v0.2.1

❗️ Components slated for removal:
╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package              │   Version              │   Status   │   Docs                                        │
│──────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @heroui/button   │   2.0.27 🚀latest      │   stable   │   https://heroui.com/docs/components/button   │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
? Confirm removal of these components: › - Use arrow-keys. Return to submit.
❯   Yes
    No

pnpm remove  @heroui/button
Already up to date
Progress: resolved 474, reused 465, downloaded 0, added 0, done

dependencies:
- @heroui/button 2.0.27

Done in 2.1s

Remove the removed components tailwind content in file:/project-path/tailwind.config.js

✅ Successfully removed the specified HeroUI components: @heroui/button
```

### List

List all the current installed components.

```codeBlock bash
heroui list [options]
```

#### List Options

- `-p --packagePath` [string] The path to the package.json file
- `-r --remote` List all components available remotely

##### Example

```codeBlock bash
heroui list
```

Output:

```codeBlock bash
HeroUI CLI v0.2.1

Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @heroui/autocomplete   │   2.0.10 🚀latest      │   stable    │   https://heroui.com/docs/components/autocomplete   │
│   @heroui/badge          │   2.0.24 🚀latest      │   stable    │   https://heroui.com/docs/components/badge          │
│   @heroui/button         │   2.0.27 🚀latest      │   stable    │   https://heroui.com/docs/components/button         │
│   @heroui/chip           │   2.0.25 🚀latest      │   stable    │   https://heroui.com/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
```

### Doctor

Check whether exist problem in your project by using the `doctor` command.

```codeBlock bash
heroui doctor [options]
```

### Features

> 1. Check whether have `redundant dependencies` in the project
> 2. Check whether the HeroUI components `required dependencies are installed` in the project
> 3. Check the required `tailwind.config.js` file and the content is correct
> 4. Check `.npmrc` is correct when using `pnpm`
> 5. Check `peerDependencies with required version` are installed in the project

#### Doctor Options

- `-p` `--packagePath` [string] The path to the package.json file
- `-tw` `--tailwindPath` [string] The path to the tailwind.config file file
- `-app` `--appPath` [string] The path to the App.tsx file
- `-ca` `--checkApp` [boolean] Open check App (default: `true`)
- `-ct` `--checkTailwind` [boolean] Open check tailwind.config file (default: `true`)
- `-cp` `--checkPnpm` [boolean] Open check Pnpm (default: `true`)

#### Example

```codeBlock bash
heroui doctor
```

Output:

If there is a problem in your project, the `doctor` command will display the problem information.

```codeBlock bash
HeroUI CLI v0.2.1

HeroUI CLI: ❌ Your project has 1 issue that require attention

❗️Issue 1: missingTailwind

Missing tailwind.config.(j|t)s file. To set up, visit: https://heroui.com/docs/guide/installation#tailwind-css-setup
```

Otherwise, the `doctor` command will display the following message.

```codeBlock bash
HeroUI CLI v0.2.1

✅ Your project has no detected issues.
```

### Env

Display debug information about the local environment.

```codeBlock bash
heroui env [options]
```

#### Env Options

- `-p --packagePath` [string] The path to the package.json file

#### Example

Display the local environment Information by using the `env` command.

```codeBlock bash
heroui env
```

Output:

```codeBlock bash
HeroUI CLI v0.2.1

Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @heroui/autocomplete   │   2.0.10 🚀latest      │   stable    │   https://heroui.com/docs/components/autocomplete   │
│   @heroui/badge          │   2.0.24 🚀latest      │   stable    │   https://heroui.com/docs/components/badge          │
│   @heroui/button         │   2.0.27 🚀latest      │   stable    │   https://heroui.com/docs/components/button         │
│   @heroui/chip           │   2.0.25 🚀latest      │   stable    │   https://heroui.com/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Environment Info:
  System:
    OS: darwin
    CPU: arm64
  Binaries:
    Node: v18.18.2
```


--- Содержимое из файла: cli-api.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\api-references\cli-api.mdx) ---

---
title: HeroUI Provider
description: API References for HeroUI Provider
---

# HeroUI Provider

API reference for the `HeroUIProvider`. 

------

## Import

<ImportTabs
  commands={{
    main: 'import {HeroUIProvider} from "@heroui/react";',
    individual: 'import {HeroUIProvider} from "@heroui/system";',
  }}
/>

## Usage

```jsx
import * as React from "react";
import {HeroUIProvider} from "@heroui/react";

function App() {
  return (
    <HeroUIProvider>
      <YourApplication />
    </HeroUIProvider>
  );
}
```

## Props

<Spacer y={6}/>

`navigate`

- **Description**: Provides a client side router to all nested components such as Link, Menu, Tabs, Table, etc.
- **Type**: `((path: Href, routerOptions?: RouterOptions) => void) | undefined`

[See Router Guide](/docs/guide/routing)

<Spacer y={2}/>

`useHref`

- **Description**: Convert an `href` provided to a link component to a native `href`. For example, a router might accept hrefs relative to a base path, or offer additional custom ways of specifying link destinations. The original href specified on the link is passed to the navigate function of the RouterProvider, and useHref is used to generate the full native href to put on the actual DOM element.
- **Type**: `((href: Href) => string) | undefined`

[See Router Guide](/docs/guide/routing)

<Spacer y={2}/>

`locale`

- **Description**: The locale to apply to the children.
- **Type**: `string | undefined`
- **Default**: `en-US`


Here's the supported locales. By default, It is `en-US`.

```tsx
const localeValues = [
  'fr-FR', 'fr-CA', 'de-DE', 'en-US', 'en-GB', 'ja-JP',
  'da-DK', 'nl-NL', 'fi-FI', 'it-IT', 'nb-NO', 'es-ES',
  'sv-SE', 'pt-BR', 'zh-CN', 'zh-TW', 'ko-KR', 'bg-BG',
  'hr-HR', 'cs-CZ', 'et-EE', 'hu-HU', 'lv-LV', 'lt-LT',
  'pl-PL', 'ro-RO', 'ru-RU', 'sr-SP', 'sk-SK', 'sl-SI',
  'tr-TR', 'uk-UA', 'ar-AE', 'ar-DZ', 'AR-EG', 'ar-SA',
  'el-GR', 'he-IL', 'fa-AF', 'am-ET', 'hi-IN', 'th-TH'
];
```

Here's an example to set a Spanish locale.

```tsx
"use client";

import {type ReactNode} from "react";
import {HeroUIProvider} from "@heroui/react";

export function AppProvider(props: AppProviderProps) {
  const {children, className} = props;

  return (
    <HeroUIProvider locale="es-ES" className={className}>
      {children}
    </HeroUIProvider>
  );
}

interface AppProviderProps {
  children: ReactNode;
  className?: string;
}
```

<Spacer y={2}/>

`defaultDates`

- **Description**: The default dates range that can be selected in the calendar.
- **Type**: `{ minDate?: CalendarDate | undefined; maxDate?: CalendarDate | undefined; }`
- **Default**: `{ minDate: new CalendarDate(1900, 1, 1), maxDate: new CalendarDate(2099, 12, 31) }`

<Spacer y={2}/>

`createCalendar`

- **Description**:
    This function helps to reduce the bundle size by providing a custom calendar system.

    By default, this includes all calendar systems supported by `@internationalized/date`. However,
    if your application supports a more limited set of regions, or you know you will only be picking dates
    in a certain calendar system, you can reduce your bundle size by providing your own implementation
    of `createCalendar` that includes a subset of these Calendar implementations.

    For example, if your application only supports Gregorian dates, you could implement a `createCalendar`
    function like this:

    ```tsx
    import {GregorianCalendar} from '@internationalized/date';

    function createCalendar(identifier) {
      switch (identifier) {
        case 'gregory':
          return new GregorianCalendar();
        default:
          throw new Error(`Unsupported calendar ${identifier}`);
      }
    }
    ```

    This way, only GregorianCalendar is imported, and the other calendar implementations can be tree-shaken.

- **Type**: `((calendar: SupportedCalendars) => Calendar | null) | undefined`

<Spacer y={2}/>

`labelPlacement`

- **Description**: Determines the position where label should appear, such as inside, outside or outside-left of the component.
- **Type**: `string` | `undefined`
- **Possible Values**: `inside` | `outside` | `outside-left` | `undefined`
- **Default**: `undefined`

<Spacer y={2}/>

`spinnerVariant`

- **Description**: The default variant of the spinner.
- **Type**: `string` | `undefined`
- **Possible Values**: `default` | `simple` | `gradient` | `wave` | `dots` | `spinner`
- **Default**: `default`

<Spacer y={2}/>

`disableAnimation`

- **Description**: Disables animations globally. This will also avoid `framer-motion` features to be loaded in the bundle which can potentially reduce the bundle size.
- **Type**: `boolean`
- **Default**: `false`

<Spacer y={2}/>

`disableRipple`

- **Description**: Disables ripple effect globally.
- **Type**: `boolean`
- **Default**: `false`

<Spacer y={2}/>

`skipFramerMotionAnimations`

- **Description**:
  Controls whether `framer-motion` animations are skipped within the application.
  This property is automatically enabled (`true`) when the `disableAnimation` prop is set to `true`,
  effectively skipping all `framer-motion` animations. To retain `framer-motion` animations while
  using the `disableAnimation` prop for other purposes, set this to `false`. However, note that
  animations in HeroUI Components are still omitted if the `disableAnimation` prop is `true`.
- **Type**: `boolean`
- **Default**: Same as `disableAnimation`

<Spacer y={2}/>

`validationBehavior`

- **Description**: Whether to use native HTML form validation to prevent form submission when the value is missing or invalid,
or mark the field as required or invalid via ARIA.
- **Type**: `native | aria`
- **Default**: `native`

`reducedMotion`

- **Description**: Controls the motion preferences for the entire application, allowing developers to respect user settings for reduced motion.
The available options are:
  - `"user"`: Adapts to the user's device settings for reduced motion.
  - `"always"`: Disables all animations.
  - `"never"`: Keeps all animations active.
- **Type**: `"user" | "always" | "never"`
- **Default**: `"never"`

`spinnerVariant`

- **Description**: The default variant of the spinner.
- **Type**: `string` | `undefined`
- **Possible Values**: `default` | `gradient` | `wave` | `dots` | `spinner`
- **Default**: `default`

<Spacer y={2}/>

---

## Types

`CalendarDate`

- **Description**: A [CalendarDate](https://react-spectrum.adobe.com/internationalized/date/CalendarDate.html) represents a date without any time components in a specific calendar system from `@internationalized/date`.
- **Type**: `import {CalendarDate} from '@internationalized/date';`

### SupportedCalendars

Supported react-aria i18n calendars.

```tsx
type SupportedCalendars =
  | "buddhist"
  | "ethiopic"
  | "ethioaa"
  | "coptic"
  | "hebrew"
  | "indian"
  | "islamic-civil"
  | "islamic-tbla"
  | "islamic-umalqura"
  | "japanese"
  | "persian"
  | "roc"
  | "gregory";
```

--- Содержимое из файла: heroui-provider.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\api-references\heroui-provider.mdx) ---

---
title: "Accordion"
description: "Accordion display a list of high-level options that can expand/collapse to reveal more information."
---

import {accordionContent} from "@/content/components/accordion";

# Accordion

Accordion display a list of high-level options that can expand/collapse to reveal more information.

<ComponentLinks component="accordion" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add accordion",
    npm: "npm install @heroui/accordion",
    yarn: "yarn add @heroui/accordion",
    pnpm: "pnpm add @heroui/accordion",
    bun: "bun add @heroui/accordion"
  }}
/>

## Import

HeroUI exports 2 accordion-related components:

- **Accordion**: The main component to display a list of accordion items.
- **AccordionItem**: The item component to display a single accordion item.

<ImportTabs
  commands={{
    main: 'import {Accordion, AccordionItem} from "@heroui/react";',
    individual: 'import {Accordion, AccordionItem} from "@heroui/accordion";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={accordionContent.usage} />

### With Subtitle

<CodeDemo title="With subtitle" files={accordionContent.subtitle} />

### Expand multiple items

If you set `selectionMode` to `multiple`, then the `Accordion` will allow multiple items to be expanded at the same time.

<CodeDemo title="Expand multiple items" files={accordionContent.multiple} />

### Compact

If you set `isCompact` to `true`, the `Accordion` will be displayed in a compact style.

<CodeDemo title="Compact" files={accordionContent.compact} />

### Variants

Accordion has 4 variants: `light`, `shadow`, `bordered` and `splitted`.

#### Light variant

<CodeDemo title="Light variant" files={accordionContent.lightVariant} />

#### Shadow variant

<CodeDemo title="Shadow variant" files={accordionContent.shadowVariant} />

#### Bordered variant

<CodeDemo title="Bordered variant" files={accordionContent.borderedVariant} />

#### Splitted variant

<CodeDemo title="Splitted variant" files={accordionContent.splittedVariant} />

### Default expanded keys

If you want to expand some items by default, you can set the `defaultExpandedKeys` property to an array of keys.

<CodeDemo title="Default expanded keys" files={accordionContent.defaultExpandedKeys} />

### Disabled keys

If you want to disable some items, you can set the `disabledKeys` property to an array of keys.

<CodeDemo title="Disabled keys" files={accordionContent.disabledKeys} />

### Start content

If you want to display some content before the accordion items, you can set the `startContent` property.

<CodeDemo title="Start content" files={accordionContent.startContent} />

### Custom Indicator

Accordion items have a property called `indicator`. You can use it to customize the open/close indicator.

<CodeDemo title="Custom Open/Close Indicator" files={accordionContent.indicator} />

The indicator can be also a `function`, which receives the `isOpen`, `isDisabled` and the default `indicator` as parameters.

<CodeDemo
  title="Custom Open/Close Indicator Function"
  highlightedLines="15"
  files={accordionContent.indicatorFunction}
/>

### Custom Motion

Accordion offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={accordionContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

### Controlled

Accordion is a controlled component, which means you need to control the `selectedKeys` property by yourself.

<CodeDemo title="Controlled" files={accordionContent.controlled} />

## Accordion Item Slots

- **base**: The accordion item wrapper.
- **heading**: The accordion item heading. It contains the `indicator` and the `title`.
- **trigger**: The button that open/close the accordion item.
- **titleWrapper**: The wrapper of the `title` and `subtitle`.
- **title**: The accordion item title.
- **subtitle**: The accordion item subtitle.
- **startContent**: The content before the accordion item.
- **indicator**: The element that indicates the open/close state of the accordion item.
- **content**: The accordion item content.

### Custom Accordion Styles

You can customize the accordion and accordion items styles by using any of the following properties:

- `className`: The class name of the accordion. Modify the accordion wrapper styles.(Accordion)
- `itemClasses`: The class names of the accordion items. Modify all accordion items styles at once. (Accordion)
- `classNames`: The class names of the accordion items. Modify each accordion item styles separately. (AccordionItem)

Here's an example of how to customize the accordion styles:

<CodeDemo title="Custom Accordion Styles" files={accordionContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`AccordionItem` has the following attributes on the `base` element:

- **data-open**:
  Whether the accordion item is open.
- **data-disabled**:
  When the accordion item is disabled.
- **data-hover**:
  When the accordion item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
- **data-focus**:
  When the accordion item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the accordion item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the accordion item is disabled. Based on `isDisabled` prop.
- **data-pressed**:
  When the accordion item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).

<Spacer y={4} />

## Accessibility

- Keyboard event support for <Kbd>Space</Kbd>, <Kbd>Enter</Kbd>, <Kbd>Arrow Up</Kbd>, <Kbd>Arrow Down</Kbd> and <Kbd>Home</Kbd> / <Kbd>End</Kbd> keys.
- Keyboard focus management and cross browser normalization.
- `aria-expanded` attribute for the accordion item.
- `aria-disabled` attribute for the accordion item.
- `aria-controls` attribute for the accordion item.

<Spacer y={4} />

## API

### Accordion Props

<APITable 
  data={[
    {
      attribute: "children",
      type: "ReactNode | ReactNode[]",
      description: "The contents of the collection. Usually the array of AccordionItem",
      default: "-"
    },
    {
      attribute: "variant",
      type: "light | shadow | bordered | splitted",
      description: "The accordion appearance style.",
      default: "light"
    },
    {
      attribute: "selectionMode", 
      type: "none | single | multiple",
      description: "The type of selection that is allowed in the collection.",
      default: "-"
    },
    {
      attribute: "selectionBehavior",
      type: "toggle | replace",
      description: "The accordion selection behavior.",
      default: "toggle"
    },
    {
      attribute: "isCompact",
      type: "boolean",
      description: "Whether all Accordion items should be smaller.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean", 
      description: "Whether the Accordion items are disabled.",
      default: "false"
    },
    {
      attribute: "showDivider",
      type: "boolean",
      description: "Whether to display a divider at the bottom of the each accordion item.",
      default: "true"
    },
    {
      attribute: "dividerProps",
      type: "DividerProps",
      description: "The divider component props.",
      default: "-"
    },
    {
      attribute: "hideIndicator",
      type: "boolean",
      description: "Whether the Accordion items indicator is hidden.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the Accordion items open/close animation is disabled.",
      default: "false"
    },
    {
      attribute: "disableIndicatorAnimation",
      type: "boolean",
      description: "Whether the Accordion items indicator animation is disabled.",
      default: "false"
    },
    {
      attribute: "disallowEmptySelection",
      type: "boolean",
      description: "Whether the collection allows empty selection.",
      default: "false"
    },
    {
      attribute: "keepContentMounted",
      type: "boolean",
      description: "Whether the Accordion items content should be always mounted.",
      default: "false"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the accordion should take up the full width of its parent container.",
      default: "true"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The motion properties of the Accordion.",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "React.Key[]",
      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      default: "-"
    },
    {
      attribute: "itemClasses",
      type: "AccordionItemClassnames",
      description: "The accordion items classNames.",
      default: "-"
    },
    {
      attribute: "selectedKeys",
      type: "all | React.Key[]",
      description: "The currently selected keys in the collection (controlled).",
      default: "-"
    },
    {
      attribute: "defaultSelectedKeys",
      type: "all | React.Key[]",
      description: "The initial selected keys in the collection (uncontrolled).",
      default: "-"
    }
  ]}
/>

### Accordion Events

<APITable
  data={[
    {
      attribute: "onSelectionChange",
      type: "(keys: \"all\" | Set<React.Key>) => any",
      description: "Handler that is called when the selection changes.",
      default: "-"
    }
  ]}
/>

### Accordion Item Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the component.",
      default: "-"
    },
    {
      attribute: "title",
      type: "ReactNode",
      description: "The accordion item title.",
      default: "-"
    },
    {
      attribute: "subtitle",
      type: "ReactNode",
      description: "The accordion item subtitle.",
      default: "-"
    },
    {
      attribute: "indicator",
      type: "IndicatorProps",
      description: "The accordion item expanded indicator, usually an arrow icon.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The accordion item start content, usually an icon or avatar.",
      default: "-"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The props to modify the framer motion animation. Use the variants API to create your own animation.",
      default: "-"
    },
    {
      attribute: "isCompact",
      type: "boolean",
      description: "Whether the AccordionItem is compact.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "The current disabled status.",
      default: "false"
    },
    {
      attribute: "keepContentMounted",
      type: "boolean",
      description: "Whether the AccordionItem content is kept mounted when closed.",
      default: "false"
    },
    {
      attribute: "hideIndicator",
      type: "boolean",
      description: "Whether the AccordionItem indicator is hidden.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the AccordionItem animation is disabled.",
      default: "false"
    },
    {
      attribute: "disableIndicatorAnimation",
      type: "boolean",
      description: "Whether the AccordionItem indicator animation is disabled.",
      default: "false"
    },
    {
      attribute: "HeadingComponent",
      type: "React.ElementType",
      description: "Customizable heading tag for Web accessibility. Use headings to describe content and use them consistently and semantically.",
      default: "h2"
    },
    {
      attribute: "classNames",
      type: "AccordionItemClassnames",
      description: "Allows to set custom class names for the accordion item slots.",
      default: "-"
    }
  ]}
/>

### Accordion Item Events

<APITable
  data={[
    {
      attribute: "onFocus",
      type: "(e: FocusEvent) => void",
      description: "Handler that is called when the element receives focus.",
      default: "-"
    },
    {
      attribute: "onBlur",
      type: "(e: FocusEvent) => void",
      description: "Handler that is called when the element loses focus.",
      default: "-"
    },
    {
      attribute: "onFocusChange",
      type: "(isFocused: boolean) => void",
      description: "Handler that is called when the element's focus status changes.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is released.",
      default: "-"
    },
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onPressChange",
      type: "(isPressed: boolean) => void",
      description: "Handler called when the press state changes.",
      default: "-"
    },
    {
      attribute: "onPressUp",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
      default: "-"
    },
    {
      attribute: "onClick",
      type: "MouseEventHandler",
      description: "The native button click event handler (Deprecated) use onPress instead.",
      default: "-"
    }
  ]}
/>

---

### Types

#### Accordion Item Indicator Props

```ts
export type AccordionItemIndicatorProps = {
  /**
   * The current indicator, usually an arrow icon.
   */
  indicator?: ReactNode;
  /**
   * The current open status.
   */
  isOpen?: boolean;
  /**
   * The current disabled status.
   * @default false
   */
  isDisabled?: boolean;
};

type indicator?: ReactNode | ((props: AccordionItemIndicatorProps) => ReactNode) | null;
```

### Accordion Item classNames

```ts
export type AccordionItemClassnames = {
  base?: string;
  heading?: string;
  trigger?: string;
  titleWrapper?: string;
  title?: string;
  subtitle?: string;
  startContent?: string;
  indicator?: string;
  content?: string;
};
```

#### Motion Props

```ts
export type MotionProps = {
  /**
   * If `true`, the opacity of the content will be animated
   * @default true
   */
  animateOpacity?: boolean;
  /**
   * The height you want the content in its collapsed state.
   * @default 0
   */
  startingHeight?: number;
  /**
   * The height you want the content in its expanded state.
   * @default "auto"
   */
  endingHeight?: number | string;
  /**
   * The y-axis offset you want the content in its collapsed state.
   * @default 10
   */
  startingY?: number;
  /**
   * The y-axis offset you want the content in its expanded state.
   * @default 0
   */
  endingY?: number;
} & HTMLMotionProps;
```


--- Содержимое из файла: accordion.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\accordion.mdx) ---

---
title: "Alert"
description: "Alerts are temporary notifications that provide concise feedback about an action or event."
---

import {alertContent} from "@/content/components/alert";

# Alert

Alerts are temporary notifications that provide concise feedback about an action or event.

<ComponentLinks component="alert" />

---

<CarbonAd />

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add alert",
    npm: "npm install @heroui/alert",
    yarn: "yarn add @heroui/alert",
    pnpm: "pnpm add @heroui/alert",
    bun: "bun add @heroui/alert",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Alert} from "@heroui/react";',
    individual: 'import {Alert} from "@heroui/alert";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={alertContent.usage} />

### Colors

Alert comes with 6 color variants to convey different meanings.

<CodeDemo title="Colors" files={alertContent.colors} />

### Variants

<CodeDemo title="Variants" files={alertContent.variants} />

### Radius

<CodeDemo title="Radius" files={alertContent.radius} />

### Custom Icon

By default, Alert displays an appropriate icon based on the `color` prop. You can override this by providing a custom icon using the `icon` prop.

<CodeDemo title="Custom Icon" files={alertContent.withIcon} />

### Without Icon

You can hide the icon by setting the `hideIcon` prop to `true`.

<CodeDemo title="Without Icon" files={alertContent.withoutIcon} />

### Without Icon Wrapper

You can hide the icon wrapper by setting the `hideIconWrapper` prop to `true`.

<CodeDemo title="Without Icon Wrapper" files={alertContent.withoutIconWrapper} />

### With Action

Alert supports an `endContent` prop for additional actions.

<CodeDemo title="With Action" files={alertContent.withAction} />

### Controlled Visibility

You can control the alert visibility using the `isVisible` and `onVisibleChange` props.

<CodeDemo title="Controlled" files={alertContent.controlled} />

### Custom Styles

You can customize the alert by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={alertContent.customStyles} />

### Custom Implementation

You can use the `useAlert` hook to create your own alert component.

<CodeDemo showPreview={false} title="Custom Implementation" files={alertContent.customImpl} />

<Spacer y={4} />

## Data Attributes

Alert has the following attributes on the `base` element:

- **data-visible**: When the alert is visible
- **data-closeable**: When the alert can be closed
- **data-has-title**: When the alert has a title
- **data-has-description**: When the alert has a description

<Spacer y={4} />

### Slots

Alert has the following slots:

- `base`: The main alert container element
- `title`: The title element
- `description`: The description element
- `mainWrapper`: The wrapper for the title and description content
- `closeButton`: The close button element
- `iconWrapper`: The wrapper for the alert icon
- `alertIcon`: The alert icon element

## Accessibility

- Alert has role of `alert`
- Close button has aria-label="Close" by default
- When closed, alert is removed from the DOM

<Spacer y={4} />

## API

### Alert Props

<APITable
  data={[
    {
      attribute: "title",
      type: "ReactNode",
      description: "The alert title",
      default: "-"
    },
    {
      attribute: "icon", 
      type: "ReactNode",
      description: "The alert icon - overrides the default icon",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode", 
      description: "The alert description",
      default: "-"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The alert color theme",
      default: "default"
    },
    {
      attribute: "variant",
      type: "solid | bordered | flat | faded",
      description: "The alert variant",
      default: "flat"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The alert border radius",
      default: "md"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The alert start content",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The alert end content", 
      default: "-"
    },
    {
      attribute: "isVisible",
      type: "boolean",
      description: "Whether the alert is visible",
      default: "-"
    },
    {
      attribute: "isClosable",
      type: "boolean",
      description: "Whether the alert can be closed",
      default: "false"
    },
    {
      attribute: "hideIcon",
      type: "boolean",
      description: "Whether the icon is hidden",
      default: "false"
    },
    {
      attribute: "hideIconWrapper",
      type: "boolean",
      description: "Whether the icon wrapper is hidden",
      default: "false"
    },
    {
      attribute: "closeButtonProps",
      type: "ButtonProps",
      description: "Props for the close button",
      default: "-"
    }
  ]}
/>

### Alert Events

<APITable
  data={[
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler called when the close button is clicked",
      default: "-"
    },
    {
      attribute: "onVisibleChange",
      type: "(isVisible: boolean) => void",
      description: "Handler called when the alert visibility changes",
      default: "-"
    }
  ]}
/>

--- Содержимое из файла: alert.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\alert.mdx) ---

---
title: "Autocomplete"
description: "An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query."
---

import {autocompleteContent} from "@/content/components/autocomplete";

# Autocomplete

An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.

<ComponentLinks component="autocomplete" reactAriaHook="useComboBox" />

---

<CarbonAd />

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add autocomplete",
    npm: "npm install @heroui/autocomplete",
    yarn: "yarn add @heroui/autocomplete",
    pnpm: "pnpm add @heroui/autocomplete",
    bun: "bun add @heroui/autocomplete",
  }}
/>

## Import

HeroUI exports 3 autocomplete-related components:

- **Autocomplete**: The main component, which is a wrapper for the other components.
- **AutocompleteSection**: The component that contains a group of autocomplete items.
- **AutocompleteItem**: The component that represents a autocomplete item.

<ImportTabs
  commands={{
    main: `import {
  Autocomplete,
  AutocompleteSection,
  AutocompleteItem
} from "@heroui/react";`,
    individual: `import {
  Autocomplete,
  AutocompleteSection,
  AutocompleteItem
} from "@heroui/autocomplete";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={autocompleteContent.usage} />

### Dynamic items

Autocomplete follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" files={autocompleteContent.dynamic} />

### Disabled

<CodeDemo title="Disabled" files={autocompleteContent.disabled} />

### Disabled Items

You can disable specific items by using the `disabledKeys` property.

<CodeDemo title="Disabled Items" files={autocompleteContent.disabledItems} />

### Required

If you pass the `isRequired` property to the autocomplete, it will have a `danger` asterisk at
the end of the label and the autocomplete will be required.

<CodeDemo title="Required" files={autocompleteContent.required} />

### Read Only

If you pass the `isReadOnly` property to the Autocomplete, the Listbox will open to display
all available options, but users won't be able to select any of the listed options.

<CodeDemo title="Read Only" files={autocompleteContent.readOnly} />

### Sizes

<CodeDemo title="Sizes" files={autocompleteContent.sizes} />

### Colors

<CodeDemo title="Colors" files={autocompleteContent.colors} />

### Variants

<CodeDemo title="Variants" files={autocompleteContent.variants} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo
  title="Label Placements"
  files={autocompleteContent.labelPlacements}
/>

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Start Content

You can use the `startContent` and `endContent` properties to add content to the start and end of
the autocomplete.

<CodeDemo title="Start Content" files={autocompleteContent.startContent} />

### Item Start & End Content

Since the `Autocomplete` component uses the [Listbox](/docs/components/listbox) component under the hood, you can
use the `startContent` and `endContent` properties of the `AutocompleteItem` component to add content to the start
and end of the autocomplete item.

<CodeDemo title="Item Start Content" files={autocompleteContent.itemStartContent} />

### Custom Value

By default, `Autocomplete` doesn't allow users to specify a value that doesn't exist in the list of options and will
revert the input value to the current selected value on blur. By specifying `allowsCustomValue`, this behavior is
suppressed and the user is free to enter any value within the field.

<CodeDemo title="Custom Value" files={autocompleteContent.customValue} />

### Custom Selector Icon

By default, `Autocomplete` uses a `chevron-down` icon as the selector icon which rotates when the autocomplete is open. You can
customize this icon by passing a custom one to the `selectorIcon` property.

<CodeDemo
  title="Custom Selector Icon"
  files={autocompleteContent.customSelectorIcon}
/>

> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.

### Without Scroll Shadow

Autocomplete component uses the [ScrollShadow](/docs/components/scroll-shadow) under the hood to show a shadow when the autocomplete content is scrollable.
You can disable this shadow by passing using the `scrollShadowProps` property.

<CodeDemo
  title="Without Scroll Shadow"
  files={autocompleteContent.withoutScrollShadow}
/>

> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.

### With Description

You can add a description to the autocomplete by passing the `description` property.

<CodeDemo title="With Description" files={autocompleteContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid autocomplete.

<CodeDemo
  title="With Error Message"
  files={autocompleteContent.errorMessage}
/>

### Events

The `Autocomplete` component supports selection via mouse, keyboard, and touch. You can handle all of these
via the `onSelectionChange` prop. `Autocomplete` will pass the selected key to the onSelectionChange handler.
Additionally, ComboBox accepts an `onInputChange` prop which is triggered whenever the value is edited by the user,
whether through typing or option selection.

The example below uses `onSelectionChange` and `onInputChange` to update the selection and input value stored in
React state.

<CodeDemo title="Events" files={autocompleteContent.events} />

### Controlled

You can use the `selectedKey` and `onSelectionChange` properties to control the select value.

<CodeDemo
  title="Controlled with onSelectionChange"
  files={autocompleteContent.controlled}
/>

### Fully Controlled

By passing in `inputValue`, `selectedKey`, and `items` to the `Autocomplete` you can control exactly what your `Autocomplete` should display.

The following example shows how you would create a controlled `Autocomplete`, controlling everything from the selected value
`selectedKey` to the combobox options `items`.

We recommend using the `useFilter` hook from [@react-aria/i18n](https://react-spectrum.adobe.com/react-aria/useFilter.html#usefilter) to manage the filtering of the items.

<PackageManagers
  commands={{
    npm: "npm install @react-aria/i18n",
    yarn: "yarn add @react-aria/i18n",
    pnpm: "pnpm add @react-aria/i18n",
  }}
/>

```jsx
import {useFilter} from "@react-aria/i18n";
```

<Spacer y={4} />

<CodeDemo
  title="Fully Controlled"
  showPreview={false}
  showOpenInCodeSandbox={false}
  files={autocompleteContent.fullyControlled}
/>

> **Note**: It is important to note that you don't have to control every single aspect of a `Autocomplete`. If you decide to only control a single property of the `Autocomplete`, be sure to provide the change handler for that prop as well e.g. controlling `selectedKey` would require `onSelectionChange`.

### Custom Items

You can customize the autocomplete items by modifying the `AutocompleteItem` children.

<CodeDemo title="Custom Items" files={autocompleteContent.customItems} />

### Custom Empty Content Message

By default, a message `No results found.` will be shown if there is no result matching a query with your filter. You can customize the empty content message by modifying the `emptyContent` in `listboxProps`.

<CodeDemo
  title="Custom Empty Content Message"
  files={autocompleteContent.customEmptyContentMessage}
/>

### Custom Filtering

By default, `Autocomplete` uses a `"contains"` function from [useFilter](https://react-spectrum.adobe.com/react-aria/useFilter.html) to filter the
list of options. This can be overridden using the `defaultFilter` prop, or by using the `items` prop to control the
filtered list. When `items` is provided rather than `defaultItems`, `Autocomplete` does no filtering of its own.

The following example uses the `defaultFilter` prop to filter the list of options using a custom filter function.

<CodeDemo
  title="Fully Controlled"
  files={autocompleteContent.customFiltering}
/>

### Asynchronous Filtering

Autocomplete supports asynchronous filtering, in the example below we are using the [useAsyncList](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) function
from [react-aria](https://react-spectrum.adobe.com) to handle asynchronous loading and filtering of data from a server.

<PackageManagers
  commands={{
    npm: "npm install @react-stately/data",
    yarn: "yarn add @react-stately/data",
    pnpm: "pnpm add @react-stately/data",
  }}
/>

```jsx
import {useAsyncList} from "@react-stately/data";
```

<Spacer y={2} />

<CodeDemo
  typescriptStrict={true}
  title="Asynchronous Filtering"
  showPreview={false}
  showOpenInCodeSandbox={false}
  files={autocompleteContent.asyncFiltering}
/>

### Asynchronous Loading

Autocomplete supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.

The `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.

<PackageManagers
  commands={{
    npm: "npm install @heroui/use-infinite-scroll",
    yarn: "yarn add @heroui/use-infinite-scroll",
    pnpm: "pnpm add @heroui/use-infinite-scroll",
  }}
/>

```jsx
import {useInfiniteScroll} from "@heroui/use-infinite-scroll";
```

<Spacer y={2} />

<CodeDemo
  showPreview={false}
  showOpenInCodeSandbox={false}
  typescriptStrict={true}
  title="Asynchronous Loading"
  files={autocompleteContent.asyncLoadingItems}
/>

### Virtualization

Autocomplete supports virtualization, in the example below we are using the `isVirtualized` prop to enable virtualization.

<CodeDemo
  title="Virtualization"
  highlightedLines="41"
  files={autocompleteContent.virtualization}
/>

> **Note**: The virtualization strategy is based on the [@tanstack/react-virtual](https://tanstack.com/virtual/latest) package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.

#### Ten Thousand Items

Virtualization with 10,000 items.

<CodeDemo title="Ten Thousand Items" files={autocompleteContent.virtualizationTenThousand} />

#### Max Listbox Height

The `maxListboxHeight` prop is used to set the maximum height of the listbox. This is required when using virtualization. By default, it's set to `256`.

<CodeDemo title="Max Listbox Height" files={autocompleteContent.virtualizationMaxListboxHeight} />

#### Custom Item Height

The `itemHeight` prop is used to set the height of each item in the listbox. This is required when using virtualization. By default, it's set to `32`.

> **Note**: If the height of the list items differs from the default due to `startContent` or other custom content, be sure to pass the correct value to `itemHeight` to prevent layout issues.

<CodeDemo title="Custom Item Height" files={autocompleteContent.virtualizationCustomItemHeight} />

### With Sections

You can use the `AutocompleteSection` component to group autocomplete items.

<CodeDemo title="With Sections" files={autocompleteContent.sections} />

### Custom Sections Style

You can customize the sections style by using the `classNames` property of the `AutocompleteSection` component.

<CodeDemo title="Custom Sections Style" files={autocompleteContent.customSectionsStyle} />

### Customizing the Autocomplete

You can customize any slot of the autocomplete by using the `classNames` property. Autocomplete
component also provides the [popoverProps](/docs/components/popover#api), [listboxProps](/docs/components/listbox#api), [inputProps](/docs/components/input#api)
properties to customize the popover, listbox and input components.

<CodeDemo title="Custom Styles" files={autocompleteContent.customStyles} />

## Slots

- **base**: The main wrapper of the autocomplete. This wraps the input and popover components.
- **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.
- **listbox**: The listbox component. This is the component that wraps the autocomplete items.
- **popoverContent**: The popover content slot. Use this to modify the popover content styles.
- **endContentWrapper**: The wrapper of the end content. This wraps the clear button and selector button.
- **clearButton**: The clear button slot.
- **selectorButton**: The selector button slot.

## Data Attributes

`Autocomplete` has the following attributes on the `base` element:

- **data-invalid**:
  When the autocomplete is invalid. Based on `isInvalid` prop.
- **data-open**:
  Indicates if the autocomplete's popover is open.

`Autocomplete` has the following attributes on the `selectorButton` element:

- **data-open**:
  Indicates if the autocomplete's popover is open.

`Autocomplete` has the following attributes on the `clearButton` element:

- **data-visible**:
  Indicates if the autocomplete's clear button is visible. By default it is visible when hovering the autocomplete and
  when the autocomplete has a value (desktop), or when the autocomplete has a value (mobile).

`AutocompleteItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the autocomplete item is disabled. Based on autocomplete `disabledKeys` prop.
- **data-selected**:
  When the autocomplete item is selected. Based on autocomplete `selectedKey` prop.
- **data-hover**:
  When the autocomplete item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the autocomplete item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the autocomplete item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the autocomplete item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Support for filtering a list of options by typing
- Support for selecting a single option
- Support for disabled options
- Support for groups of items in sections
- Support for custom user input values
- Support for controlled and uncontrolled options, selection, input value, and open state
- Support for custom filter functions
- Async loading and infinite scrolling support
- Support for virtualized scrolling for performance with long lists
- Exposed to assistive technology as a combobox with ARIA
- Labeling support for accessibility
- Required and invalid states exposed to assistive technology via ARIA
- Support for mouse, touch, and keyboard interactions
- Keyboard support for opening the combo box list box using the arrow keys, including automatically focusing the first or last item accordingly
- Support for opening the list box when typing, on focus, or manually
- Handles virtual clicks on the input from touch screen readers to toggle the list box
- Virtual focus management for combo box list box option navigation
- Hides elements outside the input and list box from assistive technology while the list box is open in a portal
- Custom localized announcements for option focusing, filtering, and selection using an ARIA live region to work around VoiceOver bugs
- Support for description and error message help text linked to the input via ARIA

<Spacer y={4} />

## API

### Autocomplete Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually a list of AutocompleteItem and AutocompleteSection elements.",
      default: "-"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "name",
      type: "string", 
      description: "The name of the input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the Autocomplete.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the Autocomplete.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the Autocomplete.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the Autocomplete.",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "The list of Autocomplete items. (controlled)",
      default: "-"
    },
    {
      attribute: "defaultItems",
      type: "Iterable<T>",
      description: "The list of Autocomplete items (uncontrolled).",
      default: "-"
    },
    {
      attribute: "inputValue",
      type: "string",
      description: "The value of the Autocomplete input (controlled).",
      default: "-"
    },
    {
      attribute: "defaultInputValue",
      type: "string",
      description: "The value of the Autocomplete input (uncontrolled).",
      default: "-"
    },
    {
      attribute: "allowsCustomValue",
      type: "boolean",
      description: "Whether the Autocomplete allows a non-item matching input value to be set.",
      default: "false"
    },
    {
      attribute: "allowsEmptyCollection",
      type: "boolean",
      description: "Whether the autocomplete allows the menu to be open when the collection is empty.",
      default: "true"
    },
    {
      attribute: "shouldCloseOnBlur",
      type: "boolean",
      description: "Whether the Autocomplete should close when the input is blurred.",
      default: "true"
    },
    {
      attribute: "placeholder",
      type: "string",
      description: "Temporary text that occupies the text input when it is empty.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the field. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "menuTrigger",
      type: "focus | input | manual",
      description: "The action that causes the menu to open.",
      default: "focus"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "selectedKey",
      type: "React.Key",
      description: "The currently selected key in the collection (controlled).",
      default: "-"
    },
    {
      attribute: "defaultSelectedKey",
      type: "React.Key",
      description: "The initial selected key in the collection (uncontrolled).",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "all | React.Key[]",
      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "An error message to display below the field.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), and return error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the Autocomplete.",
      default: "-"
    },
    {
      attribute: "endContent", 
      type: "ReactNode",
      description: "Element to be rendered in the right side of the Autocomplete.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the Autocomplete should be focused on render.",
      default: "false"
    },
    {
      attribute: "defaultFilter",
      type: "(textValue: string, inputValue: string) => boolean",
      description: "The filter function used to determine if a option should be included in the Autocomplete list.",
      default: "-"
    },
    {
      attribute: "filterOptions",
      type: "Intl.CollatorOptions",
      description: "The options used to create the collator used for filtering.",
      default: "{ sensitivity: 'base'}"
    },
    {
      attribute: "maxListboxHeight",
      type: "number",
      description: "The maximum height of the listbox in pixels. Required when using virtualization.",
      default: "256"
    },
    {
      attribute: "itemHeight",
      type: "number", 
      description: "The fixed height of each item in pixels. Required when using virtualization.",
      default: "32"
    },
    {
      attribute: "isVirtualized",
      type: "boolean",
      description: "Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.",
      default: "undefined"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the Autocomplete is read only.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether the Autocomplete is required.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the Autocomplete is invalid.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the Autocomplete is disabled.",
      default: "false"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the input should take up the width of its parent.",
      default: "true"
    },
    {
      attribute: "selectorIcon",
      type: "ReactNode",
      description: "The icon that represents the autocomplete open state. Usually a chevron icon.",
      default: "-"
    },
    {
      attribute: "clearIcon",
      type: "ReactNode",
      description: "The icon to be used in the clear button. Usually a cross icon.",
      default: "-"
    },
    {
      attribute: "showScrollIndicators",
      type: "boolean",
      description: "Whether the scroll indicators should be shown when the listbox is scrollable.",
      default: "true"
    },
    {
      attribute: "scrollRef",
      type: "React.RefObject<HTMLElement>",
      description: "A ref to the scrollable element.",
      default: "-"
    },
    {
      attribute: "inputProps",
      type: "InputProps",
      description: "Props to be passed to the Input component.",
      default: "-"
    },
    {
      attribute: "popoverProps",
      type: "PopoverProps",
      description: "Props to be passed to the Popover component.",
      default: "-"
    },
    {
      attribute: "listboxProps",
      type: "ListboxProps",
      description: "Props to be passed to the Listbox component.",
      default: "-"
    },
    {
      attribute: "scrollShadowProps",
      type: "ScrollShadowProps",
      description: "Props to be passed to the ScrollShadow component.",
      default: "-"
    },
    {
      attribute: "selectorButtonProps",
      type: "ButtonProps",
      description: "Props to be passed to the selector button.",
      default: "-"
    },
    {
      attribute: "clearButtonProps",
      type: "ButtonProps",
      description: "Props to be passed to the clear button.",
      default: "-"
    },
    {
      attribute: "isClearable",
      type: "boolean",
      description: "Whether the clear button should be shown.",
      default: "true"
    },
    {
      attribute: "disableClearable",
      type: "boolean",
      description: "Whether the clear button should be hidden. (Deprecated) Use isClearable instead.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the Autocomplete should be animated.",
      default: "true"
    },
    {
      attribute: "disableSelectorIconRotation",
      type: "boolean",
      description: "Whether the select should disable the rotation of the selector icon.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'listboxWrapper' | 'listbox' | 'popoverContent' | 'endContentWrapper' | 'clearButton' | 'selectorButton', string>>",
      description: "Allows to set custom class names for the Autocomplete slots.",
      default: "-"
    }
  ]}
/>

### Autocomplete Events

<APITable
  data={[
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void",
      description: "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
      default: "-"
    },
    {
      attribute: "onInputChange",
      type: "(value: string) => void",
      description: "Handler that is called when the Autocomplete input value changes.",
      default: "-"
    },
    {
      attribute: "onSelectionChange",
      type: "(key: React.Key) => void",
      description: "Handler that is called when the Autocomplete selection changes.",
      default: "-"
    },
    {
      attribute: "onFocus",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the Autocomplete input is focused.",
      default: "-"
    },
    {
      attribute: "onBlur",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the Autocomplete input is blurred.",
      default: "-"
    },
    {
      attribute: "onFocusChange",
      type: "(isFocused: boolean) => void",
      description: "Handler that is called when the Autocomplete input focus changes.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is released.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the Autocomplete's Popover is closed.",
      default: "-"
    }
  ]}
/>

---

### AutocompleteItem Props

Check the [ListboxItem](/docs/components/listbox#listboxitem-props) props.

### AutocompleteItem Events

Check the [ListboxItem](/docs/components/listbox#listboxitem-events) events.

### AutocompleteSection Props

Check the [ListboxSection](/docs/components/listbox#listboxsection-props) props.

---

### Types

#### Menu Trigger Action

```ts
type MenuTriggerAction = "focus" | "input" | "manual";
```


--- Содержимое из файла: autocomplete.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\autocomplete.mdx) ---

---
title: "Avatar"
description: "The Avatar component is used to represent a user, and displays the profile picture, initials or fallback icon."
---

import {avatarContent} from "@/content/components/avatar";


# Avatar

The Avatar component is used to represent a user, and displays the profile picture, initials or fallback icon.

<ComponentLinks component="avatar" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add avatar",
    npm: "npm install @heroui/avatar",
    yarn: "yarn add @heroui/avatar",
    pnpm: "pnpm add @heroui/avatar",
    bun: "bun add @heroui/avatar"
  }}
/>


## Import

HeroUI exports 3 avatar-related components:

- **Avatar**: The main component to display an avatar.
- **AvatarGroup**: A wrapper component to display a group of avatars.
- **AvatarIcon**: The default icon used as fallback when the image fails to load.

<ImportTabs
  commands={{
    main: 'import {Avatar, AvatarGroup, AvatarIcon} from "@heroui/react";',
    individual: 'import {Avatar, AvatarGroup, AvatarIcon} from "@heroui/avatar";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={avatarContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={avatarContent.sizes} />

### Disabled

<CodeDemo title="Disabled" files={avatarContent.disabled} />

### Bordered

<CodeDemo title="Bordered" files={avatarContent.bordered} />

### Radius

<CodeDemo title="Radius" files={avatarContent.radius} />

### Colors

<CodeDemo title="Colors" files={avatarContent.colors} />

### Avatar Fallbacks

If there is an error loading the `src` of the avatar, there are 2 fallbacks:

- If there's a `name` prop, we use it to generate the initials and a random, accessible background color.
- If there's no `name` prop, we use a default avatar.

If the `showFallback` is not passed, the fallbacks will not be displayed.

<CodeDemo title="Avatar Fallbacks" files={avatarContent.fallbacks} />

### Custom Fallback

You can also provide a custom fallback component to be displayed when the `src` fails to load.

<CodeDemo title="Custom Fallback" files={avatarContent.customFallback} />

### Custom Implementation

In case you need to customize the avatar even further, you can use the `useAvatar` hook to create your own implementation.

<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={avatarContent.customImpl} />
  

### Custom initials logic

It is possible to customize the logic used to generate the initials by passing a function to the `getInitials` prop.
By default we merge the first characters of each word in the `name` prop.

## Avatar Group

<CodeDemo title="Avatar Group" files={avatarContent.group} />

### Group Disabled

<CodeDemo title="Group Disabled" files={avatarContent.groupDisabled} />

### Group Max Count

You can limit the number of avatars displayed by passing the `max` prop to the `AvatarGroup` component.

<CodeDemo title="Group Max Count" files={avatarContent.groupMax} />

### Group Total Count

You can display the total number of avatars by passing the `total` prop to the `AvatarGroup` component.

<CodeDemo title="Group Total Count" files={avatarContent.groupTotal} />

### Group Custom count

`AvatarGroup` provides a `renderCount` prop to customize the count displayed when the `total` prop is passed.

<CodeDemo title="Group Custom count" files={avatarContent.groupCustomCount} />

### Group Grid

By passing the `isGrid` prop to the `AvatarGroup` component, the avatars will be displayed in a grid layout.

<CodeDemo title="Usage" files={avatarContent.groupGrid} />

### Group Custom Implementation

In case you need to customize the avatar group even further, you can use the `useAvatarGroup` hook and the
`AvatarGroupProvider` to create your own implementation.

<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={avatarContent.groupCustomImpl} />

## Slots

- **base**: Avatar wrapper, it includes styles for focus ring, position, and general appearance.
- **img**: Image element within the avatar, it includes styles for opacity transition and size.
- **fallback**: Fallback content when the image fails to load or is not provided, it includes styles for centering the content.
- **name**: Initials displayed when the image is not provided or fails to load, it includes styles for font, text alignment, and inheritance.
- **icon**: Icon element within the avatar, it includes styles for centering the content, text inheritance, and size.

### Custom Avatar Styles

You can customize any part of the avatar by using the `classNames` prop, each `slot` has its own `className`.

<CodeDemo title="Custom Avatar" files={avatarContent.custom} />

<Spacer y={4} />

## Data Attributes

`Avatar` has the following attributes on the `base` element:

- **data-hover**:
  When the avatar is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the avatar is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html), it is applied when `isFocusable` is `true` or when the `as` property is assigned as `button`.
- **data-focus-visible**:
  When the avatar is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html), it is applied when `isFocusable` is `true` or when the `as` property is assigned as `button`.

<Spacer y={4} />

## API

### Avatar Props

<APITable
  data={[
    {
      attribute: "src",
      type: "string", 
      description: "The source URL of the image to be displayed.",
      default: "-"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "Sets the avatar background color.",
      default: "default"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "Sets the avatar border radius.",
      default: "full"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "Sets the avatar size.",
      default: "md"
    },
    {
      attribute: "name",
      type: "string",
      description: "Displays the initials if the image is not provided or fails to load.",
      default: "-"
    },
    {
      attribute: "icon",
      type: "ReactNode",
      description: "Displays a custom icon inside the avatar.",
      default: "-"
    },
    {
      attribute: "fallback",
      type: "ReactNode",
      description: "A custom fallback component to display when the image fails to load.",
      default: "-"
    },
    {
      attribute: "isBordered",
      type: "boolean",
      description: "If true, adds a border around the avatar.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean", 
      description: "If true, disables the avatar and applies a disabled styling.",
      default: "false"
    },
    {
      attribute: "isFocusable",
      type: "boolean",
      description: "If true, makes the avatar focusable for keyboard navigation.",
      default: "false"
    },
    {
      attribute: "showFallback",
      type: "boolean",
      description: "If true, shows the fallback icon or initials when the image fails to load.",
      default: "false"
    },
    {
      attribute: "ImgComponent",
      type: "React.ElementType",
      description: "The component to be used as the image element.",
      default: "img"
    },
    {
      attribute: "imgProps",
      type: "ImgComponentProps",
      description: "Props to be passed to the image element.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"img\" | \"fallback\" | \"name\" | \"icon\", string>>",
      description: "Allows to set custom class names for the avatar slots.",
      default: "-"
    }
  ]}
/>

### Avatar Group Props

<APITable
  data={[
    {
      attribute: "max",
      type: "number",
      description: "The maximum number of visible avatars",
      default: "5"
    },
    {
      attribute: "total",
      type: "number", 
      description: "Control the number of avatar not visible",
      default: "-"
    },
    {
      attribute: "size",
      type: "AvatarProps['size']",
      description: "Size of the avatars",
      default: "-"
    },
    {
      attribute: "color",
      type: "AvatarProps['color']",
      description: "Color of the avatars",
      default: "-"
    },
    {
      attribute: "radius",
      type: "AvatarProps['radius']",
      description: "Radius of the avatars",
      default: "-"
    },
    {
      attribute: "isGrid",
      type: "boolean",
      description: "Whether the avatars should be displayed in a grid",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the avatars are disabled",
      default: "-"
    },
    {
      attribute: "isBordered",
      type: "boolean",
      description: "Whether the avatars have a border",
      default: "-"
    },
    {
      attribute: "renderCount",
      type: "(count: number) => ReactNode",
      description: "This allows you to render a custom count component.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"count\", string>>",
      description: "Allows to set custom class names for the avatar group slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: avatar.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\avatar.mdx) ---

---
title: "Badge"
description: "Badges are used as a small numerical value or status descriptor for UI elements."
---

import {badgeContent} from "@/content/components/badge";

# Badge

Badges are used as a small numerical value or status descriptor for UI elements.

<ComponentLinks component="badge" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add badge",
    npm: "npm install @heroui/badge",
    yarn: "yarn add @heroui/badge",
    pnpm: "pnpm add @heroui/badge",
    bun: "bun add @heroui/badge"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Badge} from "@heroui/react";',
    individual: 'import {Badge} from "@heroui/badge";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={badgeContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={badgeContent.sizes} />

### Colors

<CodeDemo title="Colors" files={badgeContent.colors} />

### Variants

<CodeDemo title="Variants" files={badgeContent.variants} />

### Placements

<CodeDemo title="Placements" files={badgeContent.placements} />

### Shapes

For a better positioning, you can use the `shape` property to define the shape of the badge.

<CodeDemo title="Shapes" files={badgeContent.shapes} />

### Badge Visibility

You can control the visibility of the badge by using the `isInvisible` property.

<CodeDemo title="Badge visibility" files={badgeContent.visibility} />

### Content Examples

<CodeDemo title="Content examples" files={badgeContent.contentExamples} />

### Disable Outline

By default, the badge has an outline, you can disable it by using the `showOutline={false}` property.

<CodeDemo title="Disable outline" files={badgeContent.showOutline} />

### Accessibility

It's not advisable to depend on the badge's content for accurate announcement.
Instead, consider supplying a comprehensive description, such as using `aria-label`.

<CodeDemo title="Accessibility" files={badgeContent.a11y} />

<Spacer y={4} />

## Slots

The Badge component has two slots:

- **base**: The base slot for the badge, which is the container of the badge.

- **badge**: The main slot for the badge content, which is the content of the badge.

<Spacer y={4} />

## API

### Badge Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The wrapped component.",
      default: "-"
    },
    {
      attribute: "content", 
      type: "string | number | ReactNode",
      description: "The content of the badge. The badge will be rendered relative to its children.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | flat | faded | shadow",
      description: "The variant style of the badge.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the badge.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the badge.",
      default: "md"
    },
    {
      attribute: "shape",
      type: "circle | rectangle",
      description: "The shape of the badge.",
      default: "rectangle"
    },
    {
      attribute: "placement",
      type: "top-right | top-left | bottom-right | bottom-left",
      description: "The placement of the badge.",
      default: "top-right"
    },
    {
      attribute: "showOutline",
      type: "boolean",
      description: "If `true`, the badge will have an outline.",
      default: "true"
    },
    {
      attribute: "disableOutline",
      type: "boolean", 
      description: "If `true`, the badge will not have an outline. **Deprecated** use `showOutline` instead.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "If `true`, the badge will not have an animation.",
      default: "false"
    },
    {
      attribute: "isInvisible",
      type: "boolean",
      description: "If `true`, the badge will be invisible.",
      default: "false"
    },
    {
      attribute: "isOneChar",
      type: "boolean",
      description: "If `true`, the badge will have the same width and height.",
      default: "false"
    },
    {
      attribute: "isDot",
      type: "boolean",
      description: "If `true`, the badge will have smaller dimensions.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\"｜\"badge\", string>>",
      description: "Allows to set custom class names for the badge slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: badge.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\badge.mdx) ---

---
title: "Breadcrumbs"
description: "Breadcrumbs display a hierarchy of links to the current page or resource in an application."
---

import {breadcrumbsContent} from "@/content/components/breadcrumbs";

# Breadcrumbs

Breadcrumbs display a hierarchy of links to the current page or resource in an application.

<ComponentLinks component="breadcrumbs" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add breadcrumbs",
    npm: "npm install @heroui/breadcrumbs",
    yarn: "yarn add @heroui/breadcrumbs",
    pnpm: "pnpm add @heroui/breadcrumbs",
    bun: "bun add @heroui/breadcrumbs"
  }}
/>


## Import

HeroUI exports 2 breadcrumb-related components:

- **Breadcumbs**: The main component, which is a wrapper for the other components.
- **BreadcrumbItem**: The component that represents a breadcrumb item.

<ImportTabs
  commands={{
    main: 'import {Breadcrumbs, BreadcrumbItem} from "@heroui/react";',
    individual: 'import {Breadcrumbs, BreadcrumbItem} from "@heroui/breadcrumbs";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={breadcrumbsContent.usage} />

### Disabled

Disabled breadcrumbs display items but prevent navigation, ensuring a consistent layout. The last item, signifying the current page, isn't disabled.

<CodeDemo title="Disabled" files={breadcrumbsContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={breadcrumbsContent.sizes} />

### Colors

<CodeDemo title="Colors" files={breadcrumbsContent.colors} />

### Variants

<CodeDemo title="Variants" files={breadcrumbsContent.variants} />

### Underlines

<CodeDemo title="Underlines" files={breadcrumbsContent.underlines} />

### Radius

<CodeDemo title="Radius" files={breadcrumbsContent.radius} />

### Routing

The `<BreadcrumbItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.

<CodeDemo title="Routing" files={breadcrumbsContent.routing} />

### Controlled

You can control the current/active item by using the `isCurrent` and `onAction` props.

<CodeDemo title="Controlled" files={breadcrumbsContent.controlled} />

> **Note**: If needed you can use the `onPress` prop to handle the click event on the breadcrumb item.

### Menu Type

It is possible to use the `Breadcrumbs` component as a horizontal menu. This is useful when you want to display a list
of possible navigations and let the user choose one of them.

<CodeDemo title="Menu Type" files={breadcrumbsContent.menuType} />

### Start & End Content

You can add any element to the start or end of the breadcrumbs by using the `startContent` and `endContent` props. The
above example uses the `startContent` prop to add icons to the start of the breadcrumbs.

<CodeDemo title="Start & End Content" files={breadcrumbsContent.startEndContent} />

### Custom Separator

You can customize the separator between breadcrumbs by using the `separator` prop.

<CodeDemo title="Separator" files={breadcrumbsContent.separator} />

### Custom Items

the `BreadcrumbItem` component accepts any element as its children. This allows you to customize the appearance of the
breadcrumb items.

The above example uses the [Dropdown](/docs/components/dropdown) component to create a dropdown menu in the breadcrumb.

<CodeDemo title="Custom Items" files={breadcrumbsContent.customItems} />

The `Breadcrumbs` component picks only the `BreadcrumbItem` components as its children. This means that you cannot
place any other component directly inside the `Breadcrumbs` component.

```tsx
// ❌ This will not work,
// The Button will not be picked by the Breadcrumbs component.
<Breadcrumbs>
  <BreadcrumbItem>Item 1</BreadcrumbItem>
  <Button>Item 2</Button>
</Breadcrumbs>

// ✅ Instead, you can wrap the Button inside a BreadcrumbItem.
<Breadcrumbs>
  <BreadcrumbItem>Item 1</BreadcrumbItem>
  <BreadcrumbItem>
    <Button>Item 2</Button>
  </BreadcrumbItem>
</Breadcrumbs>
```

### Collapsing Items

The `Breadcrumb` component provides 3 props to control the collapsing of items:

- `maxItems`: Specifies the maximum number of breadcrumbs to display. When there are more
  than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
  will be shown, with an ellipsis in between.
- `itemsBeforeCollapse`: If max items is exceeded, the number of items to show before the ellipsis.
- `itemsAfterCollapse`: If max items is exceeded, the number of items to show after the ellipsis.

<CodeDemo title="Collapsing Items" files={breadcrumbsContent.collapsingItems} />

> **Note**: The ellipsis item will use the first collapsed item as its `href` prop.

### Customizing the Ellipsis Item

You can customize the ellipsis item by using the `renderEllipsis` prop. This prop accepts a function that returns a
React element.

<CodeDemo title="Customizing the Ellipsis Item" files={breadcrumbsContent.customizingEllipsis} />

## Slots

- Breadcrumbs Slots

- **base**: The main slot for the breadcrumbs. It wraps the `list` slot.
- **list**: The list of breadcrumbs wrapper.
- **ellipsis**: The slot for the ellipsis item. This is only visible when the breadcrumbs are collapsed.
- **separator**: The slot for the custom separator, the one that can be set using the `separator` prop.

- BreadcrumbItem Slots

- **base**: The main slot for the breadcrumb item. It wraps the `item` slot.
- **item**: The breadcrumb item wrapper.
- **separator**: The slot for the item separator.

### Customizing the Breadcrumbs Styles

You can customize the `Breadcrumbs` style by using the `classNames` prop and its items by using the `itemClasses` prop.

<CodeDemo title="Custom Breadcrumbs Styles" files={breadcrumbsContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`BreadcrumbItem` has the following attributes on the `item` element:

- **data-current**:
  When the breadcrumb item is the current item. Based on breadcrumb `isCurrent` prop or on whether the item is the last one.
- **data-disabled**:
  When the breadcrumb item is disabled. Based on breadcrumb `isDisabled` prop.
- **data-focus**:
  When the breadcrumb item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the breadcrumb item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Implemented as an ordered list of items.
- Support for mouse, touch, and keyboard interactions on breadcrumbs.
- Support for navigation links via `<a>` elements or custom element types via ARIA.
- Localized ARIA labeling support for landmark navigation region.
- Support for disabled breadcrumbs.
- The last item is automatically marked as the current page using `aria-current`.

<Spacer y={4} />

## API

### Breadcrumbs Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the Breadcrumbs. Usually a list of `BreadcrumbItem` components.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | bordered | light",
      description: "The Breadcrumbs list appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "foreground | primary | secondary | success | warning | danger",
      description: "The Breadcrumbs' items color theme.",
      default: "foreground"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The Breadcrumbs' items size.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The Breadcrumbs list border radius.",
      default: "-"
    },
    {
      attribute: "underline",
      type: "none | active | hover | focus | always",
      description: "The Breadcrumbs' items underline style.",
      default: "none"
    },
    {
      attribute: "separator",
      type: "ReactNode",
      description: "The custom separator between Breadcrumbs. It is a chevron by default.",
      default: "-"
    },
    {
      attribute: "maxItems",
      type: "number",
      description: "The maximum number of breadcrumbs to display.",
      default: "-"
    },
    {
      attribute: "itemsBeforeCollapse",
      type: "number",
      description: "The number of items to show before the ellipsis.",
      default: "-"
    },
    {
      attribute: "itemsAfterCollapse",
      type: "number",
      description: "The number of items to show after the ellipsis.",
      default: "-"
    },
    {
      attribute: "hideSeparator",
      type: "boolean",
      description: "Whether to hide the separator between breadcrumbs.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the Breadcrumbs are disabled except the last item.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the Breadcrumbs should display animations.",
      default: "false"
    },
    {
      attribute: "itemClasses",
      type: "Partial<Record<\"base\" | \"item\" | \"separator\", string>>",
      description: "Allows to set custom class names for the breadcrumbs item slots.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"list\" | \"ellipsis\" | \"separator\", string>>",
      description: "Allows to set custom class names for the breadcrumbs slots.",
      default: "-"
    }
  ]}
/>

### Breadcrumbs Events

<APITable
  data={[
    {
      attribute: "onAction",
      type: "(key: React.Key) => void",
      description: "Handler called when any breadcrumb item is pressed. It returns the item key.",
      default: "-"
    }
  ]}
/>

### BreadcrumbItem Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the item. Usually the link label or icon.",
      default: "-"
    },
    {
      attribute: "color",
      type: "foreground | primary | secondary | success | warning | danger",
      description: "The item color theme.",
      default: "foreground"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The item size.",
      default: "md"
    },
    {
      attribute: "underline",
      type: "none | active | hover | focus | always",
      description: "The item underline style.",
      default: "none"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The item start content.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The item end content.",
      default: "-"
    },
    {
      attribute: "separator",
      type: "ReactNode",
      description: "The item custom separator. It is a chevron by default.",
      default: "-"
    },
    {
      attribute: "isCurrent",
      type: "boolean",
      description: "Whether the item is the current/active one.",
      default: "false"
    },
    {
      attribute: "isLast",
      type: "boolean",
      description: "Whether the item is the last one.",
      default: "false"
    },
    {
      attribute: "hideSeparator",
      type: "boolean",
      description: "Whether to hide the item separator.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the item is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the item should display animations.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"item\" | \"separator\", string>>",
      description: "Allows to set custom class names for the item slots.",
      default: "-"
    }
  ]}
/>

### BreadcrumbItem Events

<APITable
  data={[
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is released.",
      default: "-"
    }
  ]}
/>

<Spacer y={2} />

### Types

#### Render Ellipsis Function

```ts
export type RenderEllipsisItemProps = {
  /**
   * The collapsed items.
   */
  items: BreadcrumbItemProps[];
  /**
   * The max number of items.
   */
  maxItems: number;
  /**
   * The picked item to render the ellipsis.
   */
  collapsedItem: ReactNode;
  /**
   * The default ellipsis icon.
   */
  ellipsisIcon: ReactNode;
  /**
   * Number of items to show before the ellipsis.
   */
  itemsBeforeCollapse: number;
  /**
   * Number of items to show after the ellipsis.
   */
  itemsAfterCollapse: number;
  /**
   * The separator between each breadcrumb. It is a chevron by default.
   */
  separator: ReactNode;
};

renderEllipsis: (props: RenderEllipsisItemProps) => ReactNode;
```


--- Содержимое из файла: breadcrumbs.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\breadcrumbs.mdx) ---

---
title: "Button"
description: "Buttons allow users to perform actions and choose with a single tap."
---

import {buttonContent} from "@/content/components/button";

# Button

Buttons allow users to perform actions and choose with a single tap.

<ComponentLinks component="button" reactAriaHook="useButton" />

---

<CarbonAd />

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add button",
    npm: "npm install @heroui/button",
    yarn: "yarn add @heroui/button",
    pnpm: "pnpm add @heroui/button",
    bun: "bun add @heroui/button",
  }}
/>

## Import

HeroUI exports 2 button-related components:

- **Button**: The main component to display a button.
- **ButtonGroup**: A wrapper component to display a group of buttons.

<ImportTabs
  commands={{
    main: 'import {Button, ButtonGroup} from "@heroui/react";',
    individual: 'import {Button, ButtonGroup} from "@heroui/button";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={buttonContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={buttonContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={buttonContent.sizes} />

### Radius

<CodeDemo title="Radius" files={buttonContent.radius} />

### Colors

<CodeDemo title="Colors" files={buttonContent.colors} />

### Variants

<CodeDemo title="Variants" files={buttonContent.variants} />

### Loading

Pass the `isLoading` prop to display a [Spinner](/docs/components/spinner) component inside the button.

<CodeDemo title="Loading" files={buttonContent.loading} />

You can also customize the loading spinner by passing the a custom component to the `spinner` prop.

<CodeDemo title="Custom Loading" files={buttonContent.loadingCustom} />

### With Icons

You can add icons to the `Button` by passing the `startContent` or `endContent` props.

<CodeDemo title="With Icons" files={buttonContent.icons} />

### Icon Only

You can also display a button without text by passing the `isIconOnly` prop and the desired icon as `children`.

<CodeDemo title="With Icons" files={buttonContent.iconOnly} />

### Custom Styles

You can customize the `Button` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={buttonContent.customStyles} />

> Custom class names will override the default ones thanks to [Tailwind Merge](https://github.com/dcastil/tailwind-merge) library. It
> means that you don't need to worry about class conflicts.

### Custom Implementation

You can also use the `useButton` hook to create your own button component.

<CodeDemo
  showPreview={false}
  showOpenInCodeSandbox={false}
  title="Custom Implementation"
  files={buttonContent.customImpl}
/>

## Button Group

<CodeDemo title="Button Group" files={buttonContent.group} />

### Group Disabled

The `ButtonGroup` component also accepts the `isDisabled` prop to disable all buttons inside it.

<CodeDemo title="Group Disabled" files={buttonContent.groupDisabled} />

### Group Use case

A common use case for the `ButtonGroup` component is to display a group of two buttons one for the selected value and another for the `dropdown`.

<CodeDemo title="Group Use case" files={buttonContent.groupUseCase} />

> See the [Dropdown](/docs/components/dropdown) component for more details.

<Spacer y={4} />

## Data Attributes

`Button` has the following attributes on the `base` element:

- **data-hover**:
  When the button is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the button is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the button is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the button is disabled. Based on `isDisabled` prop.
- **data-pressed**:
  When the button is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-loading**:
  When the button is loading. Based on `isLoading` prop.

<Spacer y={4} />

## Accessibility

- Button has role of `button`.
- Keyboard event support for <Kbd>Space</Kbd> and <Kbd>Enter</Kbd> keys.
- Mouse and touch event handling, and press state management.
- Keyboard focus management and cross browser normalization.

We recommend to read this [blog post](https://react-spectrum.adobe.com/blog/building-a-button-part-1.html) about the complexities of
building buttons that work well across devices and interaction methods.

<Spacer y={4} />

## API

### Button Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content to display in the button.",
      default: "-"
    },
    {
      attribute: "variant",
      type: 'solid | bordered | light | flat | faded | shadow | ghost',
      description: "The button appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The button color theme.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The button size.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The button border radius.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The button start content.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The button end content.",
      default: "-"
    },
    {
      attribute: "spinner",
      type: "ReactNode",
      description: "Spinner to display when loading.",
      default: "-"
    },
    {
      attribute: "spinnerPlacement",
      type: "start | end",
      description: "The spinner placement.",
      default: "start"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the button should take the full width of its parent.",
      default: "false"
    },
    {
      attribute: "isIconOnly",
      type: "boolean",
      description: "Whether the button should have the same width and height.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the button is disabled.",
      default: "false"
    },
    {
      attribute: "isLoading",
      type: "boolean",
      description: "Whether the button is loading.",
      default: "false"
    },
    {
      attribute: "disableRipple",
      type: "boolean",
      description: "Whether the button should display a ripple effect on press.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the button should display animations.",
      default: "false"
    }
  ]}
/>

### Button Events

<APITable
  data={[
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onPressChange",
      type: "(isPressed: boolean) => void",
      description: "Handler called when the press state changes.",
      default: "-"
    },
    {
      attribute: "onPressUp",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is released.",
      default: "-"
    },
    {
      attribute: "onClick",
      deprecated: true,
      type: "MouseEventHandler",
      description: "The native button click event handler (Deprecated) use onPress instead.",
      default: "-"
    }
  ]}
/>

### Button Group Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode | ReactNode[]",
      description: "The buttons to display.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | bordered | light | flat | faded | shadow | ghost",
      description: "The buttons appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The buttons color theme.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The buttons size.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The buttons border radius.",
      default: "xl"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the buttons should take the full width.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the buttons are disabled.",
      default: "false"
    }
  ]}
/>


--- Содержимое из файла: button.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\button.mdx) ---

---
title: "Calendar"
description: "The Calendar component is used to display one or more date grids and allows users to select a single date."
---

import {calendarContent} from "@/content/components/calendar";

# Calendar

A calendar consists of a grouping element containing one or more date grids (e.g. months), and a previous and next button for navigating between date ranges. Each calendar grid consists of cells containing button elements that can be pressed and navigated to using the arrow keys to select a date.

<ComponentLinks component="calendar" reactAriaHook="useCalendar" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add calendar",
    npm: "npm install @heroui/calendar",
    yarn: "yarn add @heroui/calendar",
    pnpm: "pnpm add @heroui/calendar",
    bun: "bun add @heroui/calendar",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Calendar} from "@heroui/react";',
    individual: 'import {Calendar} from "@heroui/calendar";',
  }}
/>

## Usage

A Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the `value` prop.

Date values are provided using objects in the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) package. This library handles correct international date manipulation across calendars, time zones, and other localization concerns.

<CodeDemo title="Usage" files={calendarContent.usage} />

### Disabled

The `isDisabled` boolean prop makes the Calendar disabled. Cells cannot be focused or selected.

<CodeDemo title="Disabled" files={calendarContent.disabled} />

### Read Only

The `isReadOnly` boolean prop makes the Calendar's value immutable. Unlike `isDisabled`, the Calendar remains focusable.

<CodeDemo title="Read Only" files={calendarContent.readonly} />

### Controlled

A Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the value prop.

<CodeDemo title="Controlled" files={calendarContent.controlled} />

### Min Date Value

By default, Calendar allows selecting any date. The `minValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates after today.

<CodeDemo title="Min Date Value" files={calendarContent.minDateValue} />

### Max Date Value

By default, Calendar allows selecting any date. The `maxValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates before today.

<CodeDemo title="Max Date Value" files={calendarContent.maxDateValue} />

### Unavailable Dates

Calendar supports marking certain dates as unavailable. These dates remain focusable with the keyboard so that navigation is consistent, but cannot be selected by the user. In this example, they are displayed in red. The `isDateUnavailable` prop accepts a callback that is called to evaluate whether each visible date is unavailable.

<CodeDemo title="Unavailable Dates" files={calendarContent.unavailableDates} />

### Controlled Focused Value

Calendar tries to avoid allowing the user to select invalid dates in the first place. However, if according to application logic a selected date is invalid, the isInvalid prop can be set. This alerts assistive technology users that the selection is invalid, and can be used for styling purposes as well. In addition, the errorMessage slot may be used to help the user fix the issue.

By default, the selected date is focused when a Calendar first mounts. If no `value` or `defaultValue` prop is provided, then the current date is focused. However, Calendar supports controlling which date is focused using the `focusedValue` and `onFocusChange` props. This also determines which month is visible. The `defaultFocusedValue` prop allows setting the initial focused date when the Calendar first mounts, without controlling it.

<CodeDemo title="Controlled Focused Value" files={calendarContent.controlledFocusedValue} />

### Invalid Date

This example validates that the selected date is a weekday and not a weekend according to the current locale.

<CodeDemo title="Invalid Date" files={calendarContent.invalidDate} />

### With Month And Year Picker

Calendar supports month and year picker for rapid selection. You can enable this feature by setting `showMonthAndYearPickers` to `true`. However, if `visibleMonths` is set to a number greater than 1, this feature will be disabled.

<CodeDemo title="With Month And Year Picker" files={calendarContent.withMonthAndYearPicker} />

### International Calendars

Calendar supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the `Provider` component.

<CodeDemo title="International Calendars" files={calendarContent.internationalCalendars} />

### Visible Months

By default, the Calendar displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time.

<CodeDemo title="Visible Months" files={calendarContent.visibleMonths} />

### Custom first day of week

By default, the first day of the week is automatically set based on the current locale. This can be changed by setting the `firstDayOfWeek` prop to `'sun'`, `'mon'`, `'tue'`, `'wed'`, `'thu'`, `'fri'`, or `'sat'`.

<CodeDemo title="Custom first day of week" files={calendarContent.firstDayOfWeek} />

### Page Behaviour

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behaviour" files={calendarContent.pageBehaviour} />

### Presets

Here's the example to customize `topContent` and `bottomContent` to have some preset values.

<CodeDemo title="Presets" files={calendarContent.presets} />

## Slots

- **base**: Calendar wrapper, it handles alignment, placement, and general appearance.
- **prevButton**: The previous button of the calendar.
- **nextButton**: The next button of the calendar.
- **headerWrapper**: Wraps the picker (month / year).
- **header**: The header element.
- **title**: A description of the visible date range, for use in the calendar title.
- **gridWrapper**: The wrapper for the calendar grid.
- **grid**: The date grid element (e.g. `<table>`).
- **gridHeader**: The date grid header element (e.g. `<th>`).
- **gridHeaderRow**: The date grid header row element (e.g. `<tr>`).
- **gridHeaderCell**: The date grid header cell element (e.g. `<td>`).
- **gridBody**: The date grid body element (e.g. `<tbody>`).
- **gridBodyRow**: The date grid body row element (e.g. `<tr>`).
- **cell**: The date grid cell element (e.g. `<td>`).
- **cellButton**: The button element within the cell.
- **pickerWrapper**: The wrapper for the picker
- **pickerMonthList**: The month list picker.
- **pickerYearList**: The year list picker.
- **pickerHighlight**: The highlighted item of the picker.
- **pickerItem**: The item of the picker.
- **helperWrapper**: The helper message of the calendar.
- **errorMessage**: The error message of the calendar.

<Spacer y={4} />

## Data Attributes

`Calendar` has the following attributes on the `CalendarCell` element:

- **data-focused**:
  Whether the cell is focused.
- **data-hovered**:
  Whether the cell is currently hovered with a mouse.
- **data-pressed**:
  Whether the cell is currently being pressed.
- **data-unavailable**:
  Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they are unavailable, such as a different color or a strikethrough.
- **data-disabled**:
  Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.
- **data-focus-visible**:
  Whether the cell is keyboard focused.
- **data-outside-visible-range**:
  Whether the cell is outside the visible range of the calendar.
- **data-outside-month**:
  Whether the cell is outside the current month.
- **data-selected**:
  Whether the cell is selected.
- **data-selected-start**:
  Whether the cell is the first date in a range selection.
- **data-selected-end**:
  Whether the cell is the last date in a range selection.
- **data-invalid**:
  Whether the cell is part of an invalid selection.

<Spacer y={4} />

## Accessibility

- Display one or more months at once, or a custom time range for use cases like a week view. Minimum and maximum values, unavailable dates, and non-contiguous selections are supported as well.
- Support for 13 calendar systems used around the world, including Gregorian, Buddhist, Islamic, Persian, and more. Locale-specific formatting, number systems, and right-to-left support are available as well.
- Calendar cells can be navigated and selected using the keyboard, and localized screen reader messages are included to announce when the selection and visible date range change.

<Spacer y={4} />

## API

### Calendar Props

<APITable 
  data={[
    {
      attribute: "value",
      type: "DateValue | null",
      description: "The current value (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue", 
      type: "DateValue | null",
      description: "The default value (uncontrolled).",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "DateValue",
      description: "The minimum allowed date that a user may select.",
      default: "-"
    },
    {
      attribute: "maxValue",
      type: "DateValue", 
      description: "The maximum allowed date that a user may select.",
      default: "-"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the time input.",
      default: "default"
    },
    {
      attribute: "visibleMonths",
      type: "number",
      description: "The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the showMonthAndYearPickers prop.",
      default: "1"
    },
    {
      attribute: "firstDayOfWeek",
      type: "sun | mon | tue | wed | thu | fri | sat",
      description: "The day that starts the week.",
      default: "-"
    },
    {
      attribute: "focusedValue",
      type: "DateValue",
      description: "Controls the currently focused date within the calendar.",
      default: "-"
    },
    {
      attribute: "defaultFocusedValue",
      type: "DateValue",
      description: "The date that is focused when the calendar first mounts (uncountrolled).",
      default: "-"
    },
    {
      attribute: "calendarWidth",
      type: "number | string",
      description: "The width to be applied to the calendar component. This value is multiplied by the visibleMonths number to determine the total width of the calendar.",
      default: "256"
    },
    {
      attribute: "pageBehavior",
      type: "single | visible",
      description: "Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.",
      default: "visible"
    },
    {
      attribute: "weekdayStyle",
      type: "narrow | short | long | undefined",
      description: "The style of weekday names to display in the calendar grid header, e.g. single letter, abbreviation, or full day name.",
      default: "narrow"
    },
    {
      attribute: "showMonthAndYearPickers",
      type: "boolean",
      description: "Whether the label should be crossed out.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean", 
      description: "Whether the calendar is disabled.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the calendar value is immutable.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the current selection is invalid according to application logic.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether to automatically focus the calendar when it mounts.",
      default: "false"
    },
    {
      attribute: "showHelper",
      type: "boolean",
      description: "Whether to show the description or error message.",
      default: "false"
    },
    {
      attribute: "showShadow",
      type: "boolean", 
      description: "Whether to show the shadow in the selected date.",
      default: "false"
    },
    {
      attribute: "isHeaderExpanded",
      type: "boolean",
      description: "Whether the calendar header is expanded. This is only available if the showMonthAndYearPickers prop is set to true.",
      default: "false"
    },
    {
      attribute: "isHeaderDefaultExpanded",
      type: "boolean",
      description: "Whether the calendar header should be expanded by default. This is only available if the showMonthAndYearPickers prop is set to true.",
      default: "false"
    },
    {
      attribute: "topContent",
      type: "ReactNode",
      description: "Custom content to be included in the top of the calendar.",
      default: "-"
    },
    {
      attribute: "bottomContent",
      type: "ReactNode",
      description: "Custom content to be included in the bottom of the calendar.",
      default: "-"
    },
    {
      attribute: "isDateUnavailable",
      type: "(date: DateValue) => boolean",
      description: "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
      default: "-"
    },
    {
      attribute: "createCalendar",
      type: "(calendar: SupportedCalendars) => Calendar | null",
      description: "This function helps to reduce the bundle size by providing a custom calendar system. You can also use the HeroUIProvider to provide the createCalendar function to all nested components.",
      default: "all calendars"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | (v: ValidationResult) => ReactNode",
      description: "An error message for the field.",
      default: "-"
    },
    {
      attribute: "hideDisabledDates",
      type: "boolean",
      description: "Whether to hide the disabled or invalid dates.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation of the calendar.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'prevButton' | 'nextButton' | 'headerWrapper' | 'header' | 'title' | 'content' | 'gridWrapper' | 'grid' | 'gridHeader' | 'gridHeaderRow' | 'gridHeaderCell' | 'gridBody' | 'gridBodyRow' | 'cell' | 'cellButton' | 'pickerWrapper' | 'pickerMonthList' | 'pickerYearList' | 'pickerHighlight' | 'pickerItem' | 'helperWrapper' | 'errorMessage', string>>",
      description: "Allows to set custom class names for the calendar slots.",
      default: "-"
    }
  ]}
/>

### Calendar Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(value: MappedDateValue) => void",
      description: "Handler that is called when the value changes.",
      default: "-"
    },
    {
      attribute: "onFocusChange",
      type: "(date: CalendarDate) => void",
      description: "Handler that is called when the focused date changes.",
      default: "-"
    },
    {
      attribute: "onHeaderExpandedChange",
      type: "(isExpanded: boolean) => void", 
      description: "The event handler for the calendar header expanded state. This is only available if the showMonthAndYearPickers prop is set to true.",
      default: "-"
    }
  ]}
/>

### Types

#### Supported Calendars

```ts
/**
 * Supported react-aria i18n calendars.
 */
export type SupportedCalendars =
  | "buddhist"
  | "ethiopic"
  | "ethioaa"
  | "coptic"
  | "hebrew"
  | "indian"
  | "islamic-civil"
  | "islamic-tbla"
  | "islamic-umalqura"
  | "japanese"
  | "persian"
  | "roc"
  | "gregory";
```


--- Содержимое из файла: calendar.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\calendar.mdx) ---

---
title: "Card"
description: "Card is a container for text, photos, and actions in the context of a single subject."
---

import {cardContent} from "@/content/components/card";

# Card

Card is a container for text, photos, and actions in the context of a single subject.

<ComponentLinks component="card" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add card",
    npm: "npm install @heroui/card",
    yarn: "yarn add @heroui/card",
    pnpm: "pnpm add @heroui/card",
    bun: "bun add @heroui/card"
  }}
/>


## Import

HeroUI exports 4 card-related components:

- **Card**: The main component to display a card.
- **CardHeader**: Commonly used for the title of a card.
- **CardBody**: The content of the card.
- **CardFooter**: Commonly used for actions.

<ImportTabs
  commands={{
    main: 'import {Card, CardHeader, CardBody, CardFooter} from "@heroui/react";',
    individual: 'import {Card, CardHeader, CardBody, CardFooter} from "@heroui/card";',
  }}
/>

## Usage

<CodeDemo isPreviewCentered title="Usage" files={cardContent.usage} />

### With Divider

<CodeDemo isPreviewCentered title="With Divider" files={cardContent.divider} />

> See the [Divider](/docs/components/divider) component for more details.

### With Image

<CodeDemo isPreviewCentered title="With Image" files={cardContent.image} />

### Blurred Footer

You can pass the `isFooterBlurred` prop to the card to blur the footer.

<CodeDemo isPreviewCentered title="Blurred Footer" files={cardContent.blurredFooter} />

### Composition

You can use other HeroUI components inside the card to compose a more complex card.

<CodeDemo isPreviewCentered title="Composition" files={cardContent.composition} />

### Blurred Card

You can pass the `isBlurred` prop to the card to blur the card. Card gets blurred properties based on its ancestor element.

> **Note**: To achieve the blur effect as seen in the preview, you need to provide a suitable background (e.g., `bg-gradient-to-tr from-[#FFB457] to-[#FF705B]`) to an ancestor element of the Card component allowing the Card's blur effect to be visible.

<CodeDemo isGradientBox title="Blurred Card" files={cardContent.blurred} />

### Primary Action

If you pass the `isPressable` prop to the card, it will be rendered as a button.

<CodeDemo title="Primary Action" files={cardContent.primaryAction} />

> **Note**: that the used callback function is `onPress` instead of `onClick`. Please see the [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html#usepress) component for more details.

### Cover Image

You can use `Image` component as the cover of the card by taking it out of the `CardBody` component.

<CodeDemo title="Cover Image" files={cardContent.coverImage} />

<Spacer y={4} />

## Slots

- **base**:
  The main container of the card, where the header, body, and footer are placed.
- **header**:
  The header of the card, usually used for the title.
- **body**:
  The body of the card, where the main content is placed.
- **footer**:
  The footer of the card, usually used for actions.

<Spacer y={4} />

## Data Attributes

`Card` has the following attributes on the `base` element:

- **data-hover**:
  When the card is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the card is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the card is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the card is disabled. Based on `isDisabled` prop.
- **data-pressed**:
  When the card is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)

<Spacer y={4} />

## API

### Card Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode | ReactNode[]",
      description: "Usually the Card parts, `CardHeader`, `CardBody` and `CardFooter`.",
      default: "-"
    },
    {
      attribute: "shadow",
      type: "none | sm | md | lg",
      description: "The card shadow.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg",
      description: "The card border radius.",
      default: "lg"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the card should take the full width of its parent.",
      default: "false"
    },
    {
      attribute: "isHoverable",
      type: "boolean",
      description: "Whether the card should change the background on hover.",
      default: "false"
    },
    {
      attribute: "isPressable",
      type: "boolean",
      description: "Whether the card should allow to be pressed.",
      default: "false"
    },
    {
      attribute: "isBlurred",
      type: "boolean",
      description: "Whether the card background should be blurred.",
      default: "false"
    },
    {
      attribute: "isFooterBlurred",
      type: "boolean",
      description: "Whether the card footer background should be blurred.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the card should be disabled. The press events will be ignored.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation.",
      default: "false"
    },
    {
      attribute: "disableRipple",
      type: "boolean",
      description: "Whether to disable ripple effect. Only when `isPressable` is true.",
      default: "false"
    },
    {
      attribute: "allowTextSelectionOnPress",
      type: "boolean",
      description: "Whether to allow text selection on pressing. Only when `isPressable` is true.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'header' | 'body' | 'footer', string>>",
      description: "Allows to set custom class names for the card slots.",
      default: "-"
    }
  ]}
/>

### Card Events

<APITable
  data={[
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler that is called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler that is called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler that is called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onPressChange",
      type: "(isPressed: boolean) => void",
      description: "Handler that is called when the press state changes.",
      default: "-"
    },
    {
      attribute: "onPressUp",
      type: "(e: PressEvent) => void",
      description: "Handler that is called when a press is released over the target, regardless of whether it started on the target or not.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: card.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\card.mdx) ---

---
title: "Checkbox Group"
description: "A CheckboxGroup allows users to select one or more items from a list of choices."
---

import {checkboxGroupContent} from "@/content/components/checkbox-group";

# Checkbox Group

A CheckboxGroup allows users to select one or more items from a list of choices.

<ComponentLinks component="checkbox" storybook="checkboxgroup" reactAriaHook="useCheckboxGroup" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add checkbox",
    npm: "npm install @heroui/checkbox",
    yarn: "yarn add @heroui/checkbox",
    pnpm: "pnpm add @heroui/checkbox",
    bun: "bun add @heroui/checkbox"
  }}
/>


## Import

HeroUI exports 2 checkbox-related components:

- **CheckboxGroup**: The root component, it wraps the label and the wrapper.
- **Checkbox**: The checkbox component.

<ImportTabs
  commands={{
    main: 'import {CheckboxGroup, Checkbox} from "@heroui/react";',
    individual: 'import {CheckboxGroup, Checkbox} from "@heroui/checkbox";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={checkboxGroupContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={checkboxGroupContent.disabled} />

### Horizontal

<CodeDemo title="Horizontal" files={checkboxGroupContent.horizontal} />

### Controlled

You can use the `value` and `onValueChange` properties to control the checkbox input value.

<CodeDemo title="Controlled" files={checkboxGroupContent.controlled} />

### Invalid

<CodeDemo title="Invalid" files={checkboxGroupContent.invalid} />

## Slots

- **base**: Checkbox group root wrapper, it wraps the label and the wrapper.
- **wrapper**: Checkbox group wrapper, it wraps all checkboxes.
- **label**: Checkbox group label, it is placed before the wrapper.
- **description**: The description of the checkbox group.
- **errorMessage**: The error message of the checkbox group.

### Custom Styles

You can customize the `CheckboxGroup` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={checkboxGroupContent.customStyles} />

### Custom Implementation

In case you need to customize the checkbox even further, you can use the `useCheckboxGroup` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={checkboxGroupContent.customImplementation} />

> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.

<Spacer y={4} />

## API

### Checkbox Group Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode[] | ReactNode[]",
      description: "The checkboxes items.",
      default: "-"
    },
    {
      attribute: "orientation",
      type: "vertical | horizontal",
      description: "The axis the checkbox group items should align with.",
      default: "vertical"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the checkboxes.",
      default: "primary"
    },
    {
      attribute: "size",
      type: "xs | sm | md | lg | xl",
      description: "The size of the checkboxes.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | base | xs | sm | md | lg | xl | full",
      description: "The radius of the checkboxes.",
      default: "md"
    },
    {
      attribute: "name",
      type: "string",
      description: "The name of the CheckboxGroup, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "label",
      type: "string",
      description: "The label of the CheckboxGroup.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string[]",
      description: "The current selected values. (controlled)",
      default: "-"
    },
    {
      attribute: "lineThrough",
      type: "boolean",
      description: "Whether the checkboxes label should be crossed out.",
      default: "false"
    },
    {
      attribute: "defaultValue",
      type: "string[]",
      description: "The default selected values. (uncontrolled)",
      default: "-"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the checkbox group is invalid.",
      default: "false"
    },
    {
      attribute: "validationState",
      type: "valid | invalid",
      description: "Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "The checkbox group description.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "The checkbox group error message.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: string[]) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if validationBehavior is set to native. For real-time validation, use the isInvalid prop.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the checkbox group is disabled.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user checkboxes are required on the input before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the checkboxes can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the animation should be disabled.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"label\", string>>",
      description: "Allows to set custom class names for the checkbox group slots.",
      default: "-"
    }
  ]}
/>

### Checkbox Group Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(value: string[]) => void",
      description: "Handler that is called when the value changes.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: checkbox-group.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\checkbox-group.mdx) ---

---
title: "Checkbox"
description: "Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected."
---

import {checkboxContent} from "@/content/components/checkbox";

# Checkbox

Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.

<ComponentLinks component="checkbox" reactAriaHook="useCheckbox" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add checkbox",
    npm: "npm install @heroui/checkbox",
    yarn: "yarn add @heroui/checkbox",
    pnpm: "pnpm add @heroui/checkbox",
    bun: "bun add @heroui/checkbox"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Checkbox} from "@heroui/react";',
    individual: 'import {Checkbox} from "@heroui/checkbox";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={checkboxContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={checkboxContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={checkboxContent.sizes} />

### Colors

<CodeDemo title="Colors" files={checkboxContent.colors} />

### Radius

<CodeDemo title="Radius" files={checkboxContent.radius} />

### Indeterminate

The `isIndeterminate` prop sets a `Checkbox` to an indeterminate state, overriding its appearance and maintaining it until set to `false`, regardless of user interaction.

<CodeDemo title="Indeterminate" files={checkboxContent.indeterminate} />

### Line Through

<CodeDemo title="Line Through" files={checkboxContent.lineThrough} />

### Custom Check Icon

> By default, `IconProps` will be passed to your icon component.  Please make sure that `isSelected`, `isIndeterminate`, and `disableAnimation` are not passed to a DOM element.

<CodeDemo title="Custom Check Icon" files={checkboxContent.customCheckIcon} />

### Controlled

<CodeDemo title="Controlled Checkbox" files={checkboxContent.controlled} />

> **Note**: HeroUI `Checkbox` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

## Slots

- **base**: Checkbox wrapper, it handles alignment, placement, and general appearance.
- **wrapper**: An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.
- **hiddenInput**: The hidden input element that is used to handle the checkbox state.
- **icon**: Icon within the checkbox, controlling size, visibility, and changes when checked.
- **label**: The text associated with the checkbox.

### Custom Styles

You can customize the `Checkbox` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={checkboxContent.customStyles} />

### Custom Implementation

In case you need to customize the checkbox even further, you can use the `useCheckbox` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={checkboxContent.customImplementation} />

> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.

<Spacer y={4} />

## Data Attributes

`Checkbox` has the following attributes on the `base` element:

- **data-selected**:
  When the checkbox is checked. Based on `isSelected` prop.
- **data-pressed**:
  When the checkbox is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-invalid**:
  When the checkbox is invalid. Based on `validationState` prop.
- **data-readonly**:
  When the checkbox is readonly. Based on `isReadOnly` prop.
- **data-indeterminate**:
  When the checkbox is indeterminate. Based on `isIndeterminate` prop.
- **data-hover**:
  When the checkbox is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the checkbox is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the checkbox is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the checkbox is disabled. Based on `isDisabled` prop.
- **data-loading**:
  When the checkbox is loading. Based on `isLoading` prop.

<Spacer y={4} />

## Accessibility

- Built with a native HTML `<input>` element.
- Full support for browser features like form autofill.
- Keyboard focus management and cross browser normalization.
- Keyboard event support for <Kbd>Tab</Kbd> and <Kbd>Space</Kbd> keys.
- Labeling support for assistive technology.
- Indeterminate state support.

<Spacer y={4} />

## API

### Checkbox Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The label of the checkbox.",
      default: "-"
    },
    {
      attribute: "icon",
      type: "CheckboxIconProps",
      description: "The icon to be displayed when the checkbox is checked.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string",
      description: "The value of the checkbox element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "name",
      type: "string",
      description: "The name of the checkbox element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the checkbox.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the checkbox.",
      default: "primary"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the checkbox.",
      default: "-"
    },
    {
      attribute: "lineThrough",
      type: "boolean",
      description: "Whether the label should be crossed out.",
      default: "false"
    },
    {
      attribute: "isSelected",
      type: "boolean",
      description: "Whether the element should be selected (controlled).",
      default: "-"
    },
    {
      attribute: "defaultSelected",
      type: "boolean",
      description: "Whether the element should be selected (uncontrolled).",
      default: "-"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user checkbox is required on the checkbox before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the checkbox can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the checkbox is disabled.",
      default: "false"
    },
    {
      attribute: "isIndeterminate",
      type: "boolean",
      description: "Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.",
      default: "-"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the checkbox is invalid.",
      default: "false"
    },
    {
      attribute: "validationState",
      type: "valid | invalid",
      description: "Whether the checkbox should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the animation should be disabled.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\"｜ \"wrapper\"｜ \"icon\"｜ \"label\", string>>",
      description: "Allows to set custom class names for the checkbox slots.",
      default: "-"
    }
  ]}
/>

### Checkbox Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing event.target.checked (boolean).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "(isSelected: boolean) => void",
      description: "Handler that is called when the element's selection state changes.",
      default: "-"
    }
  ]}
/>

### Types

#### Checkbox Icon Props

```ts
type IconProps = {
  "data-checked": string;
  isSelected: boolean;
  isIndeterminate: boolean;
  disableAnimation: boolean;
  className: string;
};

type CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);
```


--- Содержимое из файла: checkbox.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\checkbox.mdx) ---

---
title: "Chip"
description: "A Chip is a small block of essential information that represent an input, attribute, or action."
---

import {chipContent} from "@/content/components/chip";

# Chip

A Chip is a small block of essential information that represent an input, attribute, or action.

<ComponentLinks component="chip" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add chip",
    npm: "npm install @heroui/chip",
    yarn: "yarn add @heroui/chip",
    pnpm: "pnpm add @heroui/chip",
    bun: "bun add @heroui/chip"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Chip} from "@heroui/react";',
    individual: 'import {Chip} from "@heroui/chip";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={chipContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={chipContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={chipContent.sizes} />

### Colors

<CodeDemo title="Colors" files={chipContent.colors} />

### Radius

<CodeDemo title="Radius" files={chipContent.radius} />

### Variants

<CodeDemo title="Variants" files={chipContent.variants} />

### Start & End Content

<CodeDemo title="Start & End Content" files={chipContent.startEndContent} />

### With Close Button

If you pass the `onClose` prop, the close button will be visible. You can override the close icon by passing the `endContent` prop.

<CodeDemo title="With Close Button" files={chipContent.closeButton} />

### With Avatar

<CodeDemo title="With Avatar" files={chipContent.avatar} />

### List of Chips

<CodeDemo title="List of Chips" files={chipContent.list} />

## Slots

- **base**: The base slot of the chip, it is the container of the chip.
- **content**: The content slot of the chip, it is the container of the chip children.
- **dot**: Small dot on the left side of the chip. It is visible when the `variant=dot` prop is passed.
- **avatar**: Avatar classes of the chip. It is visible when the `avatar` prop is passed.
- **closeButton**: Close button classes of the chip. It is visible when the `onClose` prop is passed.

### Custom Styles

You can customize the `Chip` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={chipContent.customStyles} />

<Spacer y={4} />

## API

### Chip Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the chip.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | bordered | light | flat | faded | shadow | dot",
      description: "The chip appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the chip.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the chip.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the chip.",
      default: "full"
    },
    {
      attribute: "avatar",
      type: "ReactNode",
      description: "Avatar to be rendered in the left side of the chip.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the chip. This prop overrides the avatar prop.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the chip. This prop overrides the default close button when onClose is passed.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the chip is disabled.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: 'Partial<Record<"base" | "content" | "dot" | "avatar" | "closeButton", string>>',
      description: "Allows to set custom class names for the chip slots.",
      default: "-"
    }
  ]}
/>

### Chip Events

<APITable
  data={[
    {
      attribute: "onClose",
      type: "(e: PressEvent) => void",
      description: "Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent).",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: chip.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\chip.mdx) ---

---
title: "Circular Progress"
description: "Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process."
---

import {circularProgressContent} from "@/content/components/circular-progress";

# Circular Progress

Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.

<ComponentLinks component="progress" styles="circular-progress" storybook="circularprogress" reactAriaHook="useProgressBar" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add progress",
    npm: "npm install @heroui/progress",
    yarn: "yarn add @heroui/progress",
    pnpm: "pnpm add @heroui/progress",
    bun: "bun add @heroui/progress"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {CircularProgress} from "@heroui/react";',
    individual: 'import {CircularProgress} from "@heroui/progress";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={circularProgressContent.usage} />

> **Note**: Make sure to pass the `aria-label` prop when the `label` prop is not provided. This is required for accessibility.

### Sizes

<CodeDemo title="Sizes" files={circularProgressContent.sizes} />

### Colors

<CodeDemo title="Colors" files={circularProgressContent.colors} />

### With Label

<CodeDemo title="With Label" files={circularProgressContent.label} />

### With Value

<CodeDemo title="With Value" files={circularProgressContent.value} />

### Value Formatting

Values are formatted as a percentage by default, but this can be modified by using the
`formatOptions` prop to specify a different format. `formatOptions` is compatible with the
option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.

<CodeDemo
  title="Value Formatting"
  files={circularProgressContent.valueFormatting}
  highlightedLines="10"
/>

## Slots

- **base**: The base slot of the circular progress, it is the main container.
- **svgWrapper**: The wrapper of the svg circles and the value label.
- **svg**: The svg element of the circles.
- **track**: The track is the background circle of the circular progress.
- **indicator**: The indicator is the one that is filled according to the `value`.
- **value**: The value content.
- **label**: The label content.

### Custom Styles

You can customize the `CircularProgress` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo
  title="Custom Styles"
  files={circularProgressContent.customStyles}
  highlightedLines="9-12"
/>

<Spacer y={4} />

## Data Attributes

`CircularProgress` has the following attributes on the `base` element:

- **data-indeterminate**:
  Indicates whether the progress is indeterminate.
- **data-disabled**:
  Indicates whether the progress is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a progress bar via ARIA.
- Labeling support for accessibility.
- Internationalized number formatting as a percentage or value.
- Determinate and indeterminate progress support.
- Exposes the `aria-valuenow`, `aria-valuemin`, `aria-valuemax` and `aria-valuetext` attributes.

<Spacer y={4} />

## API

### Circular Progress Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the indicator.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the indicator.",
      default: "primary"
    },
    {
      attribute: "value",
      type: "number",
      description: "The current value (controlled).",
      default: "-"
    },
    {
      attribute: "valueLabel",
      type: "ReactNode",
      description: "The content to display as the value's label (e.g. 1 of 4).",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "number",
      description: "The smallest value allowed for the input.",
      default: "0"
    },
    {
      attribute: "maxValue",
      type: "number",
      description: "The largest value allowed for the input.",
      default: "100"
    },
    {
      attribute: "formatOptions",
      type: "Intl.NumberFormat",
      description: "The options to format the value.",
      default: "{style: 'percent'}"
    },
    {
      attribute: "isIndeterminate",
      type: "boolean",
      description: "Whether the progress is indeterminate.",
      default: "true"
    },
    {
      attribute: "showValueLabel",
      type: "boolean",
      description: "Whether to show the value label.",
      default: "true"
    },
    {
      attribute: "strokeWidth",
      type: "number",
      description: "The width of the progress stroke.",
      default: "2"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the progress is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base'｜'svgWrapper'｜'svg'｜'track'｜'indicator'｜'value'｜'label', string>>",
      description: "Allows to set custom class names for the circular progress slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: circular-progress.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\circular-progress.mdx) ---

---
title: "Code"
description: "Code is a component used to display inline code. "
---

import {codeContent} from "@/content/components/code";

# Code

Code is a component used to display inline code.

<ComponentLinks component="code" rscCompatible />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add code",
    npm: "npm install @heroui/code",
    yarn: "yarn add @heroui/code",
    pnpm: "pnpm add @heroui/code",
    bun: "bun add @heroui/code"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Code} from "@heroui/react";',
    individual: 'import {Code} from "@heroui/code";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={codeContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={codeContent.sizes} />

### Colors

<CodeDemo title="Colors" files={codeContent.colors} />

<Spacer y={4} />

## API

### Code Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the code.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the code.",
      default: "sm"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the code.",
      default: "default"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the code.",
      default: "sm"
    }
  ]}
/>


--- Содержимое из файла: code.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\code.mdx) ---

---
title: "DateInput"
description: "DateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment."
---

import {dateInputContent} from "@/content/components/date-input";

# DateInput

DateInput is a component that allows users to enter and edit date and time values using a keyboard.
Each part of a date value is displayed in an individually editable segment.

<ComponentLinks component="date-input" storybook="dateinput" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add date-input",
    npm: "npm install @heroui/date-input",
    yarn: "yarn add @heroui/date-input",
    pnpm: "pnpm add @heroui/date-input",
    bun: "bun add @heroui/date-input",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {DateInput} from "@heroui/react";',
    individual: 'import {DateInput} from "@heroui/date-input";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={dateInputContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={dateInputContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={dateInputContent.readOnly} />

### Required

<CodeDemo title="Required" files={dateInputContent.required} />

### Variants

<CodeDemo title="Variants" files={dateInputContent.variants} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={dateInputContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Start & End Content

You can use the `startContent` and `endContent` properties to add content to the start and end of the `DateInput`.

<CodeDemo title="Start and End Content" files={dateInputContent.startEndContent} />

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={dateInputContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={dateInputContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).

<CodeDemo title="With Error Message Function" files={dateInputContent.errorMessageFunction} />

### Controlled

You can use the `value` and `onChange` properties to control the input value.

<CodeDemo title="Controlled" files={dateInputContent.controlled} />

### Time Zones

DateInput is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,
and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateInputContent.timeZones} />

### Granularity

The granularity prop allows you to control the smallest unit that is displayed by DateInput By default,
the value is displayed with "day" granularity (year, month, and day),
and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateInputContent.granularity} />

### Min Date And Max Date

The minValue and maxValue props can also be used to ensure the value is within a specific range.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
```

<CodeDemo title="Min Date And Max Date" files={dateInputContent.minAndMaxDate} />

### International Calendar

DateInput supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.
Dates are automatically displayed in the appropriate calendar system for the user's locale.
The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),
passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="International Calendar" files={dateInputContent.internationalCalendar} />

### Hide Time Zone

When a `ZonedDateTime` object is provided as the value to DateInput, the time zone abbreviation is displayed by default.
However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the hideTimeZone option.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<CodeDemo title="Hide Time Zone" files={dateInputContent.hideTimeZone} />

### Hourly Cycle

By default, DateInput displays times in either 12 or 24 hour hour format depending on the user's locale.
However, this can be overridden using the `hourCycle` prop if needed for a specific usecase.
This example forces DateInput to use 24-hour time, regardless of the locale.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<CodeDemo title="Hide Time Zone" files={dateInputContent.hourlyCycle} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the date-input, it is the one that is displayed above, inside or left of the date-input.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The date-input element.
- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.
- **clearButton**: The clear button, it is at the end of the input.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the date-input.
- **errorMessage**: The error message of the date-input.

<Spacer y={4} />

## Data Attributes

`DateInput` has the following attributes on the `base` element:

- **data-slot**:
  All slots have this prop. which slot the element represents(e.g. `slot`).
- **data-invalid**:
  When the date-input is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the date-input is required. Based on `isRequired` prop.
- **data-readonly**:
  When the date-input is readonly. Based on `isReadOnly` prop.
- **data-disabled**:
  When the date-input is disabled. Based on `isDisabled` prop.
- **data-has-helper**:
  When the date-input has helper text(`errorMessage` or `description`). Base on those two props.
- **data-has-start-content**:
  When the date-input has a start content. Base on those `startContent` prop.
- **data-has-end-content**:
  When the date-input has a end content. Base on those `endContent` prop.

<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input via ARIA.
- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.
- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.

<Spacer y={4} />

## API

### DateInput Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "value",
      type: "DateValue",
      description: "The current value of the date input (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "DateValue",
      description: "The default value of the date input (uncontrolled).",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the date input.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the date input.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the date input.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the date input.",
      default: "-"
    },
    {
      attribute: "placeholderValue",
      type: "DateValue",
      description: "A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "DateValue",
      description: "The minimum allowed date that a user may select.",
      default: "-"
    },
    {
      attribute: "maxValue",
      type: "DateValue",
      description: "The maximum allowed date that a user may select.",
      default: "-"
    },
    {
      attribute: "locale",
      type: "string",
      description: "The locale to display and edit the value according to.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the date input. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | (v: ValidationResult) => ReactNode",
      description: "An error message for the date input.",
      default: "-"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user input is required on the input before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the input can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the input is disabled.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the input value is invalid.",
      default: "false"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the element should receive focus on render.",
      default: "false"
    },
    {
      attribute: "hideTimeZone",
      type: "boolean",
      description: "Whether to hide the time zone abbreviation.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable animations.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"label\" | \"inputWrapper\" | \"input\" | \"segment\" | \"helperWrapper\" | \"description\" | \"errorMessage\", string>>",
      description: "Allows to set custom class names for the date-input slots.",
      default: "-"
    }
  ]}
/>

### DateInput Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void",
      description: "Handler that is called when the date-input's value changes.",
      default: "-"
    },
    {
      attribute: "onFocus",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the element receives focus.",
      default: "-"
    },
    {
      attribute: "onBlur",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the element loses focus.",
      default: "-"
    },
    {
      attribute: "onFocusChange",
      type: "(isFocused: boolean) => void",
      description: "Handler that is called when the element's focus status changes.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is released.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: date-input.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\date-input.mdx) ---

---
title: "DatePicker"
description: "DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value."
---

import {datePickerContent} from "@/content/components/date-picker";

# DatePicker

DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.

<ComponentLinks component="date-picker" storybook="datepicker" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add date-picker",
    npm: "npm install @heroui/date-picker",
    yarn: "yarn add @heroui/date-picker",
    pnpm: "pnpm add @heroui/date-picker",
    bun: "bun add @heroui/date-picker",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {DatePicker} from "@heroui/react";',
    individual: 'import {DatePicker} from "@heroui/date-picker";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={datePickerContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={datePickerContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={datePickerContent.readOnly} />

### Required

<CodeDemo title="Required" files={datePickerContent.required} />

### Variants

<CodeDemo title="Variants" files={datePickerContent.variants} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={datePickerContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### With Description

You can add a description to the date-picker by passing the `description` property.

<CodeDemo title="With Description" files={datePickerContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={datePickerContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).

<CodeDemo title="With Error Message Function" files={datePickerContent.errorMessageFunction} />

### With Month and Year Pickers

You can show month and year pickers in the calendar popover by setting the `showMonthAndYearPickers` property to `true`. However, passing a number greater than 1 to the `visibleMonths` prop will disable this feature.

<CodeDemo title="With Month and Year Pickers" files={datePickerContent.withMonthAndYearPickers} />

### With Time Fields

<CodeDemo title="With Time Fields" files={datePickerContent.withTimeField} />

### Selector Icon

You can use the `selector` to add content to the start and end of the date-picker.

<CodeDemo title="Selector Icon" files={datePickerContent.selectorIcon} />

### Selector Button Placement

You can change the position of the selector button by setting the `selectorButtonPlacement` property to `start` or `end`.

<CodeDemo title="Selector Button Placement" files={datePickerContent.selectorButtonPlacement} />

### Controlled

You can use the `value` and `onChange` properties to control the input value.

<CodeDemo title="Controlled" files={datePickerContent.controlled} />

### Time Zones

DatePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,
and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={datePickerContent.timeZones} />

### Granularity

The granularity prop allows you to control the smallest unit that is displayed by DatePicker By default,
the value is displayed with "day" granularity (year, month, and day),
and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={datePickerContent.granularity} />

### Min Date And Max Date

The minValue and maxValue props can also be used to ensure the value is within a specific range.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
```

<CodeDemo title="Min Date And Max Date" files={datePickerContent.minAndMaxDate} />

### International Calendar

DatePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.
Dates are automatically displayed in the appropriate calendar system for the user's locale.
The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),
passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="International Calendar" files={datePickerContent.internationalCalendar} />

### Unavailable Dates

DatePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";
```

<CodeDemo title="Unavailable Dates" files={datePickerContent.unavailableDates} />

### Visible Months

By default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.

<CodeDemo title="Visible Months" files={datePickerContent.visibleMonth} />

### Custom first day of week

By default, the first day of the week is automatically set based on the current locale. This can be changed by setting the `firstDayOfWeek` prop to `'sun'`, `'mon'`, `'tue'`, `'wed'`, `'thu'`, `'fri'`, or `'sat'`.

<CodeDemo title="Custom first day of week" files={datePickerContent.firstDayOfWeek} />

### Page Behavior

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behavior" files={datePickerContent.pageBehavior} />

### Preset

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {
  DateValue,
  now,
  useLocale,
  startOfWeek,
  startOfMonth,
  useDateFormatter,
  getLocalTimeZone,
} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="Preset" files={datePickerContent.preset} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **selectorButton**: Selector button element.
- **selectorIcon**: Selector icon element.
- **popoverContent**: The calendar popover element.
- **calendar**: The calendar element.
- **calendarContent**: The calendar's content element.
- **timeInputLabel**: The time-input component's label element.
- **timeInput**: The time-input component element.

<Spacer y={4} />

## Data Attributes

`DatePicker` has the following attributes on the `base` element:

- **data-slot**:
  All slots have this prop. which slot the element represents(e.g. `calendar`).
- **data-open**:
  Indicates if the calendar popover is open.
- **data-invalid**:
  When the date-picker is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the date-picker is required. Based on `isRequired` prop.
- **data-readonly**:
  When the date-picker is readonly. Based on `isReadOnly` prop.
- **data-disabled**:
  When the date-picker is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.
- Users can also open a calendar popover to select dates in a standard month grid.
- Localized screen reader messages are included to announce when the selection and visible date range change.
- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.
- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors

<Spacer y={4} />

## API

### DatePicker Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "value",
      type: "ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null",
      description: "The current value of the date-picker (controlled).",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the date input.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the date input.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the date input.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the date input.",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string",
      description: "The default value of the date-picker (uncontrolled).",
      default: "-"
    },
    {
      attribute: "placeholderValue",
      type: "ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null",
      description: "The placeholder of the date-picker.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the date-picker. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | (v: ValidationResult) => ReactNode",
      description: "An error message for the date input.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the date-picker.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the date-picker.",
      default: "-"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user input is required on the date-picker before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the date-picker can be selected but not changed by the user.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the date-picker is disabled.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the date-picker is invalid.",
      default: "false"
    },
    {
      attribute: "visibleMonths",
      type: "number",
      description: "The number of months to display at once. Up to 3 months are supported.",
      default: "1"
    },
    {
      attribute: "firstDayOfWeek",
      type: "sun | mon | tue | wed | thu | fri | sat",
      description: "The day that starts the week.",
      default: "-"
    },
    {
      attribute: "selectorIcon",
      type: "ReactNode",
      description: "The icon to toggle the date picker popover. Usually a calendar icon.",
      default: "-"
    },
    {
      attribute: "pageBehavior",
      type: "PageBehavior",
      description: "Controls the behavior of paging.",
      default: "visible"
    },
    {
      attribute: "calendarWidth",
      type: "number",
      description: "The width to be applied to the calendar component.",
      default: "256"
    },
    {
      attribute: "isDateUnavailable",
      type: "(date: DateValue) => boolean",
      description: "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the element should receive focus on render.",
      default: "false"
    },
    {
      attribute: "hourCycle",
      type: "12 | 24",
      description: "Whether to display the time in 12 or 24 hour format.",
      default: "-"
    },
    {
      attribute: "granularity",
      type: "day | hour | minute | second",
      description: "Determines the smallest unit that is displayed in the date picker.",
      default: "-"
    },
    {
      attribute: "hideTimeZone",
      type: "boolean",
      description: "Whether to hide the time zone abbreviation.",
      default: "false"
    },
    {
      attribute: "shouldForceLeadingZeros",
      type: "boolean",
      description: "Whether to always show leading zeros in the month, day, and hour fields.",
      default: "true"
    },
    {
      attribute: "CalendarBottomContent",
      type: "ReactNode",
      description: "Bottom content to be rendered in the calendar component.",
      default: "-"
    },
    {
      attribute: "showMonthAndYearPickers",
      type: "boolean | undefined",
      description: "Whether the calendar should show month and year pickers.",
      default: "false"
    },
    {
      attribute: "popoverProps",
      type: "PopoverProps | undefined",
      description: "Props to be passed to the popover component.",
      default: `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`
    },
    {
      attribute: "selectorButtonProps",
      type: "ButtonProps | undefined",
      description: "Props to be passed to the selector button component.",
      default: `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }`
    },
    {
      attribute: "calendarProps",
      type: "CalendarProps | undefined",
      description: "Props to be passed to the calendar component.",
      default: `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }`
    },
    {
      attribute: "timeInputProps",
      type: "TimeInputProps | undefined",
      description: "Props to be passed to the time input component.",
      default: `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }`
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: `Partial<Record<"base" | "selectorButton" | "selectorIcon" | "popoverContent" | "calendar" | "calendarContent" | "timeInputLabel" | "timeInput", string>>`,
      description: "Allows to set custom class names for the date-picker slots. You can also pass Date Input classNames here.",
      default: "-"
    },
  ]}
/>

### DatePicker Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void",
      description: "Handler that is called when the date-picker's value changes.",
      default: "-"
    },
    {
      attribute: "onFocus",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the element receives focus.",
      default: "-"
    },
    {
      attribute: "onBlur",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the element loses focus.",
      default: "-"
    },
    {
      attribute: "onFocusChange",
      type: "(isFocused: boolean) => void",
      description: "Handler that is called when the element's focus status changes.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is released.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: date-picker.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\date-picker.mdx) ---

---
title: "Date Range Picker"
description: "DateRangePicker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range."
---

import {dateRangePickerContent} from "@/content/components/date-range-picker";

# Date Range Picker

Date Range Picker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.

<ComponentLinks component="date-picker" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add date-picker",
    npm: "npm install @heroui/date-picker",
    yarn: "yarn add @heroui/date-picker",
    pnpm: "pnpm add @heroui/date-picker",
    bun: "bun add @heroui/date-picker",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {DateRangePicker} from "@heroui/react";',
    individual: 'import {DateRangePicker} from "@heroui/date-picker";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={dateRangePickerContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={dateRangePickerContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={dateRangePickerContent.readOnly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the input will be required.

<CodeDemo title="Required" files={dateRangePickerContent.required} />

### Variants

<CodeDemo title="Variants" files={dateRangePickerContent.variants} />

### Visible Months

By default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.

<CodeDemo title="Visible Months" files={dateRangePickerContent.visibleMonth} />

### Custom first day of week

By default, the first day of the week is automatically set based on the current locale. This can be changed by setting the `firstDayOfWeek` prop to `'sun'`, `'mon'`, `'tue'`, `'wed'`, `'thu'`, `'fri'`, or `'sat'`.

<CodeDemo title="Custom first day of week" files={dateRangePickerContent.firstDayOfWeek} />

### Page Behavior

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behavior" files={dateRangePickerContent.pageBehavior} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={dateRangePickerContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={dateRangePickerContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={dateRangePickerContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).

<CodeDemo title="With Error Message Function" files={dateRangePickerContent.errorMessageFunction} />

### With Month and Year Pickers

You can show month and year pickers in the calendar popover by setting the `showMonthAndYearPickers` property to `true`. However, passing a number greater than 1 to the `visibleMonths` prop will disable this feature.

<CodeDemo title="With Month and Year Pickers" files={dateRangePickerContent.withMonthAndYearPickers} />

### With Time Fields

DateRangePicker automatically includes time fields when a `CalendarDateTime` or `ZonedDateTime` object is provided as the value.

<CodeDemo title="With Time Fields" files={dateRangePickerContent.withTimeField} />

### Selector Icon

You can use the `selector` to add content to the start and end of the date-range-picker.

<CodeDemo title="Selector Icon" files={dateRangePickerContent.selectorIcon} />

### Selector Button Placement

You can change the position of the selector button by setting the `selectorButtonPlacement` property to `start` or `end`.

<CodeDemo title="Selector Button Placement" files={dateRangePickerContent.selectorButtonPlacement} />

### Controlled

You can use the `value` and `onChange` properties to control the input value.

<CodeDemo title="Controlled" files={dateRangePickerContent.controlled} />

### Time Zones

DateRangePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,
and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateRangePickerContent.timeZones} />

### Granularity

The granularity prop allows you to control the smallest unit that is displayed by DateRangePicker By default,
the value is displayed with "day" granularity (year, month, and day),
and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateRangePickerContent.granularity} />

### Min Date And Max Date

The minValue and maxValue props can also be used to ensure the value is within a specific range.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0",
    yarn: "yarn add @internationalized/date@3.7.0",
    pnpm: "pnpm add @internationalized/date@3.7.0",
  }}
/>

```jsx
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
```

<CodeDemo title="Min Date And Max Date" files={dateRangePickerContent.minAndMaxDate} />

### International Calendar

DateRangePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.
Dates are automatically displayed in the appropriate calendar system for the user's locale.
The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),
passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="International Calendar" files={dateRangePickerContent.internationalCalendar} />

### Unavailable Dates

DateRangePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";
```

<CodeDemo title="Unavailable Dates" files={dateRangePickerContent.unavailableDates} />

### Non Contiguous

The allowsNonContiguousRanges prop enables a range to be selected even if there are unavailable dates in the middle.
The value emitted in the onChange event will still be a single range with a start and end property,
but unavailable dates will not be displayed as selected.
It is up to applications to split the full selected range into multiple as needed for business logic.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";
```

<CodeDemo title="Non Contiguous" files={dateRangePickerContent.nonContigous} />

### Presets

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    yarn: "yarn add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
    pnpm: "pnpm add @internationalized/date@3.7.0 @react-aria/i18n@3.12.5",
  }}
/>

```jsx
import {
  DateValue,
  now,
  startOfWeek,
  startOfMonth,
  getLocalTimeZone,
} from "@internationalized/date";
import {useLocale, useDateFormatter} from "@react-aria/i18n";
```

<CodeDemo title="Presets" files={dateRangePickerContent.presets} />

## Slots

- **base**: base element. it handles alignment, placement, and general appearance.
- **label**: Label of the date-range-picker, it is the one that is displayed above, inside or left of the date-input.
- **calendar**: The calendar element.
- **selectorButton**: Selector button element.
- **selectorIcon**: Selector icon element.
- **popoverContent**: The calendar popover element.
- **calendarContent**: The calendar's content element.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The input element.
- **segment**: The segment element.
- **separator**: The separator element.
- **bottomContent**: The bottom content element.
- **timeInputWrapper**: The wrapper element for the input element.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the date-input.
- **errorMessage**: The error message of the date-input.

### Custom Styles

You can customize the `DateRangePicker` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={dateRangePickerContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`DateRangePicker` has the following attributes on the `base` element:

- **data-slot**:
  All slots have this prop. which slot the element represents(e.g. `canlendar`).
- **data-open**:
  Indicates if the calendar popover is open.
- **data-invalid**:
  When the date-range-picker is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the date-range-picker is required. Based on `isRequired` prop.
- **data-readonly**:
  When the date-range-picker is readonly. Based on `isReadOnly` prop.
- **data-disabled**:
  When the date-range-picker is disabled. Based on `isDisabled` prop.
- **data-has-start-content**:
  When the date-range-picker has a start content. Base on those `startContent` prop.
- **data-has-end-content**:
  When the date-range-picker has a end content. Base on those `endContent` prop.
- **data-has-multiple-months**:
  When the date-range-picker's `visibleMonth` is more than 2.

<Spacer y={4} />

## Accessibility

- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale
- Users can also open a calendar popover to select date ranges in a standard month grid. Localized screen reader messages are included to announce when the selection and visible date range change.
- Date segments are editable using an easy to use numeric keypad, date ranges can be selected by dragging over dates in the calendar using a touch screen, and all interactions are accessible using touch-based screen readers.
- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors

<Spacer y={4} />

## API

### DateRangePicker Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "value",
      type: "RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null",
      description: "The current value of the date-range-picker (controlled).",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the date input.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the date input.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the date input.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the date input.",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null",
      description: "The minimum value of the date-range-picker.",
      default: "-"
    },
    {
      attribute: "maxValue",
      type: "RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null",
      description: "The maximum value of the date-range-picker.",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string",
      description: "The default value of the date-range-picker (uncontrolled).",
      default: "-"
    },
    {
      attribute: "placeholderValue",
      type: "ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null",
      description: "The placeholder of the date-range-picker.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | (v: ValidationResult) => ReactNode",
      description: "An error message for the date input.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the date-range-picker.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the date-range-picker.",
      default: "-"
    },
    {
      attribute: "startName",
      type: "string",
      description: "The name of the start date input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "endName",
      type: "string",
      description: "The name of the end date input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "isOpen",
      type: "boolean",
      description: "Whether the date picker popover is open.",
      default: "-"
    },
    {
      attribute: "defaultOpen",
      type: "boolean",
      description: "Whether the date picker popover is open by default.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user input is required on the date-range-picker before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the date-range-picker can be selected but not changed by the user.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the date-range-picker is disabled.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the date-range-picker is invalid.",
      default: "false"
    },
    {
      attribute: "selectorIcon",
      type: "ReactNode",
      description: "The icon to toggle the date picker popover. Usually a calendar icon.",
      default: "-"
    },
    {
      attribute: "pageBehavior",
      type: "single | visible",
      description: "Controls the behavior of paging.",
      default: "visible"
    },
    {
      attribute: "visibleMonths",
      type: "number",
      description: "The number of months to display at once. Up to 3 months are supported.",
      default: "1"
    },
    {
      attribute: "firstDayOfWeek",
      type: "sun | mon | tue | wed | thu | fri | sat",
      description: "The day that starts the week.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the element should receive focus on render.",
      default: "false"
    },
    {
      attribute: "hourCycle",
      type: "12 | 24",
      description: "Whether to display the time in 12 or 24 hour format.",
      default: "-"
    },
    {
      attribute: "granularity",
      type: "day | hour | minute | second",
      description: "Determines the smallest unit that is displayed in the date picker.",
      default: "-"
    },
    {
      attribute: "hideTimeZone",
      type: "boolean",
      description: "Whether to hide the time zone abbreviation.",
      default: "false"
    },
    {
      attribute: "allowsNonContiguousRanges",
      type: "boolean",
      description: "When combined with isDateUnavailable, determines whether non-contiguous ranges may be selected.",
      default: "false"
    },
    {
      attribute: "shouldForceLeadingZeros",
      type: "boolean",
      description: "Whether to always show leading zeros in the month, day, and hour fields.",
      default: "true"
    },
    {
      attribute: "calendarWidth",
      type: "number",
      description: "The width to be applied to the calendar component.",
      default: "256"
    },
    {
      attribute: "CalendarTopContent",
      type: "ReactNode",
      description: "Top content to be rendered in the calendar component.",
      default: "-"
    },
    {
      attribute: "CalendarBottomContent",
      type: "ReactNode",
      description: "Bottom content to be rendered in the calendar component.",
      default: "-"
    },
    {
      attribute: "showMonthAndYearPickers",
      type: "boolean",
      description: "Whether the calendar should show month and year pickers.",
      default: "false"
    },
    {
      attribute: "popoverProps",
      type: "PopoverProps",
      description: "Props to be passed to the popover component.",
      default: "{ placement: \"bottom\", triggerScaleOnOpen: false, offset: 13 }"
    },
    {
      attribute: "selectorButtonProps",
      type: "ButtonProps",
      description: "Props to be passed to the selector button component.",
      default: "{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }"
    },
    {
      attribute: "selectorButtonPlacement",
      type: "start | end",
      description: "The position of the selector button.",
      default: "end"
    },
    {
      attribute: "calendarProps",
      type: "CalendarProps",
      description: "Props to be passed to the calendar component.",
      default: "-"
    },
    {
      attribute: "timeInputProps",
      type: "TimeInputProps",
      description: "Props to be passed to the time input component.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable all animations in the date picker.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"label\" | \"calendar\" | \"selectorButton\" | \"selectorIcon\" | \"popoverContent\" | \"calendarContent\" | \"inputWrapper\" | \"input\" | \"segment\" | \"separator\" | \"bottomContent\" | \"timeInputWrapper\" | \"timeInputLabel\" | \"timeInput\" | \"helperWrapper\" | \"description\" | \"errorMessage\", string>>",
      description: "Allows to set custom class names for the date-range-picker slots. You can also pass Date Input classNames here.",
      default: "-"
    }
  ]}
/>

### DateRangePicker Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(value: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>) => void",
      description: "Handler that is called when the date-range-picker's value changes.",
      default: "-"
    },
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the date picker popover is opened or closed.",
      default: "-"
    },
    {
      attribute: "onFocus",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the element receives focus.",
      default: "-"
    },
    {
      attribute: "onBlur",
      type: "(e: FocusEvent<HTMLInputElement>) => void",
      description: "Handler that is called when the element loses focus.",
      default: "-"
    },
    {
      attribute: "onFocusChange",
      type: "(isFocused: boolean) => void",
      description: "Handler that is called when the element's focus status changes.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is released.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: date-range-picker.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\date-range-picker.mdx) ---

---
title: "Divider"
description: "Divider is a component that separates content in a page."
---

import {dividerContent} from "@/content/components/divider";

# Divider

Divider is a component that separates content in a page.

<ComponentLinks component="divider" reactAriaHook="useSeparator" rscCompatible />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add divider",
    npm: "npm install @heroui/divider",
    yarn: "yarn add @heroui/divider",
    pnpm: "pnpm add @heroui/divider",
    bun: "bun add @heroui/divider"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Divider} from "@heroui/react";',
    individual: 'import {Divider} from "@heroui/divider";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={dividerContent.usage} />

<Spacer y={4}/>  

## Data Attributes

`Divider` has the following attributes on the `base` element:

- **data-orientation**:
  The orientation of the divider. Based on `orientation` prop.

<Spacer y={4}/>  

## Accessibility

- Separator role is added to the divider.
- Support for horizontal and vertical orientation.
- Support for HTML `<hr>` element or a custom element type.

<Spacer y={4}/>  

## API

### Divider Props

<APITable
  data={[
    {
      attribute: "orientation",
      type: "`horizontal` | `vertical`",
      description: "The orientation of the divider.",
      default: "`horizontal`"
    }
  ]}
/>


--- Содержимое из файла: divider.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\divider.mdx) ---

---
title: "Drawer"
description: "Display a panel that slides in from the edge of the screen, containing supplementary content."
---

import {drawerContent} from "@/content/components/drawer";

# Drawer

Displays a panel that slides in from the edge of the screen, containing supplementary content.

<ComponentLinks component="drawer" reactAriaHook="useModal" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add drawer",
    npm: "npm install @heroui/drawer",
    yarn: "yarn add @heroui/drawer",
    pnpm: "pnpm add @heroui/drawer",
    bun: "bun add @heroui/drawer"
  }}
/>

## Import

HeroUI exports 5 drawer-related components:

- **Drawer**: The main component to display a drawer.
- **DrawerContent**: The wrapper of the other drawer components.
- **DrawerHeader**: The header of the drawer.
- **DrawerBody**: The body of the drawer.
- **DrawerFooter**: The footer of the drawer.

<ImportTabs
  commands={{
    main: `import {
    Drawer,
    DrawerContent,
    DrawerHeader,
    DrawerBody,
    DrawerFooter
} from "@heroui/react";`,
    individual:
      `import {
    Drawer,
    DrawerContent,
    DrawerHeader,
    DrawerBody,
    DrawerFooter
} from "@heroui/drawer";`,
  }}
/>

## Usage

When the drawer opens:

- Focus is bounded within the drawer and set to the first tabbable element.
- Content behind a drawer is inert, meaning that users cannot interact with it.

<CodeDemo title="Usage" files={drawerContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={drawerContent.sizes} />

### Non-dismissible

By default, the drawer can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key.
You can disable this behavior by setting the following properties:

- Set the `isDismissable` property to `false` to prevent the drawer from closing when clicking on the overlay.
- Set the `isKeyboardDismissDisabled` property to `true` to prevent the drawer from closing when pressing the Esc key.

<CodeDemo title="Non-dissmissible" files={drawerContent.nonDismissable} />

### Drawer placement

The drawer can be placed on any edge of the screen using the `placement` prop:
- `left`
- `right` (default)
- `top`
- `bottom`

<CodeDemo title="Placement" files={drawerContent.placement} />

### With Form

The `Drawer` handles the focus within the drawer content. It means that you can use the drawer with
form elements without any problem. The focus returns to the trigger when the drawer closes.

<CodeDemo title="With Form" files={drawerContent.form} />

> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the drawer opens.

### Backdrop

The `Drawer` component has a `backdrop` prop to show a backdrop behind the drawer. The backdrop can be
either `transparent`, `opaque` or `blur`. The default value is `opaque`.

<CodeDemo title="Backdrop" files={drawerContent.backdrop} />

### Custom Motion

Drawer offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={drawerContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

### Custom Styles

<CodeDemo title="Custom Styles" files={drawerContent.customStyles} />

<b>Credits</b>

The Drawer component design is inspired by [Luma](https://x.com/LumaHQ).


## Slots

- **wrapper**: The wrapper slot of the drawer. It wraps the `base` and the `backdrop` slots.
- **base**: The main slot of the drawer content.
- **backdrop**: The backdrop slot, it is displayed behind the drawer.
- **header**: The header of the drawer, it is displayed at the top of the drawer.
- **body**: The body of the drawer, it is displayed in the middle of the drawer.
- **footer**: The footer of the drawer, it is displayed at the bottom of the drawer.
- **closeButton**: The close button of the drawer.

## Data Attributes

`Drawer` has the following attributes on the `base` element:

- **data-open**:
  When the drawer is open. Based on drawer state.
- **data-dismissable**:
  When the drawer is dismissable. Based on `isDismissable` prop.

<Spacer y={4} />

## Accessibility

- Content outside the drawer is hidden from assistive technologies while it is open.
- The drawer optionally closes when interacting outside, or pressing the <Kbd>Esc</Kbd> key.
- Focus is moved into the drawer on mount, and restored to the trigger element on unmount.
- While open, focus is contained within the drawer, preventing the user from tabbing outside.
- Scrolling the page behind the drawer is prevented while it is open, including in mobile browsers.

<Spacer y={4} />

## API

### Drawer Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the drawer. It's usually the DrawerContent.",
      default: "-"
    },
    {
      attribute: "size",
      type: "xs | sm | md | lg | xl | 2xl | 3xl | 4xl | 5xl | full",
      description: "The drawer size.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg",
      description: "The drawer border radius.",
      default: "lg"
    },
    {
      attribute: "placement",
      type: "left | right | top | bottom",
      description: "The drawer position.",
      default: "right"
    },
    {
      attribute: "isOpen",
      type: "boolean",
      description: "Whether the drawer is open by default (controlled).",
      default: "-"
    },
    {
      attribute: "defaultOpen",
      type: "boolean",
      description: "Whether the drawer is open by default (uncontrolled).",
      default: "-"
    },
    {
      attribute: "isDismissable",
      type: "boolean",
      description: "Whether the drawer can be closed by clicking on the overlay or pressing the Esc key.",
      default: "true"
    },
    {
      attribute: "isKeyboardDismissDisabled",
      type: "boolean",
      description: "Whether pressing the Esc key to close the drawer should be disabled.",
      default: "false"
    },
    {
      attribute: "shouldBlockScroll",
      type: "boolean",
      description: "Whether the drawer should block the scroll of the page on open.",
      default: "true"
    },
    {
      attribute: "hideCloseButton",
      type: "boolean",
      description: "Whether to hide the drawer close button.",
      default: "false"
    },
    {
      attribute: "closeButton",
      type: "ReactNode",
      description: "Custom close button to display on top right corner.",
      default: "-"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The props to modify the framer motion animation. Use the variants API to create your own animation.",
      default: "-"
    },
    {
      attribute: "portalContainer",
      type: "HTMLElement",
      description: "The container element in which the overlay portal will be placed.",
      default: "document.body"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the drawer should not have animations.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>>",
      description: "Allows to set custom class names for the drawer slots.",
      default: "-"
    }
  ]}
/>

### Drawer Events

<APITable
  data={[
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the drawer's open state changes.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the drawer is closed.",
      default: "-"
    }
  ]}
/>

<Spacer y={4} />

### Drawer types

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```


--- Содержимое из файла: drawer.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\drawer.mdx) ---

---
title: "Dropdown"
description: "Displays a list of actions or options that a user can choose."
---

import {dropdownContent} from "@/content/components/dropdown";

# Dropdown

Displays a list of actions or options that a user can choose.

<ComponentLinks component="dropdown" reactAriaHook="useMenu" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add dropdown",
    npm: "npm install @heroui/dropdown",
    yarn: "yarn add @heroui/dropdown",
    pnpm: "pnpm add @heroui/dropdown",
    bun: "bun add @heroui/dropdown"
  }}
/>


## Import

HeroUI exports 5 dropdown-related components:

- **Dropdown**: The main component, which is a wrapper for the other components. This component is an extension of the [Popover](/docs/components/popover) component, so it accepts all the props of the Popover component.
- **DropdownTrigger**: The component that triggers the dropdown menu to open.
- **DropdownMenu**: The component that contains the dropdown items.
- **DropdownSection**: The component that contains a group of dropdown items.
- **DropdownItem**: The component that represents a dropdown item.

<ImportTabs
  commands={{
    main: `import {
    Dropdown,
    DropdownTrigger,
    DropdownMenu,
    DropdownSection,
    DropdownItem
} from "@heroui/react";`,
    individual: `import {
    Dropdown,
    DropdownTrigger,
    DropdownMenu,
    DropdownSection,
    DropdownItem
} from "@heroui/dropdown";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={dropdownContent.usage} />

### Dynamic items

Dropdown follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" files={dropdownContent.dynamic} />

### Disabled Keys

Dropdown items can be disabled using the `disabledKeys` prop to the `DropdownMenu` component.

<CodeDemo title="Disabled Keys" files={dropdownContent.disabledKeys} />

> **Note**: It's important to have a unique key for each item, otherwise the disabled keys will not work.

### Action event

You can use the `onAction` prop to get the key of the selected item.

<CodeDemo title="Action event" files={dropdownContent.action} />

### Variants

You can use the `variant` in the `DropdownMenu` component to change the `hover` style of the dropdown items.

<CodeDemo title="Variants" files={dropdownContent.variants} />

### Single Selection

You can set the `selectionMode` property as `single` to allow the user to select only one item at a time.

<CodeDemo
  title="Single Selection"
  files={dropdownContent.singleSelection}
/>

### Multiple Selection

You can set the `selectionMode` property as `multiple` to allow the user to select multiple items at a time.

<CodeDemo
  title="Multiple Selection"
  files={dropdownContent.multipleSelection}
/>

> **Note**: To allow empty selection, you can set the `disallowEmptySelection` property as `false`.

### With Shortcut

You can use the `shortcut` prop to add a shortcut to the dropdown item.

<CodeDemo title="With Shortcut" files={dropdownContent.shortcut} />

> **Note**: Dropdown does not handle the shortcut event, you need to handle it yourself.

### With Icons

It is possible to add icons to the dropdown items using the `startContent` / `endContent` props.

<CodeDemo title="With Icons" files={dropdownContent.icons} />

> **Note**: If you use `currentColor` as the icon color, the icon will have the same color as the item text.

### With Description

You can use the `description` prop to add a description to the dropdown item.

<CodeDemo
  title="With Description"
  files={dropdownContent.description}
/>

### With Sections

You can use the `DropdownSection` component to group dropdown items.

<CodeDemo title="With Sections" files={dropdownContent.sections} />

> **Note**: Sections without a `title` must provide an `aria-label` for accessibility.

### Custom Trigger

You can use any component as a trigger for the dropdown menu, just wrap it in the `DropdownTrigger` component.

<CodeDemo title="Custom Trigger" files={dropdownContent.customTrigger} />

### Changing the backdrop

As we mentioned earlier, the `Dropdown` component is an extension of the [Popover](/docs/components/popover) component,
so it accepts all the props of the Popover component, including the `backdrop` prop.

<CodeDemo title="Changing the backdrop" files={dropdownContent.backdrop} />

### Routing

The `<DropdownItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.

```jsx
import {Dropdown, DropdownMenu, DropdownTrigger, DropdownItem, Button} from "@heroui/react";

function App() {
  return (
    <Dropdown>
      <DropdownTrigger>
        <Button variant="bordered">Open Menu</Button>
      </DropdownTrigger>
      <DropdownMenu aria-label="Link Actions">
        <DropdownItem key="home" href="/home">
          Home
        </DropdownItem>
        <DropdownItem key="about" href="/about">
          About
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}
```

## Slots

Dropdown has 3 components with slots the `DropdownMenu`, `DropdownItem` and `DropdownSection` components.

### DropdownMenu

- **base**: The main wrapper for the menu component. This slot wraps the `topContent`, `bottomContent` and the `list` slot.
- **list**: The slot for the menu list component. You can see this slot as the `ul` slot.
- **emptyContent**: The slot content to display when the collection is empty.

### DropdownItem

- **base**: The main slot for the dropdown item. It wraps all the other slots.
- **wrapper**: The `title` and `description` wrapper.
- **title**: The title of the dropdown item.
- **description**: The description of the dropdown item.
- **shortcut**: The shortcut slot.
- **selectedIcon**: The selected icon slot. This is only visible when the item is selected.

### DropdownSection

- **base**: The main slot for the dropdown section. It wraps all the other slots.
- **heading**: The title that is render on top of the section group.
- **group**: The group of dropdown items.
- **divider**: The divider that is render between the groups. This is only visible when `showDivider` is `true`.

### Customizing the dropdown popover

The `Dropdown` component is an extension of the [Popover](/docs/components/popover) component, so you can use the same
slots to customize the dropdown.

<CodeDemo
  title="Custom Popover Styles"
  files={dropdownContent.customPopoverStyles}
/>

### Customizing the dropdown items style

You can customize the dropdown items either by using the `DropdownMenu` `itemClasses` prop or by using the
`DropdownItem` slots, the `itemClasses` allows you to customize all the items at once, while the slots allow
you to customize each item individually.

<CodeDemo title="Custom Dropdown Items Styles" files={dropdownContent.customItemsStyles} />

<Spacer y={4} />

### Keyboard Interactions

| Key                              | Description                                                                                                                                   |
| -------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| <Kbd>Space</Kbd>                 | When focus is on `DropdownTrigger`, opens the dropdown menu and focuses the first item. When focus is on an item, activates the focused item. |
| <Kbd>Enter</Kbd>                 | When focus is on `DropdownTrigger`, opens the dropdown menu and focuses the first item. When focus is on an item, activates the focused item. |
| <Kbd>ArrowDown</Kbd>             | When focus is on `DropdownTrigger`, opens the dropdown menu. When focus is on an item, moves focus to the next item.                          |
| <Kbd>ArrowUp</Kbd>               | When focus is on an item, moves focus to the previous item.                                                                                   |
| <Kbd>Esc</Kbd>                   | Closes the dropdown menu and moves focus to `DropdownTrigger`.                                                                                |
| <Kbd>A-Z</Kbd> or <Kbd>a-z</Kbd> | When the menu is open, moves focus to the next menu item with a label that starts with the typed character if such an menu item exists.       |

<Spacer y={4} />

## Data Attributes

`DropdownItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the dropdown item is disabled. Based on dropdown `disabledKeys` prop.
- **data-selected**:
  When the dropdown item is selected. Based on dropdown `selectedKeys` prop.
- **data-hover**:
  When the dropdown item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the dropdown item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the dropdown item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the dropdown item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a `button` with a `menu` using ARIA.
- Support for single, multiple, or no selection.
- Support for disabled items.
- Support for sections.
- Complex item labeling support for accessibility.
- Keyboard navigation support including arrow keys, home/end, page up/down. See [Keyboard Interactions](#keyboard-interactions) for more details.
- Automatic scrolling support during keyboard navigation.
- Keyboard support for opening the menu using the arrow keys, including automatically focusing the first or last item accordingly.
- Typeahead to allow focusing items by typing text.
- Virtualized scrolling support for performance with long lists.

<Spacer y={4} />

## API

### Dropdown Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually a DropdownTrigger and DropdownMenu elements.",
      default: "-"
    },
    {
      attribute: "type",
      type: "menu | listbox",
      description: "Type of overlay that is opened by the dropdown trigger.",
      default: "menu"
    },
    {
      attribute: "trigger",
      type: "press | longPress",
      description: "How the dropdown menu is triggered.",
      default: "press"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the dropdown trigger is disabled.",
      default: "false"
    },
    {
      attribute: "closeOnSelect",
      type: "boolean",
      description: "Whether the dropdown menu should be closed when an item is selected.",
      default: "true"
    },
    {
      attribute: "shouldBlockScroll",
      type: "boolean",
      description: "Whether the dropdown menu should block scrolling outside the menu.",
      default: "true"
    },
    {
      attribute: "PopoverProps",
      type: "PopoverProps",
      description: "Since the dropdown is an extension of the popover, it accepts all the props of the popover component.",
      default: "-"
    }
  ]}
/>

### Dropdown Events

<APITable
  data={[
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the dropdown's open state changes.",
      default: "-"
    },
    {
      attribute: "shouldCloseOnInteractOutside",
      type: "(e: HTMLElement) => void",
      description: "When user interacts with the argument element outside of the dropdown ref, return true if onClose should be called.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the dropdown should close.",
      default: "-"
    }
  ]}
/>

### DropdownTrigger Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The dropdown trigger component, ensure the children passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility.",
      default: "-"
    }
  ]}
/>

### DropdownMenu Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode | ((item: T) => ReactElement)",
      description: "The contents of the collection. It's usually the DropdownItem or DropdownSection. (static)",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "Item objects in the collection. (dynamic)",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | bordered | light | flat | faded | shadow",
      description: "The dropdown items appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The dropdown items color theme.",
      default: "default"
    },
    {
      attribute: "selectionMode",
      type: "none | single | multiple",
      description: "The type of selection that is allowed in the collection.",
      default: "-"
    },
    {
      attribute: "selectedKeys",
      type: "all | Iterable<React.Key>",
      description: "The currently selected keys in the collection (controlled).",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "Iterable<React.Key>",
      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      default: "-"
    },
    {
      attribute: "defaultSelectedKeys",
      type: "all | Iterable<React.Key>",
      description: "The initial selected keys in the collection (uncontrolled).",
      default: "-"
    },
    {
      attribute: "disallowEmptySelection",
      type: "boolean",
      description: "Whether the collection allows empty selection.",
      default: "false"
    },
    {
      attribute: "autoFocus",
      type: "boolean | first | last",
      description: "Where the focus should be set.",
      default: "false"
    },
    {
      attribute: "topContent",
      type: "ReactNode",
      description: "The content to display above the listbox items.",
      default: "-"
    },
    {
      attribute: "bottomContent",
      type: "ReactNode",
      description: "The content to display below the listbox items.",
      default: "-"
    },
    {
      attribute: "emptyContent",
      type: "ReactNode",
      description: "The content to display when the collection is empty.",
      default: "No items."
    },
    {
      attribute: "hideEmptyContent",
      type: "boolean",
      description: "Whether to not display the empty content when the collection is empty.",
      default: "false"
    },
    {
      attribute: "hideSelectedIcon",
      type: "boolean",
      description: "Whether to hide the check icon when the items are selected.",
      default: "false"
    },
    {
      attribute: "shouldFocusWrap",
      type: "boolean",
      description: "Whether keyboard navigation is circular.",
      default: "false"
    },
    {
      attribute: "closeOnSelect",
      type: "boolean",
      description: "Whether the dropdown menu should be closed when an item is selected.",
      default: "true"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation of the dropdown items.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base'｜'list'｜'emptyContent', string>>",
      description: "Allows to set custom class names for the dropdown menu slots.",
      default: "-"
    },
    {
      attribute: "itemClasses",
      type: "Partial<Record<'base'｜'wrapper'｜'title'｜'description'｜'shortcut'｜'selectedIcon', string>>",
      description: "Allows to set custom class names for the dropdown item slots.",
      default: "-"
    }
  ]}
/>

### DropdownMenu Events

<APITable
  data={[
    {
      attribute: "onAction",
      type: "(key: React.Key) => void",
      description: "Handler that is called when an item is selected.",
      default: "-"
    },
    {
      attribute: "onSelectionChange",
      type: "(keys: \"all\" | Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void",
      description: "Handler that is called when the selection changes.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the menu should close after selecting an item.",
      default: "-"
    }
  ]}
/>

### DropdownSection Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the dropdown section. Usually a list of DropdownItem components. (static)",
      default: "-"
    },
    {
      attribute: "title",
      type: "string",
      description: "The title of the dropdown section.",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "Item objects in the collection. (dynamic)",
      default: "-"
    },
    {
      attribute: "hideSelectedIcon",
      type: "boolean",
      description: "Whether to hide the check icon when the items are selected.",
      default: "false"
    },
    {
      attribute: "showDivider",
      type: "boolean",
      description: "Whether to show the divider between the groups.",
      default: "false"
    },
    {
      attribute: "dividerProps",
      type: "DividerProps",
      description: "The divider component props.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Record<'base'｜'heading'｜'group'｜'divider', string>>",
      description: "Allows to set custom class names for the dropdown section slots.",
      default: "-"
    },
    {
      attribute: "itemClasses",
      type: "Record<'base'｜'wrapper'｜'title'｜'description'｜'shortcut'｜'selectedIcon', string>>",
      description: "Allows to set custom class names for the dropdown item slots.",
      default: "-"
    }
  ]}
/>

### DropdownItem Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the dropdown item.",
      default: "-"
    },
    {
      attribute: "key",
      type: "React.Key",
      description: "The unique key for the dropdown item.",
      default: "-"
    },
    {
      attribute: "title",
      type: "string | ReactNode",
      description: "The title of the dropdown item.",
      default: "-"
    },
    {
      attribute: "textValue",
      type: "string",
      description: "A string representation of the item's contents, used for features like typeahead.",
      default: "-"
    },
    {
      attribute: "description",
      type: "string | ReactNode",
      description: "The description of the dropdown item.",
      default: "-"
    },
    {
      attribute: "shortcut",
      type: "string | ReactNode",
      description: "The dropdown item keyboard shortcut.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The start content of the dropdown item.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The end content of the dropdown item. This is positioned after the shortcut and the selected icon.",
      default: "-"
    },
    {
      attribute: "selectedIcon",
      type: "SelectedIconProps",
      description: "Custom icon to render when the item is selected.",
      default: "-"
    },
    {
      attribute: "showDivider",
      type: "boolean",
      description: "Whether to show a divider below the item.",
      default: "false"
    },
    {
      attribute: "href",
      type: "string",
      description: "A URL to link to. See MDN.",
      default: "-"
    },
    {
      attribute: "target",
      type: "HTMLAttributeAnchorTarget",
      description: "The target window for the link. See MDN.",
      default: "-"
    },
    {
      attribute: "rel",
      type: "string",
      description: "The relationship between the linked resource and the current page. See MDN.",
      default: "-"
    },
    {
      attribute: "download",
      type: "boolean | string",
      description: "Causes the browser to download the linked URL. A string may be provided to suggest a file name. See MDN.",
      default: "-"
    },
    {
      attribute: "ping",
      type: "string",
      description: "A space-separated list of URLs to ping when the link is followed. See MDN.",
      default: "-"
    },
    {
      attribute: "referrerPolicy",
      type: "HTMLAttributeReferrerPolicy",
      description: "How much of the referrer to send when following the link. See MDN.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the dropdown item should be disabled. (Deprecated) pass disabledKeys to DropdownMenu instead.",
      default: "false"
    },
    {
      attribute: "isSelected",
      type: "boolean",
      description: "Whether the dropdown item should be selected. (Deprecated) pass selectedKeys to DropdownMenu instead.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the dropdown item press events should be ignored.",
      default: "false"
    },
    {
      attribute: "hideSelectedIcon",
      type: "boolean",
      description: "Whether to hide the check icon when the item is selected.",
      default: "false"
    },
    {
      attribute: "closeOnSelect",
      type: "boolean",
      description: "Whether the dropdown menu should be closed when the item is selected.",
      default: "true"
    },
    {
      attribute: "classNames",
      type: "Record<'base'｜'wrapper'｜'title'｜'description'｜'shortcut'｜'selectedIcon', string>>",
      description: "Allows to set custom class names for the dropdown item slots.",
      default: "-"
    }
  ]}
/>

### DropdownItem Events

<APITable
  data={[
    {
      attribute: "onAction",
      type: "() => void",
      description: "Handler that is called when the dropdown item is selected. (Deprecated) pass to DropdownMenu instead.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the dropdown item should close after selecting. (Deprecated) pass to DropdownMenu instead.",
      default: "-"
    },
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onPressChange",
      type: "(isPressed: boolean) => void",
      description: "Handler called when the press state changes.",
      default: "-"
    },
    {
      attribute: "onPressUp",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is released.",
      default: "-"
    },
    {
      attribute: "onClick",
      deprecated: true,
      type: "MouseEventHandler",
      description: "The native button click event handler (**Deprecated**) use **onPress** instead.",
      default: "-"
    }
  ]}
/>

### Types

#### Dropdown Item Selected Icon Props

```ts
export type DropdownItemSelectedIconProps = {
  /**
   * The current icon, usually an checkmark icon.
   */
  icon?: ReactNode;
  /**
   * The current selected status.
   */
  isSelected?: boolean;
  /**
   * The current disabled status.
   * @default false
   */
  isDisabled?: boolean;
};

type selectedIcon?: ReactNode | ((props: DropdownItemSelectedIconProps) => ReactNode) | null;
```


--- Содержимое из файла: dropdown.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\dropdown.mdx) ---

---
title: "Form"
description: "A form is a group of inputs that allows users to submit data to a server, with support for providing field validation errors."
---

import {formContent} from "@/content/components/form";

# Form

A form is a group of inputs that allows users to submit data to a server, with support for providing field validation errors.

<ComponentLinks component="form" />

---

<CarbonAd />

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add form",
    npm: "npm install @heroui/form",
    yarn: "yarn add @heroui/form",
    pnpm: "pnpm add @heroui/form",
    bun: "bun add @heroui/form",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Form} from "@heroui/react";',
    individual: 'import {Form} from "@heroui/form";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={formContent.usage} />

## Anatomy

A `Form` is a container for input elements and submit/reset buttons, with support for validation messages. When labeled with `aria-label` or `aria-labelledby`, it becomes a navigable [form landmark](https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/form.html) for assistive technology.

```tsx
import {Form, Button} from '@heroui/react';

<Form>
  {/* ... */}
  <Button type="submit" />
  <Button type="reset" />
</Form>
```

## Events

The `onSubmit` event will be triggered when a user submits the form with the `Enter` key or by pressing a submit button. The onReset event will be triggered when a user presses a reset button.

<CodeDemo title="Events" files={formContent.events} highlightedLines={[39, 41, 42, 44]} />

## Validation

`Form` supports native HTML constraint validation with customizable UI, custom validation functions, and server-side validation. Server-side validation errors can be provided via the `validationErrors` prop as an object mapping field names to error messages, which are cleared when the user modifies the field.

<CodeDemo title="Validation" files={formContent.serverValidation} />

See the [Forms](/docs/guide/forms) guide to learn more about form validation, including client-side validation, and integration with other frameworks and libraries.


### Validation Behavior

`Form` validation uses native validation behavior by default, but can be switched to ARIA validation by setting `validationBehavior="aria"`. ARIA validation shows realtime errors without blocking submission. This can be set at the form or field level.
To set the default behavior at the app level, you can change the form defaults for your entire app using [HeroUI Provider](/docs/api-references/heroui-provider).


```tsx
<Form validationBehavior="aria">
  <Input
    isRequired
    name="username"
    label="Username"
    labelPlacement="outside"
    placeholder="Enter your username"
    validate={(value) => {
      if (value.length < 3) {
        return "Username must be at least 3 characters long";
      }

      return value === "admin" ? "Nice try!" : null;
    }}
  />
  <Button type="submit">Submit</Button>
</Form>
```

<CodeDemo title="Validation Behavior" files={formContent.customValidationAria} />

## Accessibility

- Built with a native HTML `<form>` element, with support for ARIA labelling to create a [form landmark](https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/form.html).
- Full support for browser features like form autofill.
- Support for native HTML constraint validation with customizable UI, custom validation functions, realtime validation, and server-side validation errors.


<Spacer y={4} />

## API

### Form Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The wrapped component.",
      default: "-",
    },
    {
      attribute: "validationBehavior",
      type: "'native' | 'aria'",
      description:
        "Whether to use native HTML form validation to prevent form submission when a field value is missing or invalid, or mark fields as required or invalid via ARIA.",
      default: "native",
    },
    {
      attribute: "validationErrors",
      type: "Record<string, string | string[]>",
      description: "Validation errors for the form, typically returned by a server. This should be set to an object mapping from input names to errors.",
      default: "-",
    },
    {
      attribute: "action",
      type: "string | FormHTMLAttributes<HTMLFormElement>['action']",
      description: "Where to send the form-data when the form is submitted. See MDN.",
      default: "-",
    },
    {
      attribute: "encType",
      type: "'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'",
      description: "The enctype attribute specifies how the form-data should be encoded when submitting it to the server. See MDN.",
      default: "-",
    },
    {
      attribute: "method",
      type: "'get' | 'post' | 'dialog'",
      description: "The HTTP method to submit the form with. See MDN.",
      default: "-",
    },
    {
      attribute: "target",
      type: "'_blank' | '_self' | '_parent' | '_top'",
      description: "The target attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form. See MDN.",
      default: "-",
    },
    {
      attribute: "autoComplete",
      type: "'off' | 'on'",
      description: "Indicates whether input elements can by default have their values automatically completed by the browser. See MDN.",
      default: "-",
    },
    {
      attribute: "autoCapitalize",
      type: "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'",
      description: "Controls whether inputted text is automatically capitalized and, if so, in what manner. See MDN.",
      default: "-",
    },
    {
      attribute: "className",
      type: "string",
      description: "The CSS className for the element.",
      default: "-",
    },
    {
      attribute: "style",
      type: "CSSProperties",
      description: "The inline style for the element.",
      default: "-",
    },
  ]}
/>


--- Содержимое из файла: form.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\form.mdx) ---

---
title: "Image"
description: "The Image component is used to display images with support for fallback."
---

import {imageContent} from "@/content/components/image";

# Image

The Image component is used to display images with support for fallback.

<ComponentLinks component="image" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add image",
    npm: "npm install @heroui/image",
    yarn: "yarn add @heroui/image",
    pnpm: "pnpm add @heroui/image",
    bun: "bun add @heroui/image"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Image} from "@heroui/react";',
    individual: 'import {Image} from "@heroui/image";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={imageContent.usage} />

### Blurred

You can use the `isBlurred` prop to duplicate the image and blur it to create a blurred effect.

<CodeDemo title="Blurred" files={imageContent.blurred} />

### Zoomed

You can use the `isZoomed` prop make the image zoomed when hovered.

<CodeDemo title="Zoomed" files={imageContent.zoomed} />

### Animated Loading

Image component has a built-in `skeleton` animation to indicate the image is loading and an
`opacity` animation when the image loads.

<CodeDemo displayMode="visible" title="Animated Loading" files={imageContent.loading} />

> **Note**: The `URL` uses `https://app.requestly.io/delay` to simulate a slow network.

### Image with fallback

You can use the `fallbackSrc` prop to display a fallback image when:

- The `fallbackSrc` prop is provided.
- The image provided in `src` is still loading.
- The image provided in `src` fails to load.
- The image provided in `src` is not found.

<CodeDemo displayMode="visible" title="Image with fallback" files={imageContent.fallback} />

### With Next.js Image

Next.js provides an optimized [Image](https://nextjs.org/docs/app/api-reference/components/image) component,
you can use it with HeroUI `Image` component as well.

<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="With Next.js Image" files={imageContent.nextjs} />

> **Note**: HeroUI's `Image` component is `client-side`, using hooks like `useState` for loading states
> and animations. Use Next.js `Image` alone if these features aren't required.

## Slots

- **img**: Slot for the image element.
- **wrapper**: Image wrapper, it handles alignment, placement, and general appearance.
- **zoomedWrapper**: The wrapper slot for the zoomed image it avoids the image content to overflow the parent container.
- **blurredImg**: The wrapper slot for the duplicated blurred image.

<Spacer y={4} />

## API

### Image Props

<APITable
  data={[
    {
      attribute: "src",
      type: "string",
      description: "The image source.",
      default: "-"
    },
    {
      attribute: "srcSet",
      type: "string",
      description: "The image srcSet.",
      default: "-"
    },
    {
      attribute: "sizes",
      type: "string",
      description: "The image sizes.",
      default: "-"
    },
    {
      attribute: "alt",
      type: "string",
      description: "The image alt.",
      default: "-"
    },
    {
      attribute: "width",
      type: "number",
      description: "The image width.",
      default: "-"
    },
    {
      attribute: "height",
      type: "number",
      description: "The image height.",
      default: "-"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The image border radius.",
      default: "xl"
    },
    {
      attribute: "shadow",
      type: "none | sm | md | lg",
      description: "The image shadow.",
      default: "none"
    },
    {
      attribute: "loading",
      type: "eager | lazy",
      description: "A loading strategy to use for the image.",
      default: "-"
    },
    {
      attribute: "fallbackSrc",
      type: "string",
      description: "The fallback image source.",
      default: "-"
    },
    {
      attribute: "isBlurred",
      type: "boolean",
      description: "Whether the image should have a duplicated blurred image at the background.",
      default: "false"
    },
    {
      attribute: "isZoomed",
      type: "boolean",
      description: "Whether the image should be zoomed when hovered.",
      default: "false"
    },
    {
      attribute: "removeWrapper",
      type: "boolean",
      description: "Whether to remove the wrapper element. This will cause the image to be rendered as a direct child of the parent element. If you set this prop as `true` neither the skeleton nor the zoom effect will work.",
      default: "false"
    },
    {
      attribute: "disableSkeleton",
      type: "boolean",
      description: "Whether the image should disable the skeleton animation while loading.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: 'Partial<Record<"img" | "wrapper" | "zoomedWrapper" | "blurredImg", string>>',
      description: "Allows to set custom class names for the image slots.",
      default: "-"
    }
  ]}
/>

### Image Events

<APITable
  data={[
    {
      attribute: "onLoad",
      type: "ReactEventHandler<HTMLImageElement>",
      description: "Handler that is called when the image load.",
      default: "-"
    },
    {
      attribute: "onError",
      type: "() => void",
      description: "Handler that is called when the image fails to load.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: image.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\image.mdx) ---

---
title: "Input OTP"
description: "InputOtp is a component that allows users to enter OTP."
---

import {inputOtpContent} from "@/content/components/input-otp";

# Input OTP

The InputOtp component enables users to enter one-time passwords (OTP). It is built on top of the [input-otp](https://github.com/guilhermerodz/input-otp) library by [@guilherme_rodz](https://twitter.com/guilherme_rodz).

<ComponentLinks component="input-otp" />

---

<CarbonAd />

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add input-otp",
    npm: "npm install @heroui/input-otp",
    yarn: "yarn add @heroui/input-otp",
    pnpm: "pnpm add @heroui/input-otp",
    bun: "bun add @heroui/input-otp",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {InputOtp} from "@heroui/react";',
    individual: 'import {InputOtp} from "@heroui/input-otp";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={inputOtpContent.usage} />

## Disabled

The `isDisabled` prop disables user interaction with the `InputOtp` component.

<CodeDemo title="Disabled" files={inputOtpContent.disabled} />

## Read Only

The `isReadOnly` prop makes the `InputOtp` component read-only while maintaining its visual appearance.

<CodeDemo title="Read Only" files={inputOtpContent.readonly} />

## Required

The `isRequired` prop marks the `InputOtp` as a required field.

<CodeDemo title="Required" files={inputOtpContent.required} />

## Sizes

The size of the `InputOtp` can be customized using the `size` prop. The default value is `md`.

<CodeDemo title="Sizes" files={inputOtpContent.sizes} />

## Colors

Color of the `InputOtp` can be changed by `color` property.

<CodeDemo title="Colors" files={inputOtpContent.colors} />

## Variants

Styling/Variant of the `InputOtp` can be changed by `variant` property. By default, `variant` property is set to `flat`.

<CodeDemo title="Variants" files={inputOtpContent.variants} />

## Radius

Radius of the `InputOtp` can be changed by `radius` property. By default, `radius` property is set to `md`.

<CodeDemo title="Radius" files={inputOtpContent.radius} />

## Password

`InputOtp` can be used as password/secured-pin input by setting `type` as `password`.

<CodeDemo title="Password" files={inputOtpContent.password} />

## Description

Description of the `InputOtp` can be set by `description` property.

<CodeDemo title="Description" files={inputOtpContent.description} />

## Error Message

Custom error message of the `InputOtp` can be set by `errorMessage` property.

<CodeDemo title="Error Message" files={inputOtpContent.errorMessage} />

## Allowed Keys

- The `InputOtp` component only accepts specified input keys. Any other input is ignored.
- You can customize the allowed keys using the `allowedKeys` prop, which accepts a regex pattern.
- By default, `allowedKeys` is set to `^[0-9]*$` (only numerical digits).

<CodeDemo title="Allowed Keys" files={inputOtpContent.allowedKeys} />

## Controlled

<CodeDemo title="Controlled" files={inputOtpContent.controlled} />

## React Hook Form

You can use `InputOtp` with React Hook Form for form validation and submission handling.

<CodeDemo title="React Hook Form" files={inputOtpContent.form} />

## Different Lengths & Validation

The `InputOtp` component supports different lengths through the `length` property. You can set the number of input segments by passing a number value to the `length` prop. Common use cases include 4-digit PINs and 6-digit authentication codes.

<CodeDemo title="Lengths" files={inputOtpContent.lengths} />

## Custom Styles

You can customize the styles of the `InputOtp` component using the `classNames` prop.

<CodeDemo title="Custom Styles" files={inputOtpContent.customStyles} />

## Slots

- **base**: InputOtp wrapper, it handles alignment, placement, and general appearance.
- **wrapper**: Wraps the underlying input-otp component. Sent as `containerClassName` prop to underlying input-otp component.
- **input**: The input element.
- **segmentWrapper**: Wraps all the segment elements.
- **segment**: The segment element.
- **caret**: The caret represents the typing indicator of the input-otp component.
- **passwordChar**: The passwordChar represents the text styling when input-type is password.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the input-otp.
- **errorMessage**: The error message of the input-otp.

<Spacer y={4} />

## Data Attributes

`InputOtp` has the following attributes on the `base` element:

- **data-invalid**:
  When the input-otp is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the input-otp is required. Based on `isRequired` prop.
- **data-readonly**:
  When the input-otp is readonly. Based on `isReadOnly` prop.
- **data-filled**:
  When the input-otp is completely filled.
- **data-disabled**:
  When the input-otp is disabled. Based on `isDisabled` prop.

`InputOtp` also has the following attributes on the `segment` element:

- **data-active**:
  When the segment is active.
- **data-focus**:
  When the segment is focused.
- **data-focus-visible**:
  When the segment is focused visible.
- **data-has-value**:
  When the segment has value.

<Spacer y={4} />

## Accessibility

- Built on top of [input-otp](https://github.com/guilhermerodz/input-otp).
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input-otp via ARIA.
- Keyboard navigation:
  - Tab: Moves focus between input segments
  - Arrow keys: Navigate between segments
  - Backspace: Clears current segment and moves focus to previous segment
- ARIA attributes:
  - `aria-invalid`: Indicates validation state
  - `aria-required`: Indicates if the input is required

<Spacer y={4} />

## API

### InputOtp Props

<APITable
  data={[
    {
      attribute: "length",
      type: "number",
      description: "The length of the input-otp.",
      default: "4"
    },
    {
      attribute: "allowedKeys",
      type: "regEx string",
      description: "The allowed keys for the input-otp.",
      default: "^[0-9]*$"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the input-otp.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the input-otp.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the input-otp.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the input-otp.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string",
      description: "The current value of the input-otp (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string",
      description: "The default value of the input-otp (uncontrolled).",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "Provides additional information or hints about the input requirements.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "An error message for the input-otp. It is only shown when isInvalid is set to true",
      default: "-"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "When true, the InputOtp expands to fill its parent container width.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Marks the input as required for form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "When true, allows selection but prevents user modification.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the input-otp is disabled.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the input-otp is invalid.",
      default: "false"
    },
    {
      attribute: "baseRef",
      type: "RefObject<HTMLDivElement>",
      description: "The ref to the base element.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the input-otp should be animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'inputWrapper' | 'input' | 'segmentWrapper' | 'segment' | 'caret' | 'passwordChar' | 'helperWrapper' | 'description' | 'errorMessage', string>>",
      description: "Allows to set custom class names for the Input slots.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the element should receive focus on render.",
      default: "false"
    },
    {
      attribute: "textAlign",
      type: "left | center | right",
      description: "The text alignment of the input segments",
      default: "center"
    },
    {
      attribute: "pushPasswordManagerStrategy",
      type: "'none' | 'hidden' | 'input'",
      description: "Strategy for password manager support",
      default: "-"
    },
    {
      attribute: "pasteTransformer",
      type: "(text: string) => string",
      description: "A function to transform pasted text before it's inserted into the input.",
      default: "-"
    },
    {
      attribute: "containerClassName",
      type: "string",
      description: "Class name for the input container",
      default: "-"
    },
    {
      attribute: "noScriptCSSFallback",
      type: "string",
      description: "CSS fallback for when JavaScript is disabled",
      default: "-"
    }
  ]}
/>

### InputOtp Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "(value: string) => void",
      description: "Handler that is called when the element's value changes.",
      default: "-"
    },
    {
      attribute: "onComplete",
      type: "(value: string) => void",
      description: "Handler that is called when the element's value is completely filled.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: input-otp.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\input-otp.mdx) ---

---
title: "Input"
description: "Input is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more."
---

import {inputContent} from "@/content/components/input";

# Input

Input is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more.

<ComponentLinks component="input" reactAriaHook="useTextField" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add input",
    npm: "npm install @heroui/input",
    yarn: "yarn add @heroui/input",
    pnpm: "pnpm add @heroui/input",
    bun: "bun add @heroui/input"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Input} from "@heroui/react";',
    individual: 'import {Input} from "@heroui/input";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={inputContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={inputContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={inputContent.readOnly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the input will be required.

<CodeDemo title="Required" files={inputContent.required} />

### Sizes

<CodeDemo title="Sizes" files={inputContent.sizes} />

### Colors

<CodeDemo title="Colors" files={inputContent.colors} />

### Variants

<CodeDemo title="Variants" files={inputContent.variants} />

### Radius

<CodeDemo title="Radius" files={inputContent.radius} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={inputContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Password Input

You can use the `type` property to change the input type to `password`.

<CodeDemo title="Password Input" highlightedLines="25" files={inputContent.password} />

### Clear Button

If you pass the `isClearable` property to the input, it will have a clear button at the
end of the input, it will be visible when the input has a value.

<CodeDemo title="Clear Button" highlightedLines="7" files={inputContent.clearButton} />

### Start & End Content

You can use the `startContent` and `endContent` properties to add content to the start and end of the input.

<CodeDemo title="Start and End Content" files={inputContent.startEndContent} />

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={inputContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input. `errorMessage` is only shown when `isInvalid` is set to `true`.

<CodeDemo title="With Error Message" files={inputContent.errorMessage} />

Example with `regex` email validation:

<CodeDemo title="With Regex Validation" files={inputContent.regexValidation} />

### Controlled

You can use the `value` and `onValueChange` properties to control the input value.

<CodeDemo title="Controlled" files={inputContent.controlled} />

> **Note**: HeroUI `Input` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

### With Form

`Input` can be used with a `Form` component to leverage form state management. For more on form and validation behaviors, see the [Forms](/docs/guide/forms) guide.

#### Built-in Validation

`Input` supports the following [native HTML constraints](https://developer.mozilla.org/docs/Web/HTML/Constraint_validation):

- `isRequired` indicates that a field must have a value before the form can be submitted.
- `minLength` and `maxLength` specify the minimum and length of text input.
- `pattern` provides a custom regular expression that a text input must conform to.
- `type="email"` and `type="url"` provide built-in validation for email addresses and URLs.

When using native validation, error messages can be customized by passing a function to `errorMessage` and checking the [ValidityState](https://developer.mozilla.org/docs/Web/API/ValidityState) of `validationDetails`.

<CodeDemo title="Built-in Validation" files={inputContent.builtInValidation} />

#### Custom Validation

In addition to built-in constraints, you can provide a function to the `validate` property for custom validation.

<CodeDemo title="Custom Validation" files={inputContent.customValidation} />

#### Realtime Validation

If you want to display validation errors while the user is typing, you can control the field value and use the `isInvalid` prop along with the `errorMessage` prop.

<CodeDemo title="Realtime Validation" files={inputContent.realTimeValidation} />

#### Server Validation

Client-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.
HeroUI allows you to display server-side validation errors by using the `validationErrors` prop in the `Form` component.
This prop should be an object where each key is the field `name` and the value is the error message.

<CodeDemo title="Server Validation" files={inputContent.serverValidation} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the input, it is the one that is displayed above, inside or left of the input.
- **mainWrapper**: Wraps the `inputWrapper` when position is `outside` / `outside-left`.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.
- **input**: The input element.
- **clearButton**: The clear button, it is at the end of the input.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the input.
- **errorMessage**: The error message of the input.

### Custom Styles

You can customize the `Input` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" highlightedLines="13-31" files={inputContent.customStyles} />

### Custom Implementation

In case you need to customize the input even further, you can use the `useInput` hook to create your own implementation.

<CodeDemo
  showPreview={false}
  showOpenInCodeSandbox={true}
  title="Custom Implementation"
  files={inputContent.customImpl}
/>

<Spacer y={4} />

## Data Attributes

`Input` has the following attributes on the `base` element:

- **data-invalid**:
  When the input is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the input is required. Based on `isRequired` prop.
- **data-readonly**:
  When the input is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the input is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the input is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-within**:
  When the input is being focused or any of its children. Based on [useFocusWithin](https://react-spectrum.adobe.com/react-aria/useFocusWithin.html).
- **data-focus-visible**:
  When the input is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the input is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input via ARIA.

<Spacer y={4} />

## API

### Input Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the input.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the input.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the input.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the input.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the input.",
      default: "-"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string",
      description: "The current value of the input (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string",
      description: "The default value of the input (uncontrolled).",
      default: "-"
    },
    {
      attribute: "placeholder",
      type: "string",
      description: "The placeholder of the input.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the input. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "An error message for the input. It is only shown when isInvalid is set to true",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: string) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "minLength",
      type: "number",
      description: "The minimum length of the text input.",
      default: "-"
    },
    {
      attribute: "maxLength",
      type: "number",
      description: "The maximum length of the text input.",
      default: "-"
    },
    {
      attribute: "pattern",
      type: "string",
      description: "A regular expression that the input value is checked against.",
      default: "-"
    },
    {
      attribute: "type",
      type: "text | email | url | password | tel | search | file",
      description: "The type of the input.",
      default: "text"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the input.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the input.",
      default: "-"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the input should take up the width of its parent.",
      default: "true"
    },
    {
      attribute: "isClearable",
      type: "boolean",
      description: "Whether the input should have a clear button.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user input is required on the input before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the input can be selected but not changed by the user.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the input is disabled.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the input is invalid.",
      default: "false"
    },
    {
      attribute: "baseRef",
      type: "RefObject<HTMLDivElement>",
      description: "The ref to the base element.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the input should be animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' | 'helperWrapper' | 'description' | 'errorMessage', string>>",
      description: "Allows to set custom class names for the Input slots.",
      default: "-"
    }
  ]}
/>

### Input Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "(value: string) => void",
      description: "Handler that is called when the element's value changes.",
      default: "-"
    },
    {
      attribute: "onClear",
      type: "() => void",
      description: "Handler that is called when the clear button is clicked.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: input.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\input.mdx) ---

---
title: "Keyboard Key"
description: "Keyboard key is a component to display which key or combination of keys performs a given action."
---

import {kbdContent} from "@/content/components/kbd";

# Keyboard Key

Keyboard key is a component to display which key or combination of keys performs a given action.

<ComponentLinks component="kbd" rscCompatible />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add kbd",
    npm: "npm install @heroui/kbd",
    yarn: "yarn add @heroui/kbd",
    pnpm: "pnpm add @heroui/kbd",
    bun: "bun add @heroui/kbd"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Kbd} from "@heroui/react";',
    individual: 'import {Kbd} from "@heroui/kbd";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={kbdContent.usage} />

### Keys

<CodeDemo title="Keys" files={kbdContent.keys} />

> **Note**: Check the [API](#keyboard-keys) section to see all available keys.

## Slots

- **base**: Kbd wrapper, it handles alignment, placement, and general appearance.
- **abbr**: The `keys` wrapper that handles the appearance of the keys.
- **content**: The children wrapper that handles the appearance of the content.

<Spacer y={4}/>  

## Accessibility

- Each command `key` has a `title` attribute that describes the action that the key performs.

<Spacer y={4}/>  

## API

### Keyboard Key Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content to display in the keyboard key.",
      default: "-"
    },
    {
      attribute: "keys",
      type: "KbdKey | KbdKey[]",
      description: "The keys of the keyboard key.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: 'Partial<Record<"base" | "abbr" | "content", string>>',
      description: "Allows to set custom class names for the keyboard key slots.",
      default: "-"
    }
  ]}
/>

### Keyboard Keys

List of supported keys.

```ts
type KbdKey =
  | "command"
  | "shift"
  | "ctrl"
  | "option"
  | "enter"
  | "delete"
  | "escape"
  | "tab"
  | "capslock"
  | "up"
  | "right"
  | "down"
  | "left"
  | "pageup"
  | "pagedown"
  | "home"
  | "end"
  | "help"
  | "space"
  | "fn"
  | "win"
  | "alt";
```


--- Содержимое из файла: kbd.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\kbd.mdx) ---

---
title: "Link"
description: "Links allow users to click their way from page to page. This component is styled to resemble a hyperlink and semantically renders an <a>"
---

import {linkContent} from "@/content/components/link";

# Link

Links allow users to click their way from page to page. This component is styled to resemble a hyperlink and semantically renders an `<a>`

<ComponentLinks component="link" reactAriaHook="useLink" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add link",
    npm: "npm install @heroui/link",
    yarn: "yarn add @heroui/link",
    pnpm: "pnpm add @heroui/link",
    bun: "bun add @heroui/link"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Link} from "@heroui/react";',
    individual: 'import {Link} from "@heroui/link";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={linkContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={linkContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={linkContent.sizes} />

### Colors

<CodeDemo title="Colors" files={linkContent.colors} />

### Underline

<CodeDemo title="Underline" files={linkContent.underline} />

### External

If you pass the `isExternal` prop, the link will have the `target="_blank"` and `rel="noopener noreferrer"` attributes.

<CodeDemo title="External" files={linkContent.external} />

### Custom Anchor Icon

<CodeDemo title="Custom Anchor Icon" files={linkContent.customAnchorIcon} />

### Block Link

If you pass the `isBlock` prop, the link will be rendered as a block element with a `hover` effect.

<CodeDemo title="Block Link" files={linkContent.block} />

### Polymorphic Component

HeroUI's components expose a `as` prop that allows you to customize the React element type that is used to render the component.

<CodeDemo title="Polymorphic Component" files={linkContent.polymorphic} />

### Routing

The `<Link>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and 
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.


```jsx
import {Link} from "@heroui/react";

function App() {
  return (
    <>
      <Link href="/home">Home</Link>
      <Link href="/about">About</Link>
    </>
  );
}
```

### Custom Implementation

In case you need to customize the link even further, you can use the `useLink` hook to create your own implementation.

<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={linkContent.customImpl} />

<Spacer y={4} />

## Data Attributes

`Link` has the following attributes on the `base` element:

- **data-focus**:
  When the link is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)
- **data-focus-visible**:
  When the link is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)
- **data-disabled**:
  When the link is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Support for mouse, touch, and keyboard interactions.
- Support for navigation links via `<a>` elements or custom element types via ARIA.
- Support for disabled links.
- Keyboard users may activate links using the <Kbd>Enter</Kbd> key.

<Spacer y={4} />

## API

### Link Props

<APITable
  data={[
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the link.",
      default: "md"
    },
    {
      attribute: "color",
      type: "foreground | primary | secondary | success | warning | danger",
      description: "The color of the link.",
      default: "primary"
    },
    {
      attribute: "underline",
      type: "none | hover | always | active | focus",
      description: "The underline style of the link.",
      default: "none"
    },
    {
      attribute: "href",
      type: "string",
      description: "A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).",
      default: "-"
    },
    {
      attribute: "target",
      type: "HTMLAttributeAnchorTarget",
      description: "The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).",
      default: "-"
    },
    {
      attribute: "rel",
      type: "string",
      description: "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
      default: "-"
    },
    {
      attribute: "download",
      type: "boolean | string",
      description: "Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download).",
      default: "-"
    },
    {
      attribute: "ping",
      type: "string",
      description: "A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).",
      default: "-"
    },
    {
      attribute: "referrerPolicy",
      type: "HTMLAttributeReferrerPolicy",
      description: "How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).",
      default: "-"
    },
    {
      attribute: "isExternal",
      type: "boolean",
      description: "Whether the link should open in a new tab.",
      default: "false"
    },
    {
      attribute: "showAnchorIcon",
      type: "boolean",
      description: "Whether to show the anchor icon.",
      default: "false"
    },
    {
      attribute: "anchorIcon",
      type: "ReactNode",
      description: "The anchor icon.",
      default: "-"
    },
    {
      attribute: "isBlock",
      type: "boolean",
      description: "Whether the link should be rendered as block with a hover effect.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the link is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable link and block animations.",
      default: "false"
    }
  ]}
/>

### Link Events

<APITable
  data={[
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onPressChange",
      type: "(isPressed: boolean) => void",
      description: "Handler called when the press state changes.",
      default: "-"
    },
    {
      attribute: "onPressUp",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is released.",
      default: "-"
    },
    {
      attribute: "onClick",
      deprecated: true,
      type: "MouseEventHandler",
      description: "The native link click event handler (Deprecated) use onPress instead.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: link.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\link.mdx) ---

---
title: "Listbox"
description: "A listbox displays a list of options and allows a user to select one or more of them."
---

import {listboxContent} from "@/content/components/listbox";

# Listbox

A listbox displays a list of options and allows a user to select one or more of them.

<ComponentLinks component="listbox" reactAriaHook="useListBox" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add listbox",
    npm: "npm install @heroui/listbox",
    yarn: "yarn add @heroui/listbox",
    pnpm: "pnpm add @heroui/listbox",
    bun: "bun add @heroui/listbox"
  }}
/>

## Import

HeroUI exports 3 listbox-related components:

- **Listbox**: The main component, which is a wrapper for the other components.
- **ListboxSection**: The component that contains a group of listbox items.
- **ListboxItem**: The component that represents a listbox item.

<ImportTabs
  commands={{
    main: `import {
    Listbox,
    ListboxSection,
    ListboxItem
} from "@heroui/react";`,
    individual: `import {
    Listbox,
    ListboxSection,
    ListboxItem
} from "@heroui/listbox";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={listboxContent.usage} />

### Dynamic items

Listbox follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" files={listboxContent.dynamic} />

### Disabled Keys

Listbox items can be disabled using the `disabledKeys` prop to the `Listbox` component.

<CodeDemo title="Disabled Keys" files={listboxContent.disabledKeys} />

> **Note**: It's important to have a unique key for each item, otherwise the disabled keys will not work.

### Variants

You can use the `variant` in the `Listbox` component to change the `hover` style of the listbox items.

<CodeDemo title="Variants" files={listboxContent.variants} />

### Single Selection

You can set the `selectionMode` property as `single` to allow the user to select only one item at a time.

<CodeDemo
  title="Single Selection"
  files={listboxContent.singleSelection}
/>

### Multiple Selection

You can set the `selectionMode` property as `multiple` to allow the user to select multiple items at a time.

<CodeDemo
  title="Multiple Selection"
  files={listboxContent.multipleSelection}
/>

> **Note**: To allow empty selection, you can set the `disallowEmptySelection` property as `false`.

### With Icons

It is possible to add icons to the listbox items using the `startContent` / `endContent` props.

<CodeDemo title="With Icons" files={listboxContent.icons} />

> **Note**: If you use `currentColor` as the icon color, the icon will have the same color as the item text.

### With Description

You can use the `description` prop to add a description to the listbox item.

<CodeDemo
  title="With Description"
  files={listboxContent.description}
/>

### With Top & Bottom Content

You can use the `topContent` and `bottomContent` props to add content above and below the listbox items.

<CodeDemo title="With Top & Bottom Content" files={listboxContent.topContent} />

### With Sections

You can use the `ListboxSection` component to group listbox items.

<CodeDemo title="With Sections" files={listboxContent.sections} />

> **Note**: Sections without a `title` must provide an `aria-label` for accessibility.

### Routing

The `<ListboxItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.

```jsx
import {Listbox, ListboxItem} from "@heroui/react";

function App() {
  return (
    <Listbox>
      <ListboxItem key="home" href="/home">
        Home
      </ListboxItem>
      <ListboxItem key="about" href="/about">
        About
      </ListboxItem>
    </Listbox>
  );
}
```

### Virtualization

Listbox supports virtualization, which allows efficient rendering of large lists by only rendering items that are visible in the viewport. You can enable virtualization by setting the `isVirtualized` prop to `true`.

<CodeDemo
  title="Virtualization"
  files={listboxContent.virtualization}
/>

> **Note**: The virtualization strategy is based on the [@tanstack/react-virtual](https://tanstack.com/virtual/latest) package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.
#### Ten Thousand Items

Here's an example of using virtualization with 10,000 items.

<CodeDemo title="Ten Thousand Items" files={listboxContent.virtualizationTenThousand} />

## Slots

Listbox has 3 components with slots the base one `Listbox`, `ListboxItem` and `ListboxSection` components.

### Listbox

- **base**: The main wrapper for the listbox component. This slot wraps the `topContent`, `bottomContent` and the `list` slot.
- **list**: The slot for the listbox component. You can see this slot as the `ul` slot.
- **emptyContent**: The slot content to display when the collection is empty.

### ListboxItem

- **base**: The main slot for the listbox item. It wraps all the other slots.
- **wrapper**: The `title` and `description` wrapper.
- **title**: The title of the listbox item.
- **description**: The description of the listbox item.
- **selectedIcon**: The selected icon slot. This is only visible when the item is selected.

### ListboxSection

- **base**: The main slot for the listbox section. It wraps all the other slots.
- **heading**: The title that is render on top of the section group.
- **group**: The group of listbox items.
- **divider**: The divider that is render between the groups. This is only visible when `showDivider` is `true`.

### Customizing the listbox

You can customize the `Listbox` items style by using the `itemClasses` prop and passing custom Tailwind CSS classes.

<CodeDemo title="Custom Styles" files={listboxContent.customStyles} />

> **Note**: In the above example, we've utilized the [Boxicons](https://boxicons.com/) icons collection.

<Spacer y={4} />

### Keyboard Interactions

| Key                                  | Description                                                                                                      |
| ------------------------------------ | ---------------------------------------------------------------------------------------------------------------- |
| <Kbd>Home</Kbd>                      | Moves focus to the first item.                                                                                   |
| <Kbd>End</Kbd>                       | Moves focus to the last item.                                                                                    |
| <Kbd>ArrowDown</Kbd>                 | When focus is on an item, moves focus to the next item.                                                          |
| <Kbd>ArrowUp</Kbd>                   | When focus is on an item, moves focus to the previous item.                                                      |
| <Kbd>Enter</Kbd> or <Kbd>Space</Kbd> | When focus is on an item, selects the item.                                                                      |
| <Kbd>A-Z</Kbd> or <Kbd>a-z</Kbd>     | Moves focus to the next menu item with a label that starts with the typed character if such an menu item exists. |

## Data Attributes

`ListboxItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the listbox item is disabled. Based on listbox `disabledKeys` prop.
- **data-selected**:
  When the listbox item is selected. Based on listbox `selectedKeys` prop.
- **data-selectable**:
  When the listbox item is selectable. Based on listbox `selectionMode` prop.
- **data-hover**:
  When the listbox item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the listbox item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the listbox item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the listbox item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a `listbox` using ARIA.
- Support for single, multiple, or no selection.
- Support for disabled items.
- Support for sections.
- Labeling support for accessibility.
- Support for mouse, touch, and keyboard interactions.
- Tab stop focus management.
- Keyboard navigation support including arrow keys, home/end, page up/down, select all, and clear.
- Automatic scrolling support during keyboard navigation.
- Typeahead to allow focusing options by typing text.

<Spacer y={4} />

## API

### Listbox Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually a list of ListboxItem or ListboxSection",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "Item objects in the collection. (dynamic)",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | bordered | light | flat | faded | shadow",
      description: "The listbox items appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The listbox items color theme.",
      default: "default"
    },
    {
      attribute: "selectionMode",
      type: "none | single | multiple",
      description: "The type of selection that is allowed in the collection.",
      default: "-"
    },
    {
      attribute: "selectedKeys",
      type: "React.Key[]",
      description: "The currently selected keys in the collection (controlled).",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "React.Key[]",
      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      default: "-"
    },
    {
      attribute: "defaultSelectedKeys",
      type: "all | React.Key[]",
      description: "The initial selected keys in the collection (uncontrolled).",
      default: "-"
    },
    {
      attribute: "disallowEmptySelection",
      type: "boolean",
      description: "Whether the collection allows empty selection.",
      default: "false"
    },
    {
      attribute: "shouldHighlightOnFocus",
      type: "boolean",
      description: "Whether the focused item should be highlighted. It applies the same styles to the items as when hovered.",
      default: "false"
    },
    {
      attribute: "autoFocus",
      type: "boolean | first | last",
      description: "Where the focus should be set.",
      default: "false"
    },
    {
      attribute: "topContent",
      type: "ReactNode",
      description: "The content to display above the listbox items.",
      default: "-"
    },
    {
      attribute: "bottomContent",
      type: "ReactNode",
      description: "The content to display below the listbox items.",
      default: "-"
    },
    {
      attribute: "emptyContent",
      type: "ReactNode",
      description: "The content to display when the collection is empty.",
      default: "No items."
    },
    {
      attribute: "shouldFocusWrap",
      type: "boolean",
      description: "Whether keyboard navigation is circular.",
      default: "false"
    },   
    {
      attribute: "isVirtualized",
      type: "boolean",
      description: "Whether to enable virtualization.",
      default: "false"
    },
    {
      attribute: "virtualization",
      type: "Record<\"maxListboxHeight\" & \"itemHeight\", number>",
      description: "Configuration for virtualization, optimizing rendering for large datasets. Required if isVirtualized is set to true.",
      default: "-",
    },
    {
      attribute: "hideEmptyContent",
      type: "boolean",
      description: "Whether to not display the empty content when the collection is empty.",
      default: "false"
    },
    {
      attribute: "hideSelectedIcon",
      type: "boolean",
      description: "Whether to hide the check icon when the items are selected.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation of the listbox items.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"list\" | \"emptyContent\", string>>",
      description: "Allows to set custom class names for the listbox slots.",
      default: "-"
    },
    {
      attribute: "itemClasses",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"title\" | \"description\" | \"selectedIcon\", string>>",
      description: "Allows to set custom class names for the listbox item slots.",
      default: "-"
    }
  ]}
/>

### Listbox Events

<APITable
  data={[
    {
      attribute: "onAction",
      type: "(key: React.Key) => void",
      description: "Handler that is called when an item is selected.",
      default: "-"
    },
    {
      attribute: "onSelectionChange",
      type: "(keys: React.Key[]) => void",
      description: "Handler that is called when the selection changes.",
      default: "-"
    }
  ]}
/>

### ListboxSection Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the listbox section. Usually a list of ListboxItem components. (static)",
      default: "-"
    },
    {
      attribute: "title",
      type: "string",
      description: "The title of the listbox section.",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "Item objects in the collection. (dynamic)",
      default: "-"
    },
    {
      attribute: "hideSelectedIcon",
      type: "boolean",
      description: "Whether to hide the check icon when the items are selected.",
      default: "false"
    },
    {
      attribute: "showDivider",
      type: "boolean",
      description: "Whether to show the divider between the groups.",
      default: "false"
    },
    {
      attribute: "dividerProps",
      type: "DividerProps",
      description: "The divider component props.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"heading\" | \"group\" | \"divider\", string>>",
      description: "Allows to set custom class names for the listbox section slots.",
      default: "-"
    },
    {
      attribute: "itemClasses",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"title\" | \"description\" | \"shortcut\" | \"selectedIcon\", string>>",
      description: "Allows to set custom class names for the listbox item slots.",
      default: "-"
    }
  ]}
/>

### ListboxItem Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the listbox item.",
      default: "-"
    },
    {
      attribute: "key",
      type: "React.Key",
      description: "The unique key for the listbox item.",
      default: "-"
    },
    {
      attribute: "title",
      type: "string | ReactNode",
      description: "The title of the listbox item.",
      default: "-"
    },
    {
      attribute: "textValue",
      type: "string",
      description: "A string representation of the item's contents, used for features like typeahead.",
      default: "-"
    },
    {
      attribute: "description",
      type: "string | ReactNode",
      description: "The description of the listbox item.",
      default: "-"
    },
    {
      attribute: "shortcut",
      type: "string | ReactNode",
      description: "The listbox item keyboard shortcut.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The start content of the listbox item.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The end content of the listbox item. This is positioned after the shortcut and the selected icon.",
      default: "-"
    },
    {
      attribute: "selectedIcon",
      type: "ListboxItemSelectedIconProps",
      description: "Custom icon to render when the item is selected.",
      default: "-"
    },
    {
      attribute: "href",
      type: "string",
      description: "A URL to link to. See MDN.",
      default: "-"
    },
    {
      attribute: "target",
      type: "HTMLAttributeAnchorTarget",
      description: "The target window for the link. See MDN.",
      default: "-"
    },
    {
      attribute: "rel",
      type: "string",
      description: "The relationship between the linked resource and the current page. See MDN.",
      default: "-"
    },
    {
      attribute: "download",
      type: "boolean | string",
      description: "Causes the browser to download the linked URL. A string may be provided to suggest a file name. See MDN.",
      default: "-"
    },
    {
      attribute: "ping",
      type: "string",
      description: "A space-separated list of URLs to ping when the link is followed. See MDN.",
      default: "-"
    },
    {
      attribute: "referrerPolicy",
      type: "HTMLAttributeReferrerPolicy",
      description: "How much of the referrer to send when following the link. See MDN.",
      default: "-"
    },
    {
      attribute: "shouldHighlightOnFocus",
      type: "boolean",
      description: "Whether the focused item should be highlighted. It applies the same styles to the item as when hovered.",
      default: "false"
    },
    {
      attribute: "hideSelectedIcon",
      type: "boolean",
      description: "Whether to hide the check icon when the item is selected.",
      default: "false"
    },
    {
      attribute: "showDivider",
      type: "boolean",
      description: "Whether to show a divider below the item.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the listbox item should be disabled. (Deprecated) pass disabledKeys to Listbox instead.",
      default: "false"
    },
    {
      attribute: "isSelected",
      type: "boolean",
      description: "Whether the listbox item should be selected. (Deprecated) pass selectedKeys to Listbox instead.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the listbox item press events should be ignored.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"title\" | \"description\" | \"shortcut\" | \"selectedIcon\", string>>",
      description: "Allows to set custom class names for the listbox item slots.",
      default: "-"
    }
  ]}
/>

### ListboxItem Events

<APITable
  data={[
    {
      attribute: "onAction",
      type: "() => void",
      description: "Handler that is called when the listbox item is selected. (Deprecated) pass to Listbox instead.",
      default: "-"
    },
    {
      attribute: "onPress",
      type: "(e: PressEvent) => void",
      description: "Handler called when the press is released over the target.",
      default: "-"
    },
    {
      attribute: "onPressStart",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction starts.",
      default: "-"
    },
    {
      attribute: "onPressEnd",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
      default: "-"
    },
    {
      attribute: "onPressChange",
      type: "(isPressed: boolean) => void",
      description: "Handler called when the press state changes.",
      default: "-"
    },
    {
      attribute: "onPressUp",
      type: "(e: PressEvent) => void",
      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
      default: "-"
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is pressed.",
      default: "-"
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler called when a key is released.",
      default: "-"
    },
    {
      attribute: "onClick",
      deprecated: true,
      type: "MouseEventHandler",
      description: "The native button click event handler (Deprecated) use onPress instead.",
      default: "-"
    }
  ]}
/>

---

### Types

#### Listbox Item Selected Icon Props

```ts
export type ListboxItemSelectedIconProps = {
  /**
   * The current icon, usually an checkmark icon.
   */
  icon?: ReactNode;
  /**
   * The current selected status.
   */
  isSelected?: boolean;
  /**
   * The current disabled status.
   * @default false
   */
  isDisabled?: boolean;
};

type selectedIcon?: ReactNode | ((props: ListboxItemSelectedIconProps) => ReactNode) | null;
```


--- Содержимое из файла: listbox.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\listbox.mdx) ---

---
title: "Modal"
description: "Display a dialog with custom content that requires attention or provides additional information."
---

import {modalContent} from "@/content/components/modal";

# Modal

Displays a dialog with custom content that requires attention or provides additional information.

<ComponentLinks component="modal" reactAriaHook="useModal" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add modal",
    npm: "npm install @heroui/modal",
    yarn: "yarn add @heroui/modal",
    pnpm: "pnpm add @heroui/modal",
    bun: "bun add @heroui/modal"
  }}
/>


## Import

HeroUI exports 5 modal-related components:

- **Modal**: The main component to display a modal.
- **ModalContent**: The wrapper of the other modal components.
- **ModalHeader**: The header of the modal.
- **ModalBody**: The body of the modal.
- **ModalFooter**: The footer of the modal.

<ImportTabs
  commands={{
    main: `import {
    Modal,
    ModalContent,
    ModalHeader,
    ModalBody,
    ModalFooter
} from "@heroui/react";`,
    individual:
      `import {
    Modal,
    ModalContent,
    ModalHeader,
    ModalBody,
    ModalFooter
} from "@heroui/modal";`,
  }}
/>

## Usage

When the modal opens:

- Focus is bounded within the modal and set to the first tabbable element.
- Content behind the modal dialog is inert, meaning that users cannot interact with it.

<CodeDemo title="Usage" files={modalContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={modalContent.sizes} />

### Non-dismissible

By default, the modal can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key.
You can disable this behavior by setting the following properties:

- Set the `isDismissable` property to `false` to prevent the modal from closing when clicking on the overlay.
- Set the `isKeyboardDismissDisabled` property to `true` to prevent the modal from closing when pressing the <Kbd>Esc</Kbd> key.

<CodeDemo title="Non-dissmissible" files={modalContent.nonDismissable} />

### Modal placement

By default the modal is centered on screens larger than `sm` and is at the `bottom` of the screen on mobile. This placement is called `auto`, but
you can change it by using the `placement` prop.

<CodeDemo
  asIframe
  title="Modal placement"
  iframeInitialWidth={320}
  previewHeight="680px"
  iframeSrc="/examples/modal/placement"
  files={modalContent.placement}
/>

> **Note**: The `top-center` and `bottom-center` positions mean that the modal is positioned at the top / bottom of the screen
> on mobile, and at the center of the screen on desktop.

### Overflow scroll

You can use the `scrollBehavior` prop to set the scroll behavior of the modal.

- **inside**: The modal content will be scrollable.
- **outside**: The modal content will be scrollable and the modal will be fixed.

<CodeDemo title="Overflow scroll" files={modalContent.overflow} />

### With Form

The `Modal` handles the focus within the modal content. It means that you can use the modal with
form elements without any problem. The focus returns to the trigger when the modal closes.

<CodeDemo title="With Form" files={modalContent.form} />

> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the modal opens.

### Backdrop

The `Modal` component has a `backdrop` prop to show a backdrop behind the modal. The backdrop can be
either `transparent`, `opaque` or `blur`. The default value is `opaque`.

<CodeDemo title="Backdrop" files={modalContent.backdrop} />

### Custom Backdrop

You can customize the backdrop by using the `backdrop` slot.

<CodeDemo title="Custom Backdrop" files={modalContent.customBackdrop} />

### Custom Motion

Modal offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" highlightedLines="14-31" files={modalContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

### Draggable

Try to drag the modal by clicking on the modal header and dragging.

<CodeDemo title="Draggable" files={modalContent.draggable} />

### Draggable Overflow

Setting overflow to `true` allows users to drag the modal to a position where it overflows the viewport.

<CodeDemo title="Draggable Overflow" files={modalContent.draggableOverflow} />

## Slots

- **wrapper**: The wrapper slot of the modal. It wraps the `base` and the `backdrop` slots.
- **base**: The main slot of the modal content.
- **backdrop**: The backdrop slot, it is displayed behind the modal.
- **header**: The header of the modal, it is displayed at the top of the modal.
- **body**: The body of the modal, it is displayed in the middle of the modal.
- **footer**: The footer of the modal, it is displayed at the bottom of the modal.
- **closeButton**: The close button of the modal.

### Custom Styles

You can customize the `Modal` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" highlightedLines="15-20" files={modalContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Modal` has the following attributes on the `base` element:

- **data-open**:
  When the modal is open. Based on modal state.
- **data-dismissable**:
  When the modal is dismissable. Based on `isDismissable` prop.

<Spacer y={4} />

## Accessibility

- Content outside the modal is hidden from assistive technologies while it is open.
- The modal optionally closes when interacting outside, or pressing the <Kbd>Esc</Kbd> key.
- Focus is moved into the modal on mount, and restored to the trigger element on unmount.
- While open, focus is contained within the modal, preventing the user from tabbing outside.
- Scrolling the page behind the modal is prevented while it is open, including in mobile browsers.

<Spacer y={4} />

## API

### Modal Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The content of the modal. It's usually the `ModalContent`.",
      default: "-"
    },
    {
      attribute: "size",
      type: "xs | sm | md | lg | xl | 2xl | 3xl | 4xl | 5xl | full",
      description: "The modal size. This changes the modal `max-width` and `height` (full).",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg",
      description: "The modal border radius.",
      default: "lg"
    },
    {
      attribute: "shadow",
      type: "none | sm | md | lg",
      description: "The modal shadow.",
      default: "lg"
    },
    {
      attribute: "backdrop",
      type: "transparent | opaque | blur",
      description: "The modal backdrop type.",
      default: "opaque"
    },
    {
      attribute: "scrollBehavior",
      type: "normal | inside | outside",
      description: "The modal scroll behavior.",
      default: "normal"
    },
    {
      attribute: "placement",
      type: "auto | top | center | bottom",
      description: "The modal position.",
      default: "auto"
    },
    {
      attribute: "isOpen",
      type: "boolean",
      description: "Whether the modal is open by default (controlled).",
      default: "-"
    },
    {
      attribute: "defaultOpen",
      type: "boolean",
      description: "Whether the modal is open by default (uncontrolled).",
      default: "-"
    },
    {
      attribute: "isDismissable",
      type: "boolean",
      description: "Whether the modal can be closed by clicking on the overlay or pressing the Esc key.",
      default: "true"
    },
    {
      attribute: "isKeyboardDismissDisabled",
      type: "boolean",
      description: "Whether pressing the Esc key to close the modal should be disabled.",
      default: "false"
    },
    {
      attribute: "shouldBlockScroll",
      type: "boolean",
      description: "Whether the modal should block the scroll of the page on open.",
      default: "true"
    },
    {
      attribute: "hideCloseButton",
      type: "boolean",
      description: "Whether to hide the modal close button.",
      default: "false"
    },
    {
      attribute: "closeButton",
      type: "ReactNode",
      description: "Custom close button to display on top right corner.",
      default: "-"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The props to modify the framer motion animation. Use the `variants` API to create your own animation.",
      default: "-"
    },
    {
      attribute: "portalContainer",
      type: "HTMLElement",
      description: "The container element in which the overlay portal will be placed.",
      default: "document.body"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the modal should not have animations.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>>",
      description: "Allows to set custom class names for the modal slots.",
      default: "-"
    }
  ]}
/>

### Modal Events

<APITable
  data={[
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the modal's open state changes.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the modal is closed.",
      default: "-"
    }
  ]}
/>

<Spacer y={4} />

### Modal types

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```


--- Содержимое из файла: modal.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\modal.mdx) ---

---
title: "Navbar"
description: "A responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse and more."
---

import {navbarContent} from "@/content/components/navbar";

# Navbar

A responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse menu and more.

<ComponentLinks component="navbar" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add navbar",
    npm: "npm install @heroui/navbar",
    yarn: "yarn add @heroui/navbar",
    pnpm: "pnpm add @heroui/navbar",
    bun: "bun add @heroui/navbar"
  }}
/>


## Import

HeroUI exports 7 navbar-related components:

- **Navbar**: The main component of navbar.
- **NavbarBrand**: The component for branding.
- **NavbarContent**: The component for wrapping navbar items.
- **NavbarItem**: The component for navbar item.
- **NavbarMenuToggle**: The component for toggling navbar menu.
- **NavbarMenu**: The component for wrapping navbar menu items.
- **NavbarMenuItem**: The component for navbar menu item.

<ImportTabs
  commands={{
    main: `import {
    Navbar, 
    NavbarBrand, 
    NavbarContent, 
    NavbarItem, 
    NavbarMenuToggle,
    NavbarMenu,
    NavbarMenuItem
} from "@heroui/react";`,
    individual: `import {
    Navbar, 
    NavbarBrand, 
    NavbarContent, 
    NavbarItem, 
    NavbarMenuToggle,
    NavbarMenu,
    NavbarMenuItem
} from "@heroui/navbar";`,
  }}
/>

## Usage

<CodeDemo
  asIframe
  title="Usage"
  previewHeight="500px"
  iframeSrc="/examples/navbar/usage"
  files={navbarContent.usage}
/>

### Static

You can use the `position` prop to make the navbar static positioned (the default behavior is `sticky`).

<CodeDemo
  asIframe
  title="Static"
  previewHeight="500px"
  iframeSrc="/examples/navbar/static"
  files={navbarContent.staticPosition}
/>

### Hide on scroll

It is possible to hide the navbar on scroll by using the `shouldHideOnScroll` prop.

<CodeDemo
  asIframe
  title="Hide on scroll"
  previewHeight="500px"
  iframeSrc="/examples/navbar/hide-on-scroll"
  files={navbarContent.hideOnScroll}
/>

### With Menu

You can use the `NavbarMenuToggle` and `NavbarMenu` components to display a togglable menu.

<CodeDemo
  asIframe
  title="With Menu"
  iframeInitialWidth={420}
  previewHeight="600px"
  iframeSrc="/examples/navbar/with-menu"
  files={navbarContent.withMenu}
/>

If you want to remove the `open` / `close` animation, you can pass the `disableAnimation={true}` prop to `Navbar` component.

<CodeDemo
  asIframe
  title="With Menu"
  iframeInitialWidth={420}
  previewHeight="600px"
  iframeSrc="/examples/navbar/disable-menu-animation"
  files={navbarContent.disableMenuAnimation}
/>

### Controlled Menu

You can use the `isMenuOpen` and `onMenuOpenChange` props to control the navbar menu state.

<CodeDemo
  asIframe
  title="Controlled Menu"
  iframeInitialWidth={420}
  previewHeight="600px"
  iframeSrc="/examples/navbar/controlled-menu"
  files={navbarContent.controlledMenu}
/>

### With Border

You can use the `isBordered` prop to add a bottom border to the navbar.

<CodeDemo
  asIframe
  title="Adding a bottom border"
  previewHeight="500px"
  iframeSrc="/examples/navbar/bordered"
  files={navbarContent.bordered}
/>

### Disabling Blur

Navbar has a blur effect by default. You can disable it by using the `isBlurred=false` prop.

<CodeDemo
  asIframe
  title="Disabling blur"
  previewHeight="500px"
  iframeSrc="/examples/navbar/disabled-blur"
  files={navbarContent.disabledBlur}
/>

### With Dropdown Menu

It is possible to use the [Dropdown](/docs/components/dropdown) component to display a dropdown menu as navbar item.

<CodeDemo
  asIframe
  title="With Dropdown Menu"
  previewHeight="600px"
  iframeSrc="/examples/navbar/with-dropdown-menu"
  files={navbarContent.withDropdownMenu}
/>

### With Avatar

Example of a navbar with avatar and dropdown menu.

<CodeDemo
  asIframe
  title="With Avatar"
  previewHeight="420px"
  iframeSrc="/examples/navbar/with-avatar"
  files={navbarContent.withAvatar}
/>

### With Search Input

Example of a navbar with search input.

<CodeDemo
  asIframe
  title="With Search Input"
  previewHeight="420px"
  iframeSrc="/examples/navbar/with-search-input"
  files={navbarContent.withSearchInput}
/>

### Customizing the active item

When the `NavbarItem` is active, it will have a `data-active` attribute. You can use this attribute to customize it.

<CodeDemo
  asIframe
  title="Customizing the active item"
  previewHeight="420px"
  iframeSrc="/examples/navbar/custom-active-item"
  files={navbarContent.customActiveItem}
/>

## Slots

- **base**: The main slot for the navbar. It takes the full width of the parent and wraps the navbar elements including the menu.
- **wrapper**: The slot that contains the navbar elements such as `brand`, `content` and `toggle`.
- **brand**: The slot for the `NavbarBrand` component.
- **content**: The slot for the `NavbarContent` component.
- **item**: The slot for the `NavbarItem` component.
- **toggle**: The slot for the `NavbarMenuToggle` component.
- **toggleIcon**: The slot for the `NavbarMenuToggle` icon.
- **menu**: The slot for the `NavbarMenu` component.
- **menuItem**: The slot for the `NavbarMenuItem` component.

## Data Attributes

`Navbar` has the following attributes on the `base` element:

- **data-menu-open**:
  Indicates if the navbar menu is open.
- **data-hidden**:
  Indicates if the navbar is hidden. It is used when the `shouldHideOnScroll` prop is `true`.

`NavbarContent`

- **data-justify**:
  The justify content of the navbar content. It takes into account the correct space distribution.

`NavbarItem` has the following attributes on the `base` element:

- **data-active**:
  Indicates if the navbar item is active. It is used when the `isActive` prop is `true`.

`NavbarMenuToggle` has the following attributes on the `base` element:

- **data-open**:
  Indicates if the navbar menu is open. It is used when the `isMenuOpen` prop is `true`.
- **data-pressed**:
  When the navbar menu toggle is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-hover**:
  When the navbar menu toggle is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus-visible**:
  When the navbar menu toggle is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

`NavbarMenuItem` has the following attributes on the `base` element:

- **data-active**:
  Indicates if the menu item is active. It is used when the `isActive` prop is `true`.

<Spacer y={4} />

## API

### Navbar Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually navbar elements such as NavbarBrand, NavbarContent and NavbarItem",
      default: "-"
    },
    {
      attribute: "height",
      type: "string | number",
      description: "The height of the navbar.",
      default: "4rem (64px)"
    },
    {
      attribute: "position",
      type: "static | sticky",
      description: "The position of the navbar.",
      default: "sticky"
    },
    {
      attribute: "maxWidth",
      type: "sm | md | lg | xl | 2xl | full",
      description: "The max width of the navbar wrapper.",
      default: "lg"
    },
    {
      attribute: "parentRef",
      type: "React.RefObject<HTMLElement>",
      description: "The parent element where the navbar is placed within. This is used to determine the scroll position and whether the navbar should be hidden or not.",
      default: "window"
    },
    {
      attribute: "isBordered",
      type: "boolean",
      description: "Whether the navbar should have a bottom border or not.",
      default: "false"
    },
    {
      attribute: "isBlurred",
      type: "boolean",
      description: "Whether the navbar should have a blur effect or not.",
      default: "true"
    },
    {
      attribute: "isMenuOpen",
      type: "boolean",
      description: "Indicates if the navbar menu is open. (controlled)",
      default: "false"
    },
    {
      attribute: "isMenuDefaultOpen",
      type: "boolean",
      description: "Indicates if the navbar menu is open by default. (uncontrolled)",
      default: "false"
    },
    {
      attribute: "shouldHideOnScroll",
      type: "boolean",
      description: "Indicates if the navbar should hide on scroll.",
      default: "false"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The motion props to control the visible / hidden animation. This motion is only available if the shouldHideOnScroll prop is set to true.",
      default: "-"
    },
    {
      attribute: "disableScrollHandler",
      type: "boolean",
      description: "Whether the navbar parent scroll event should be listened to or not.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the navbar menu animation should be disabled or not.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'wrapper' | 'brand' | 'content' | 'item' | 'toggle' | 'toggleIcon' | 'menu' | 'menuItem', string>>",
      description: "Allows to set custom class names for the navbar slots.",
      default: "-"
    }
  ]}
/>

### Navbar Events

<APITable
  data={[
    {
      attribute: "onMenuOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the navbar menu open state changes.",
      default: "-"
    },
    {
      attribute: "onScrollPositionChange",
      type: "(position: number) => void",
      description: "Handler that is called when the navbar parent element is scrolled. This event is only dispatched if disableScrollHandler is set to false or shouldHideOnScroll is set to true.",
      default: "-"
    }
  ]}
/>

### NavbarContent Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually navbar elements such as NavbarBrand, NavbarContent and NavbarItem",
      default: "-"
    },
    {
      attribute: "justify",
      type: "start | center | end",
      description: "The justify content of the navbar content. It takes into account the correct space distribution.",
      default: "start"
    }
  ]}
/>

### NavbarItem Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The children to render as the navbar item.",
      default: "-"
    },
    {
      attribute: "isActive",
      type: "boolean",
      description: "Whether the navbar item is active or not.",
      default: "false"
    }
  ]}
/>

### NavbarMenuToggle Props

<APITable
  data={[
    {
      attribute: "icon",
      type: "ReactNode | ((isOpen: boolean | undefined) => ReactNode)",
      description: "The icon to render as the navbar menu toggle.",
      default: "-"
    },
    {
      attribute: "isSelected",
      type: "boolean",
      description: "Whether the navbar menu toggle is selected. (controlled)",
      default: "false"
    },
    {
      attribute: "defaultSelected",
      type: "boolean",
      description: "Whether the navbar menu toggle is selected by default. (uncontrolled)",
      default: "false"
    },
    {
      attribute: "srOnlyText",
      type: "string",
      description: "The text to be used by screen readers.",
      default: "open/close navigation menu"
    }
  ]}
/>

### NavbarMenuToggle Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the navbar menu toggle is pressed.",
      default: "-"
    }
  ]}
/>

### NavbarMenu Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render as the navbar menu. Usually a list of NavbarMenuItem components.",
      default: "-"
    },
    {
      attribute: "portalContainer",
      type: "HTMLElement",
      description: "The container element in which the navbar menu overlay portal will be placed.",
      default: "document.body"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The motion props to control the open / close animation. This motion is only available if the disableAnimation prop is set to false.",
      default: "-"
    }
  ]}
/>

### NavbarMenuItem Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The children to render as the menu item.",
      default: "-"
    },
    {
      attribute: "isActive",
      type: "boolean",
      description: "Whether the menu item is active or not.",
      default: "false"
    }
  ]}
/>

### Types

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```


--- Содержимое из файла: navbar.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\navbar.mdx) ---

---
title: "Number Input"
description: "The numeric input component is designed for users to enter a number, and increase or decrease the value using stepper buttons"
---

import {numberInputContent} from "@/content/components/number-input";

# Number Input

The numeric input component is designed for users to enter a number, and increase or decrease the value using stepper buttons

<ComponentLinks component="number-input" reactAriaHook="useNumberField" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add number-input",
    npm: "npm install @heroui/number-input",
    yarn: "yarn add @heroui/number-input",
    pnpm: "pnpm add @heroui/number-input",
    bun: "bun add @heroui/number-input"
  }}
/>

## Usage

<CodeDemo title="Usage" files={numberInputContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={numberInputContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={numberInputContent.readOnly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the input will be required.

<CodeDemo title="Required" files={numberInputContent.required} />

### Sizes

<CodeDemo title="Sizes" files={numberInputContent.sizes} />

### Colors

<CodeDemo title="Colors" files={numberInputContent.colors} />

### Variants

<CodeDemo title="Variants" files={numberInputContent.variants} />

### Radius

<CodeDemo title="Radius" files={numberInputContent.radius} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={numberInputContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Clear Button

If you pass the `isClearable` property to the input, it will have a clear button at the
end of input, it will be visible when input has a value.

<CodeDemo title="Clear Button" files={numberInputContent.clearButton} />

### Hide Stepper

You can hide the stepper buttons by passing the `hideStepper` property.

<CodeDemo title="Hide Stepper" files={numberInputContent.hideStepper} />

### Start & End Content

You can use the `startContent` and `endContent` properties to add content to the start and end of NumberInput.

<CodeDemo title="Start and End Content" files={numberInputContent.startEndContent} />

### With Label

You can add a label to the input by passing the `label` property.

<CodeDemo title="With Label" files={numberInputContent.label} />

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={numberInputContent.description} />

### With Min Value

You can set the minimum value of the input by passing the `minValue` property.

<CodeDemo title="With Min Value" files={numberInputContent.minValue} />

### With Max Value

You can set the maximum value of the input by passing the `maxValue` property.

<CodeDemo title="With Max Value" files={numberInputContent.maxValue} />

### With Wheel Disabled

By default, you can increase or decrease the value with scroll wheel. You can disable changing the vaule with scroll in NumberInput by passing the `isWheelDisabled` property.

<CodeDemo title="With Wheel Disabled" files={numberInputContent.isWheelDisabled} />

### With Format Options

You can format the value of the input by passing the `formatOptions` property.

<CodeDemo title="With Format Options" files={numberInputContent.formatOptions} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input. `errorMessage` is only shown when `isInvalid` is set to `true`.

<CodeDemo title="With Error Message" files={numberInputContent.errorMessage} />

### Controlled

You can use the `value` and `onValueChange` properties to control the input value.

<CodeDemo title="Controlled" files={numberInputContent.controlled} />

> **Note**: HeroUI `NumberInput` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

### With Form

`NumberInput` can be used with a `Form` component to leverage form state management. For more on form and validation behaviors, see the [Forms](/docs/guide/forms) guide.

#### Custom Validation

In addition to built-in constraints, you can provide a function to the `validate` property for custom validation.

<CodeDemo title="Custom Validation" files={numberInputContent.customValidation} />

#### Realtime Validation

If you want to display validation errors while the user is typing, you can control the field value and use the `isInvalid` prop along with the `errorMessage` prop.

<CodeDemo title="Realtime Validation" files={numberInputContent.realTimeValidation} />

#### Server Validation

Client-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.
HeroUI allows you to display server-side validation errors by using the `validationErrors` prop in the `Form` component.
This prop should be an object where each key is the field `name` and the value is the error message.

<CodeDemo title="Server Validation" files={numberInputContent.serverValidation} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the input, it is the one that is displayed above, inside or left of the input.
- **mainWrapper**: Wraps the `inputWrapper`
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.
- **input**: The input element.
- **clearButton**: The clear button, it is at the end of the input.
- **stepperButton**: The stepper button to increase or decrease the value.
- **stepperWrapper**: The wrapper for the stepper.
- **description**: The description of NumberInput.
- **errorMessage**: The error message of NumberInput.

### Custom Styles

You can customize the `NumberInput` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={numberInputContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`NumberInput` has the following attributes on the `base` element:

- **data-invalid**:
  When the input is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the input is required. Based on `isRequired` prop.
- **data-readonly**:
  When the input is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the input is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the input is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-within**:
  When the input is being focused or any of its children. Based on [useFocusWithin](https://react-spectrum.adobe.com/react-aria/useFocusWithin.html).
- **data-focus-visible**:
  When the input is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the input is disabled. Based on `isDisabled` prop.
- **data-filled**:
  When the input has content, placeholder, start content or the placeholder is shown.
- **data-has-elements**:
  When the input has any element (label, helper text, description, error message).
- **data-has-helper**:
  When the input has helper text.
- **data-has-description**: 
  When the input has a description.
- **data-has-label**:
  When the input has a label.
- **data-has-value**:
  When the input has a value (placeholder is not shown).


<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element with `type="number"`.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description, helper text, and error message linked to the input via ARIA.

<Spacer y={4} />

## API

### NumberInput Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the input.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the input.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the input.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the input.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the input.",
      default: "-"
    },
    {
      attribute: "name",
      type: "string",
      description: "The name of the input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the input. Provides a description for the input.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string",
      description: "The current value of the input (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string",
      description: "The default value of the input (uncontrolled).",
      default: "-"
    },
    {
      attribute: "placeholder",
      type: "string",
      description: "The placeholder of the input.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "An error message for the input. It is only shown when isInvalid is set to true",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: string) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "minValue",
      type: "number",
      description: "The minimum value of the input.",
      default: "-"
    },
    {
      attribute: "maxValue",
      type: "number",
      description: "The maximum value of the input.",
      default: "-"
    },
    {
      attribute: "formatOptions",
      type: "Intl.NumberFormatOptions",
      description: "The format options for the input.",
      default: "-"
    },
    {
      attribute: "step",
      type: "number",
      description: "The amount that the input value changes with each increment or decrement tick.",
      default: "1"
    },
    {
      attribute: "hideStepper",
      type: "boolean",
      description: "Whether the stepper buttons should be hidden.",
      default: "-"
    },
    {
      attribute: "isWheelDisabled",
      type: "boolean",
      description: "Whether the wheel should be disabled.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the input.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the input.",
      default: "-"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the input should take up the width of its parent.",
      default: "true"
    },
    {
      attribute: "isClearable",
      type: "boolean",
      description: "Whether the input should have a clear button.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user input is required on the input before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the input can be selected but not changed by the user.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the input is disabled.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the input is invalid.",
      default: "false"
    },
    {
      attribute: "incrementAriaLabel",
      type: "string",
      description: "A custom aria-label for the increment button. If not provided, the localized string `Increment` is used.",
      default: "-"
    },
    {
      attribute: "decrementAriaLabel",
      type: "string",
      description: "A custom aria-label for the decrement button. If not provided, the localized string `Decrement` is used.",
      default: "-"
    },
    {
      attribute: "baseRef",
      type: "RefObject<HTMLDivElement>",
      description: "The ref to the base element.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the input should be animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' | 'stepperButton' | 'helperWrapper' | 'stepperWrapper' | 'description' | 'errorMessage', string>>",
      description: "Allows to set custom class names for the Input slots.",
      default: "-"
    }
  ]}
/>

### NumberInput Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "(value: number) => void",
      description: "Handler that is called when the element's value changes.",
      default: "-"
    },
    {
      attribute: "onClear",
      type: "() => void",
      description: "Handler that is called when the clear button is clicked.",
      default: "-"
    }
  ]}
/>



--- Содержимое из файла: number-input.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\number-input.mdx) ---

---
title: "Pagination"
description: "The Pagination component allows you to display active page and navigate between multiple pages."
---

import {paginationContent} from "@/content/components/pagination";

# Pagination

The Pagination component allows you to display active page and navigate between multiple pages.

<ComponentLinks component="pagination" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add pagination",
    npm: "npm install @heroui/pagination",
    yarn: "yarn add @heroui/pagination",
    pnpm: "pnpm add @heroui/pagination",
    bun: "bun add @heroui/pagination"
  }}
/>

## Import

HeroUI exports 3 pagination-related components:

- **Pagination**: The main component to display a pagination.
- **PaginationItem**: The internal component to display a pagination item.
- **PaginationCursor**: The internal item component to display the current page.

<ImportTabs
  commands={{
    main: 'import {Pagination, PaginationItem, PaginationCursor} from "@heroui/react";',
    individual:
      'import {Pagination, PaginationItem, PaginationCursor} from "@heroui/pagination";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={paginationContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={paginationContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={paginationContent.sizes} />

### Colors

<CodeDemo title="Radius" files={paginationContent.colors} />

### Variants

You can use the `variant` property to change the pagination items style.

<CodeDemo title="Variants" files={paginationContent.variants} />

### With Controls

You can set the `showControls` to `true` to display the `next` and `previous` buttons.

<CodeDemo title="With Controls" files={paginationContent.controls} />

### Pagination Loop

In case you want to loop the pagination, you can set the `loop` property to `true`.
The cursor will go back to the first page when it reaches the last page and vice versa.

<CodeDemo title="Pagination Loop" files={paginationContent.loop} />

### Changing the initial page

You can change the initial page by setting the `initialPage` property.

<CodeDemo title="Changing the initial page" files={paginationContent.initialPage} />

### Compact Pagination

You can set the `isCompact` property to `true` to display reduced version of the pagination.

<CodeDemo title="Compact Pagination" files={paginationContent.compact} />

### With Shadow

You can use the `showShadow` property to display a shadow below the active page item.

<CodeDemo title="With Shadow" files={paginationContent.shadow} />

### Controlled

<CodeDemo title="Controlled" files={paginationContent.controlled} />

### Siblings

You can control the number of pages to show before and after the current page by setting the `siblings` property.

<CodeDemo title="Siblings" files={paginationContent.siblings} />

### Boundaries

You can control the number of pages to show at the beginning and end of the pagination by setting the `boundaries` property.

<CodeDemo title="Boundaries" files={paginationContent.boundaries} />

### Custom items

You can use the `renderItem` property to customize the pagination items.

<CodeDemo title="Custom items" files={paginationContent.customItems} />

## Slots

- **base**: The main pagination slot.
- **wrapper**: The pagination wrapper slot. This wraps the pagination items.
- **prev**: The previous button slot.
- **next**: The next button slot.
- **item**: The pagination item slot, applied to the middle items.
- **cursor**: The current page slot. Available only when `disableCursorAnimation` is `false` and `disableAnimation` is `false`.
- **forwardIcon**: The forward icon slot. The one that appears when hovering the ellipsis button.
- **ellipsis**: The ellipsis slot.
- **chevronNext**: The chevron next icon slot.

### Custom Styles

You can customize the `Pagination` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={paginationContent.customStyles} />

### Custom Implementation

In case you need to customize the pagination even further, you can use the `usePagination` hook to create
your own implementation.

<CodeDemo title="Custom Implementation" files={paginationContent.customImpl} /> 

<Spacer y={4} />

## Data Attributes

`Pagination` has the following attributes on the `base` element:

- **data-controls**:
  Indicates whether the pagination has controls. Based on `showControls` prop.
- **data-loop**:
  When the pagination is looped. Based on `loop` prop.
- **data-dots-jump**:
  Indicates whether the pagination has dots jump. Based on `dotsJump` prop.
- **data-total**:
  The total number of pages. Based on `total` prop.
- **data-active-page**:
  The active page. Based on `activePage` prop.

<Spacer y={4} />

## Accessibility

- The root node has a role of `navigation` by default.
- The pagination items have an aria-label that identifies the item purpose ("next page button", "previous page button", etc.), you
  can override this label by using the `getItemAriaLabel` function.
- The pagination items are in tab order, with a tabindex of "0".

<Spacer y={4} />

## API

### Pagination Props

<APITable
  data={[
    {
      attribute: "variant",
      type: "flat | bordered | light | faded",
      description: "The pagination variant.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The pagination color theme.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The pagination size.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The pagination border radius.",
      default: "xl"
    },
    {
      attribute: "total",
      type: "number",
      description: "The total number of pages.",
      default: "1"
    },
    {
      attribute: "dotsJump",
      type: "number",
      description: "The number of pages that are added or subtracted on the '...' button.",
      default: "5"
    },
    {
      attribute: "initialPage",
      type: "number",
      description: "The initial page. (uncontrolled)",
      default: "1"
    },
    {
      attribute: "page",
      type: "number",
      description: "The current page. (controlled)",
      default: "-"
    },
    {
      attribute: "siblings",
      type: "number",
      description: "The number of pages to show before and after the current page.",
      default: "1"
    },
    {
      attribute: "boundaries",
      type: "number",
      description: "The number of pages to show at the beginning and end of the pagination.",
      default: "1"
    },
    {
      attribute: "loop",
      type: "boolean",
      description: "Whether the pagination should be looped.",
      default: "false"
    },
    {
      attribute: "isCompact",
      type: "boolean",
      description: "Whether the pagination should have a compact style.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the pagination is disabled.",
      default: "false"
    },
    {
      attribute: "showShadow",
      type: "boolean",
      description: "Whether the pagination cursor should have a shadow.",
      default: "false"
    },
    {
      attribute: "showControls",
      type: "boolean",
      description: "Whether the pagination should have controls.",
      default: "false"
    },
    {
      attribute: "disableCursorAnimation",
      type: "boolean",
      description: "Whether the pagination cursor should be hidden.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the pagination cursor should be animated.",
      default: "false"
    },
    {
      attribute: "renderItem",
      type: "PaginationItemProps",
      description: "The pagination item render function.",
      default: "-"
    },
    {
      attribute: "getItemAriaLabel",
      type: "(page: string) => string",
      description: "A function that allows you to customize the pagination items aria-label.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'wrapper' | 'prev' | 'next' | 'item' | 'cursor' | 'forwardIcon' | 'ellipsis' | 'chevronNext', string>>",
      description: "Allows to set custom class names for the pagination slots.",
      default: "-"
    }
  ]}
/>

### Pagination Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(page: number) => void",
      description: "Handler that is called when the pagination active page changes.",
      default: "-"
    }
  ]}
/>

---

### Types

#### Pagination Item Props

```ts
export type PaginationItemRenderProps = {
  // The pagination item ref.
  ref?: Ref<T>;
  // The pagination item value.
  value: PaginationItemValue;
  // The pagination item index.
  index: number;
  // The active page number.
  activePage: number;
  // Whether the pagination item is active.
  isActive: boolean;
  // Whether the pagination item is the first item in the pagination.
  isFirst: boolean;
  // Whether the pagination item is the last item in the pagination.
  isLast: boolean;
  // Whether the pagination item is the next item in the pagination.
  isNext: boolean;
  // Whether the pagination item is the previous item in the pagination.
  isPrevious: boolean;
  // The pagination item className.
  className: string;
  // Callback to go to the next page.
  onNext: () => void;
  // Callback to go to the previous page.
  onPrevious: () => void;
  // Callback to go to the page.
  setPage: (page: number) => void;
};

type renderItem?: (props: PaginationItemRenderProps) => ReactNode;
```


--- Содержимое из файла: pagination.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\pagination.mdx) ---

---
title: "Popover"
description: "Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something."
---

import {popoverContent} from "@/content/components/popover";

# Popover

Popover is a **non-modal** dialog that floats around its disclosure. It's commonly used for displaying
additional rich content on top of something.

<ComponentLinks component="popover" reactAriaHook="usePopover" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add popover",
    npm: "npm install @heroui/popover",
    yarn: "yarn add @heroui/popover",
    pnpm: "pnpm add @heroui/popover",
    bun: "bun add @heroui/popover"
  }}
/>

## Import

HeroUI exports 3 popover-related components:

- **Popover**: The main component to display a popover.
- **PopoverTrigger**: The component that triggers the popover.
- **PopoverContent**: The component that contains the popover content.

<ImportTabs
  commands={{
    main: 'import {Popover, PopoverTrigger, PopoverContent} from "@heroui/react";',
    individual: 'import {Popover, PopoverTrigger, PopoverContent} from "@heroui/popover";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={popoverContent.usage} />

### With Arrow

<CodeDemo title="With Arrow" files={popoverContent.arrow} />

### Colors

<CodeDemo title="Colors" files={popoverContent.colors} />

### Placements

<CodeDemo title="Placements" files={popoverContent.placements} />

### Offset

<CodeDemo title="Offset" files={popoverContent.offset} />

### Controlled

<CodeDemo title="Controlled" files={popoverContent.controlled} />

### Title Props

To be sure that the popover exposes the correct title to assistive technologies, you should use the
`titleProps` prop on the `PopoverContent` component. To use this prop, you must pass a function as a child.

<CodeDemo title="Title Props" files={popoverContent.titleProps} />

### With Form

The `Popover` handles the focus within the popover content. It means that you can use the popover with
form elements without any problem. the focus returns to the trigger when the popover closes.

<CodeDemo title="With Form" files={popoverContent.withForm} />

> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the popover opens.

### Backdrop

The `Popover` component has a `backdrop` prop to show a backdrop behind the popover. The backdrop can be
either `transparent`, `opaque` or `blur`. The default value is `transparent`.

<CodeDemo title="Backdrop" files={popoverContent.backdrop} />

### Custom Motion

Popover offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={popoverContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

### Custom Trigger

<CodeDemo title="Custom Trigger" files={popoverContent.customTrigger} />

## Slots

- **base**: The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).
- **trigger**: The popover trigger slot, it has small styles to ensure the trigger works correctly.
- **backdrop**: The backdrop slot, it contains the backdrop styles.
- **content**: The content slot, it contains the popover content.

### Custom Styles

You can customize the `Popover` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={popoverContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Popover` has the following attributes on the `PopoverContent` element:

- **data-open**:
  When the popover is open. Based on popover state.
- **data-placement**:
  The placement of the popover. Based on `placement` prop. The arrow element is positioned based on this attribute.
- **data-focus**:
  When the popover is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the popover is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- The trigger and popover are automatically associated semantically via ARIA.
- Content outside the popover is hidden from assistive technologies while it is open.
- The popover closes when interacting outside, or pressing the <Kbd>Escape</Kbd> key.
- Focus is moved into the popover on mount, and restored to the trigger element on unmount.
- The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.
- Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.

<Spacer y={4} />

## API

### Popover Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The content of the popover. It's usually the PopoverTrigger and PopoverContent.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The popover content font size.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The popover color theme.",
      default: "default"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The popover border radius.",
      default: "lg"
    },
    {
      attribute: "shadow",
      type: "none | sm | md | lg",
      description: "The popover shadow.",
      default: "lg"
    },
    {
      attribute: "backdrop",
      type: "transparent | opaque | blur",
      description: "The popover backdrop type.",
      default: "transparent"
    },
    {
      attribute: "placement",
      type: "PopoverPlacement",
      description: "The placement of the popover relative to its trigger reference.",
      default: "bottom"
    },
    {
      attribute: "state",
      type: "OverlayTriggerState",
      description: "The controlled state of the popover.",
      default: "-"
    },
    {
      attribute: "isOpen",
      type: "boolean",
      description: "Whether the popover is open by default (controlled).",
      default: "-"
    },
    {
      attribute: "defaultOpen",
      type: "boolean",
      description: "Whether the popover is open by default (uncontrolled).",
      default: "-"
    },
    {
      attribute: "offset",
      type: "number",
      description: "The distance or margin between the reference and popper.",
      default: "7"
    },
    {
      attribute: "containerPadding",
      type: "number",
      description: "The placement padding between the element and its surrounding container.",
      default: "12"
    },
    {
      attribute: "crossOffset",
      type: "number",
      description: "The additional offset applied along the cross axis between the element and its anchor element.",
      default: "0"
    },
    {
      attribute: "triggerType",
      type: "dialog | menu | listbox | tree | grid",
      description: "Type of popover that is opened by the trigger.",
      default: "dialog"
    },
    {
      attribute: "showArrow",
      type: "boolean",
      description: "Whether the popover should have an arrow.",
      default: "false"
    },
    {
      attribute: "shouldFlip",
      type: "boolean",
      description: "Whether the popover should change its placement and flip when it's about to overflow.",
      default: "true"
    },
    {
      attribute: "triggerScaleOnOpen",
      type: "boolean",
      description: "Whether the trigger should scale down when the popover is open.",
      default: "true"
    },
    {
      attribute: "shouldBlockScroll",
      type: "boolean",
      description: "Whether the popover should block the scroll outside the popover.",
      default: "false"
    },
    {
      attribute: "shouldCloseOnScroll",
      type: "boolean",
      description: "Whether the popover should close on scroll.",
      default: "false"
    },
    {
      attribute: "isKeyboardDismissDisabled",
      type: "boolean",
      description: "Whether pressing the escape key to close the popover should be disabled.",
      default: "false"
    },
    {
      attribute: "shouldCloseOnBlur",
      type: "boolean",
      description: "Whether the popover should close when focus is lost or moves outside it.",
      default: "false"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The props to modify the framer motion animation.",
      default: "-"
    },
    {
      attribute: "portalContainer",
      type: "HTMLElement",
      description: "The container element in which the overlay portal will be placed.",
      default: "document.body"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the popover is animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'trigger' | 'backdrop' | 'content', string>>",
      description: "Allows to set custom class names for the popover slots.",
      default: "-"
    }
  ]}
/>

### Popover Events

<APITable
  data={[
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the popover's open state changes.",
      default: "-"
    },
    {
      attribute: "shouldCloseOnInteractOutside",
      type: "(e: HTMLElement) => void",
      description: "When user interacts with the argument element outside of the popover ref, return true if onClose should be called.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the popover should close.",
      default: "-"
    }
  ]}
/>

### PopoverTrigger Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The popover trigger component, ensure the children passed is focusable.",
      default: "-"
    }
  ]}
/>

### PopoverContent Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content that is displayed when the trigger is pressed.",
      default: "-"
    }
  ]}
/>

### Popover types

<Spacer y={1} />

#### Popover Placement

```ts
type PopoverPlacement =
  | "top"
  | "bottom"
  | "right"
  | "left"
  | "top-start"
  | "top-end"
  | "bottom-start"
  | "bottom-end"
  | "left-start"
  | "left-end"
  | "right-start"
  | "right-end";
```

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```


--- Содержимое из файла: popover.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\popover.mdx) ---

---
title: "Progress"
description: "The Progress component allows you to view the progress of any activity."
---

import {progressContent} from "@/content/components/progress";

# Progress

The Progress component allows you to view the progress of any activity.

<ComponentLinks component="progress" reactAriaHook="useProgressBar" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add progress",
    npm: "npm install @heroui/progress",
    yarn: "yarn add @heroui/progress",
    pnpm: "pnpm add @heroui/progress",
    bun: "bun add @heroui/progress"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Progress} from "@heroui/react";',
    individual: 'import {Progress} from "@heroui/progress";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={progressContent.usage} />

> **Note**: Make sure to pass the `aria-label` prop when the `label` prop is not provided. This is required for accessibility.

### Sizes

<CodeDemo title="Sizes" files={progressContent.sizes} />

### Colors

<CodeDemo title="Colors" files={progressContent.colors} />

### Indeterminate

You can use the `isIndeterminate` prop to display an indeterminate progress bar.
This is useful when you don't know how long an operation will take.

<CodeDemo title="Indeterminate" highlightedLines={7} files={progressContent.indeterminate} />

### Striped

<CodeDemo title="Striped" highlightedLines={6} files={progressContent.striped} />

### With Label

<CodeDemo title="With Label" files={progressContent.label} />

> **Note**: If you pass the `label` prop you don't need to pass `aria-label` prop anymore.

### With Value

<CodeDemo title="With Value" files={progressContent.value} />

### Value Formatting

Values are formatted as a percentage by default, but this can be modified by using the
`formatOptions` prop to specify a different format. `formatOptions` is compatible with the
option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.

<CodeDemo title="Value Formatting" files={progressContent.valueFormatting} highlightedLines="10" />

## Slots

- **base**: The base slot of the progress, it is the main container.
- **labelWrapper**: The label and value label wrapper.
- **label**: The label of the progress.
- **value**: The value label of the progress.
- **track**: The track is the background bar of the progress.
- **indicator**: The indicator is the bar that is filled according to the `value`.

### Custom Styles

You can customize the `Progress` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={progressContent.customStyles} highlightedLines="9-13" />

<Spacer y={4} />

## Data Attributes

`CircularProgress` has the following attributes on the `base` element:

- **data-indeterminate**:
  Indicates whether the progress is indeterminate.
- **data-disabled**:
  Indicates whether the progress is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a progress bar via ARIA.
- Labeling support for accessibility.
- Internationalized number formatting as a percentage or value.
- Determinate and indeterminate progress support.
- Exposes the `aria-valuenow`, `aria-valuemin`, `aria-valuemax` and `aria-valuetext` attributes.

<Spacer y={4} />

## API

### Progress Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the indicator.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the indicator.",
      default: "primary"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The progress border radius.",
      default: "full"
    },
    {
      attribute: "value",
      type: "number",
      description: "The current value (controlled).",
      default: "-"
    },
    {
      attribute: "valueLabel",
      type: "ReactNode",
      description: "The content to display as the value's label (e.g. 1 of 4).",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "number",
      description: "The smallest value allowed for the input.",
      default: "0"
    },
    {
      attribute: "maxValue",
      type: "number",
      description: "The largest value allowed for the input.",
      default: "100"
    },
    {
      attribute: "formatOptions",
      type: "Intl.NumberFormat",
      description: "The options to format the value.",
      default: "{style: 'percent'}"
    },
    {
      attribute: "isIndeterminate",
      type: "boolean",
      description: "Whether the progress is indeterminate.",
      default: "false"
    },
    {
      attribute: "isStriped",
      type: "boolean",
      description: "Whether the progress is striped.",
      default: "false"
    },
    {
      attribute: "showValueLabel",
      type: "boolean",
      description: "Whether to show the value label.",
      default: "true"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the progress is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'labelWrapper' | 'label' | 'track' | 'value' | 'indicator', string>>",
      description: "Allows to set custom class names for the progress slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: progress.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\progress.mdx) ---

---
title: "Radio"
description: "Radio Group allow users to select a single option from a list of mutually exclusive options"
---

import {radioGroupContent} from "@/content/components/radio-group";

# Radio group

Radio Group allow users to select a single option from a list of mutually exclusive options.

<ComponentLinks component="radiogroup" reactAriaHook="useRadioGroup" npm="radio" styles="radio" source="radio" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add radio",
    npm: "npm install @heroui/radio",
    yarn: "yarn add @heroui/radio",
    pnpm: "pnpm add @heroui/radio",
    bun: "bun add @heroui/radio"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {RadioGroup, Radio} from "@heroui/react";',
    individual: 'import {RadioGroup, Radio} from "@heroui/radio";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={radioGroupContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={radioGroupContent.disabled} />

### Default Value

<CodeDemo title="Default Value" files={radioGroupContent.defaultValue} />

### With Description

<CodeDemo title="With Description" files={radioGroupContent.withDescription} />

### Horizontal

<CodeDemo title="Horizontal" files={radioGroupContent.horizontal} />

### Controlled

You can use the `value` and `onValueChange` properties to control the radio input value.

<CodeDemo title="Controlled" files={radioGroupContent.controlled} />

> **Note**: HeroUI `Radio` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

### Invalid

<CodeDemo title="Invalid" files={radioGroupContent.invalid} />

## Slots

- RadioGroup Slots

  - **base**: Radio group root wrapper, it wraps the label and the wrapper.
  - **wrapper**: Radio group wrapper, it wraps all Radios.
  - **label**: Radio group label, it is placed before the wrapper.
  - **description**: Description slot for the radio group.
  - **errorMessage**: Error message slot for the radio group.

- Radio Slots
  - **base**: Radio root wrapper, it wraps all elements.
  - **wrapper**: Radio wrapper, it wraps the control element.
  - **hiddenInput**: The hidden input element that is used to handle the radio state.
  - **labelWrapper**: Label and description wrapper.
  - **label**: Label slot for the radio.
  - **control**: Control element, it is the circle element.
  - **description**: Description slot for the radio.

### Custom Styles

You can customize the `RadioGroup` and `Radio` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={radioGroupContent.customStyles} />

### Custom Implementation

In case you need to customize the radio group even further, you can use the `useRadio` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={radioGroupContent.customImpl} />

<Spacer y={4} />

## Data Attributes

- RadioGroup has the following attributes on the `base` element:

  - **data-orientation**:
    The orientation of the radio group. Based on `orientation` prop.

- Radio has the following attributes on the `base` element:

  - **data-selected**:
    When the radio is checked. Based on `isSelected` prop.
  - **data-pressed**:
    When the radio is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).
  - **data-invalid**:
    When the radio is invalid. Based on `validationState` prop.
  - **data-readonly**:
    When the radio is readonly. Based on `isReadOnly` prop.
  - **data-hover-unselected**:
    When the radio is being hovered and unchecked. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
  - **data-hover**:
    When the radio is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
  - **data-focus**:
    When the radio is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
  - **data-focus-visible**:
    When the radio is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
  - **data-disabled**:
    When the radio is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Radio groups are exposed to assistive technology via ARIA.
- Each radio is built with a native HTML `<input>` element, which can be optionally visually hidden to allow custom styling.
- Full support for browser features like form autofill.
- Keyboard event support for arrows keys.
- Keyboard focus management and cross browser normalization.
- Group and radio labeling support for assistive technology.

<Spacer y={4} />

## API

### RadioGroup Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode | ReactNode[]", 
      description: "The list of radio elements.",
      default: "-"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The label of the radio group.",
      default: "-"
    },
    {
      attribute: "size", 
      type: "sm | md | lg",
      description: "The size of the radios.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the radios.",
      default: "primary"
    },
    {
      attribute: "orientation",
      type: "horizontal | vertical",
      description: "The orientation of the radio group.",
      default: "vertical"
    },
    {
      attribute: "name",
      type: "string",
      description: "The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).",
      default: "-"
    },
    {
      attribute: "value",
      type: "string[]",
      description: "The current selected value. (controlled)",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string[]", 
      description: "The default selected value. (uncontrolled)",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "Radio group description.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "Radio group error message.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: string) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the radio group is disabled.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean", 
      description: "Whether user checkboxes are required on the input before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the checkboxes can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the radio group is invalid.",
      default: "false"
    },
    {
      attribute: "validationState",
      type: "valid | invalid",
      description: "Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the animation should be disabled.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"label\", string>>",
      description: "Allows to set custom class names for the radio group slots.",
      default: "-"
    }
  ]}
/>

### RadioGroup Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "((value: string) => void)",
      description: "Handler that is called when the value changes.",
      default: "-"
    }
  ]}
/>

### Radio Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The label of the radio.",
      default: "-"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The label of the radio.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the radio.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the radio.",
      default: "primary"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the field. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the radio is disabled.",
      default: "false"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user checkboxes are required on the input before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the checkboxes can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the radio is invalid. This is based on the radio group validationState prop.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the animation should be disabled.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"labelWrapper\" | \"label\" | \"control\" | \"description\", string>>",
      description: "Allows to set custom class names for the radio slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: radio-group.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\radio-group.mdx) ---

---
title: "Range Calendar"
description: "The Range Calendar component is used to display one or more date grids and allows users to select a contiguous range of dates."
---

import {rangeCalendarContent} from "@/content/components/range-calendar";

# Range Calendar

A range calendar consists of a grouping element containing one or more date grids (e.g. months), and a previous and next button for navigating through time. Each calendar grid consists of cells containing button elements that can be pressed and navigated to using the arrow keys to select a date range. Once a start date is selected, the user can navigate to another date using the keyboard or by hovering over it, and clicking it or pressing the Enter key commits the selected date range.

<ComponentLinks component="calendar" storybook="rangecalendar" reactAriaHook="useCalendar" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add calendar",
    npm: "npm install @heroui/calendar",
    yarn: "yarn add @heroui/calendar",
    pnpm: "pnpm add @heroui/calendar",
    bun: "bun add @heroui/calendar",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {RangeCalendar} from "@heroui/react";',
    individual: 'import {RangeCalendar} from "@heroui/calendar";',
  }}
/>

## Usage

A RangeCalendar has no selection by default. An initial, uncontrolled value can be provided to the RangeCalendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the `value` prop.

Date values are provided using objects in the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) package. This library handles correct international date manipulation across calendars, time zones, and other localization concerns.

<CodeDemo title="Usage" files={rangeCalendarContent.usage} />

### Disabled

The `isDisabled` boolean prop makes the Calendar disabled. Cells cannot be focused or selected.

<CodeDemo title="Disabled" files={rangeCalendarContent.disabled} />

### Read Only

The `isReadOnly` boolean prop makes the Calendar's value immutable. Unlike `isDisabled`, the Calendar remains focusable.

<CodeDemo title="Read Only" files={rangeCalendarContent.readonly} />

### Controlled

A Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the value prop.

<CodeDemo title="Controlled" files={rangeCalendarContent.controlled} />

### Min Date Value

By default, Calendar allows selecting any date. The `minValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates after today.

<CodeDemo title="Min Date Value" files={rangeCalendarContent.minDateValue} />

### Max Date Value

By default, Calendar allows selecting any date. The `maxValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates before today.

<CodeDemo title="Max Date Value" files={rangeCalendarContent.maxDateValue} />

### Unavailable Dates

Calendar supports marking certain dates as unavailable. These dates remain focusable with the keyboard so that navigation is consistent, but cannot be selected by the user. In this example, they are displayed in red. The `isDateUnavailable` prop accepts a callback that is called to evaluate whether each visible date is unavailable.

<CodeDemo title="Unavailable Dates" files={rangeCalendarContent.unavailableDates} />

### Non-Contiguous Ranges

The `allowsNonContiguousRanges` prop enables a range to be selected even if there are unavailable dates in the middle. The value emitted in the onChange event will still be a single range with a start and end property, but unavailable dates will not be displayed as selected. It is up to applications to split the full selected range into multiple as needed for business logic.

This example prevents selecting weekends, but allows selecting ranges that span multiple weeks.

<CodeDemo title="Unavailable Dates" files={rangeCalendarContent.nonContiguousRanges} />

### Controlled Focused Value

Calendar tries to avoid allowing the user to select invalid dates in the first place. However, if according to application logic a selected date is invalid, the isInvalid prop can be set. This alerts assistive technology users that the selection is invalid, and can be used for styling purposes as well. In addition, the errorMessage slot may be used to help the user fix the issue.

By default, the selected date is focused when a Calendar first mounts. If no `value` or `defaultValue` prop is provided, then the current date is focused. However, Calendar supports controlling which date is focused using the `focusedValue` and `onFocusChange` props. This also determines which month is visible. The `defaultFocusedValue` prop allows setting the initial focused date when the Calendar first mounts, without controlling it.

<CodeDemo title="Controlled Focused Value" files={rangeCalendarContent.controlledFocusedValue} />

### Invalid Date

This example validates that the selected date is a weekday and not a weekend according to the current locale.

<CodeDemo title="Invalid Date" files={rangeCalendarContent.invalidDate} />

### With Month And Year Picker

Calendar supports month and year picker for rapid selection. You can enable this feature by setting `showMonthAndYearPickers` to `true`. However, if `visibleMonths` is set to a number greater than 1, this feature will be disabled.

<CodeDemo title="With Month And Year Picker" files={rangeCalendarContent.withMonthAndYearPicker} />

### International Calendars

Calendar supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the `Provider` component.

<CodeDemo title="International Calendars" files={rangeCalendarContent.internationalCalendars} />

### Visible Months

By default, the Calendar displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time.

<CodeDemo title="Visible Months" files={rangeCalendarContent.visibleMonths} />

### Custom first day of week

By default, the first day of the week is automatically set based on the current locale. This can be changed by setting the `firstDayOfWeek` prop to `'sun'`, `'mon'`, `'tue'`, `'wed'`, `'thu'`, `'fri'`, or `'sat'`.

<CodeDemo title="Custom first day of week" files={rangeCalendarContent.firstDayOfWeek} />

### Page Behaviour

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behaviour" files={rangeCalendarContent.pageBehaviour} />

### Presets

Here's the example to customize `topContent` and `bottomContent` to have some preset values.

<CodeDemo title="Presets" files={rangeCalendarContent.presets} />

## Slots

- **base**: Calendar wrapper, it handles alignment, placement, and general appearance.
- **prevButton**: The previous button of the calendar.
- **nextButton**: The next button of the calendar.
- **headerWrapper**: Wraps the picker (month / year).
- **header**: The header element.
- **title**: A description of the visible date range, for use in the calendar title.
- **gridWrapper**: The wrapper for the calendar grid.
- **grid**: The date grid element (e.g. `<table>`).
- **gridHeader**: The date grid header element (e.g. `<th>`).
- **gridHeaderRow**: The date grid header row element (e.g. `<tr>`).
- **gridHeaderCell**: The date grid header cell element (e.g. `<td>`).
- **gridBody**: The date grid body element (e.g. `<tbody>`).
- **gridBodyRow**: The date grid body row element (e.g. `<tr>`).
- **cell**: The date grid cell element (e.g. `<td>`).
- **cellButton**: The button element within the cell.
- **pickerWrapper**: The wrapper for the picker
- **pickerMonthList**: The month list picker.
- **pickerYearList**: The year list picker.
- **pickerHighlight**: The highlighted item of the picker.
- **pickerItem**: The item of the picker.
- **helperWrapper**: The helper message of the calendar.
- **errorMessage**: The error message of the calendar.

<Spacer y={4} />

## Data Attributes

`Calendar` has the following attributes on the `CalendarCell` element:

- **data-focused**:
  Whether the cell is focused.
- **data-hovered**:
  Whether the cell is currently hovered with a mouse.
- **data-pressed**:
  Whether the cell is currently being pressed.
- **data-unavailable**:
  Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they are unavailable, such as a different color or a strikethrough.
- **data-disabled**:
  Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.
- **data-focus-visible**:
  Whether the cell is keyboard focused.
- **data-outside-visible-range**:
  Whether the cell is outside the visible range of the calendar.
- **data-outside-month**:
  Whether the cell is outside the current month.
- **data-selected**:
  Whether the cell is selected.
- **data-selected-start**:
  Whether the cell is the first date in a range selection.
- **data-selected-end**:
  Whether the cell is the last date in a range selection.
- **data-invalid**:
  Whether the cell is part of an invalid selection.

<Spacer y={4} />

## Accessibility

- Display one or more months at once, or a custom time range for use cases like a week view. Minimum and maximum values, unavailable dates, and non-contiguous selections are supported as well.
- Support for 13 calendar systems used around the world, including Gregorian, Buddhist, Islamic, Persian, and more. Locale-specific formatting, number systems, and right-to-left support are available as well.
- Calendar cells can be navigated and selected using the keyboard, and localized screen reader messages are included to announce when the selection and visible date range change.

<Spacer y={4} />

## API

### RangeCalendar Props

<APITable
  data={[
    {
      attribute: "value",
      type: "RangeValue",
      description: "The current value (controlled).",
      default: "null"
    },
    {
      attribute: "defaultValue",
      type: "RangeValue",
      description: "The default value (uncontrolled).",
      default: "null"
    },
    {
      attribute: "minValue",
      type: "DateValue",
      description: "The minimum allowed date that a user may select.",
      default: "-"
    },
    {
      attribute: "maxValue", 
      type: "DateValue",
      description: "The maximum allowed date that a user may select.",
      default: "-"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the time input.",
      default: "default"
    },
    {
      attribute: "visibleMonths",
      type: "number",
      description: "The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the showMonthAndYearPickers prop.",
      default: "1"
    },
    {
      attribute: "firstDayOfWeek",
      type: "sun | mon | tue | wed | thu | fri | sat",
      description: "The day that starts the week.",
      default: "-"
    },
    {
      attribute: "focusedValue",
      type: "DateValue",
      description: "Controls the currently focused date within the calendar.",
      default: "-"
    },
    {
      attribute: "defaultFocusedValue",
      type: "DateValue", 
      description: "The date that is focused when the calendar first mounts (uncountrolled).",
      default: "-"
    },
    {
      attribute: "calendarWidth",
      type: "number | string",
      description: "The width to be applied to the calendar component. This value is multiplied by the visibleMonths number to determine the total width of the calendar.",
      default: "256"
    },
    {
      attribute: "pageBehavior",
      type: "PageBehavior",
      description: "Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.",
      default: "visible"
    },
    {
      attribute: "weekdayStyle",
      type: "narrow | short | long",
      description: "The style of weekday names to display in the calendar grid header.",
      default: "narrow"
    },
    {
      attribute: "showMonthAndYearPickers",
      type: "boolean",
      description: "Whether to show month and year pickers.",
      default: "false"
    },
    {
      attribute: "allowsNonContiguousRanges",
      type: "boolean",
      description: "When combined with isDateUnavailable, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the calendar is disabled.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the calendar value is immutable.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the current selection is invalid according to application logic.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether to automatically focus the calendar when it mounts.",
      default: "false"
    },
    {
      attribute: "showHelper",
      type: "boolean",
      description: "Whether to show the description or error message.",
      default: "false"
    },
    {
      attribute: "showShadow",
      type: "boolean",
      description: "Whether to show the shadow in the selected dates.",
      default: "false"
    },
    {
      attribute: "topContent",
      type: "ReactNode",
      description: "Custom content to be included in the top of the calendar.",
      default: "-"
    },
    {
      attribute: "bottomContent",
      type: "ReactNode",
      description: "Custom content to be included in the bottom of the calendar.",
      default: "-"
    },
    {
      attribute: "isDateUnavailable",
      type: "(date: DateValue) => boolean",
      description: "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
      default: "-"
    },
    {
      attribute: "createCalendar",
      type: "(calendar: SupportedCalendars) => Calendar | null",
      description: "This function helps to reduce the bundle size by providing a custom calendar system.",
      default: "all calendars"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | (v: ValidationResult) => ReactNode",
      description: "An error message for the field.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "hideDisabledDates",
      type: "boolean",
      description: "Whether to hide the disabled or invalid dates.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation of the calendar.",
      default: "false"
    }
  ]}
/>

### RangeCalendar Events

<APITable
  data={[
    {
      attribute: "onFocusChange",
      type: "(date: CalendarDate) => void",
      description: "Handler that is called when the focused date changes.",
      default: "-"
    },
    {
      attribute: "onChange",
      type: "(value: RangeValue<DateValue> | null) => void",
      description: "Handler that is called when the value changes.",
      default: "-"
    }
  ]}
/>

#### Supported Calendars

```ts
/**
 * Supported react-aria i18n calendars.
 */
export type SupportedCalendars =
  | "buddhist"
  | "ethiopic"
  | "ethioaa"
  | "coptic"
  | "hebrew"
  | "indian"
  | "islamic-civil"
  | "islamic-tbla"
  | "islamic-umalqura"
  | "japanese"
  | "persian"
  | "roc"
  | "gregory";
```


--- Содержимое из файла: range-calendar.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\range-calendar.mdx) ---

---
title: "Scroll Shadow"
description: "Applies top and bottom shadows when content overflows on scroll."
---

import {scrollShadowContent} from "@/content/components/scroll-shadow";

# Scroll Shadow

Applies top and bottom shadows when content overflows on scroll.

<ComponentLinks component="scroll-shadow" storybook="scrollshadow" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add scroll-shadow",
    npm: "npm install @heroui/scroll-shadow",
    yarn: "yarn add @heroui/scroll-shadow",
    pnpm: "pnpm add @heroui/scroll-shadow",
    bun: "bun add @heroui/scroll-shadow"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {ScrollShadow} from "@heroui/react";',
    individual: 'import {ScrollShadow} from "@heroui/scroll-shadow";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={scrollShadowContent.usage} />

### Hide Scrollbar

You can use the `hideScrollBar` property to hide vertical and horizontal scrollbars.

<CodeDemo title="Hide Scrollbar" files={scrollShadowContent.hideScrollbar} />

### Custom Shadow Size

By default, the shadow size is `40` in pixels, but you can change it using the `size` property.

<CodeDemo title="Custom Shadow Size" files={scrollShadowContent.customSize} />

### Horizontal Orientation

In case you need to apply the shadow on the horizontal scroll, you can set the `orientation` property to `horizontal`.

<CodeDemo title="Horizontal Orientation" files={scrollShadowContent.horizontal} />

### Shadow Offset

By default the shadow offset is `0` in pixels, but you can change it using the `offset` property. This allows you to apply the shadow on
a specific position.

<CodeDemo title="Shadow Offset" files={scrollShadowContent.offset} />

<Spacer y={4} />

## API

### ScrollShadow Props

<APITable
  data={[
    {
      attribute: "size",
      type: "number",
      description: "The shadow size in pixels.",
      default: "40"
    },
    {
      attribute: "offset",
      type: "number", 
      description: "The scroll offset to show the shadow in pixels.",
      default: "0"
    },
    {
      attribute: "hideScrollBar",
      type: "boolean",
      description: "Whether to hide the scrollbar or not.",
      default: "false"
    },
    {
      attribute: "orientation",
      type: "horizontal | vertical",
      description: "The scroll orientation.",
      default: "vertical"
    },
    {
      attribute: "isEnabled",
      type: "boolean",
      description: "Whether the shadow is enabled or not.",
      default: "true"
    },
    {
      attribute: "visibility",
      type: "ScrollShadowVisibility",
      description: "The shadow visibility. (controlled)",
      default: "auto"
    }
  ]}
/>

### ScrollShadow Events

<APITable
  data={[
    {
      attribute: "onVisibilityChange",
      type: "(visibility: ScrollShadowVisibility) => void",
      description: "Callback invoked when the shadow visibility changes.",
      default: "-"
    }
  ]}
/>

<Spacer y={2} />

### Types

#### Scroll Shadow Visibility

```ts
type ScrollShadowVisibility = "auto" | "top" | "bottom" | "left" | "right" | "both" | "none";
```


--- Содержимое из файла: scroll-shadow.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\scroll-shadow.mdx) ---

---
title: "Select"
description: "A select displays a collapsible list of options and allows a user to select one or more of them."
---

import {selectContent} from "@/content/components/select";

# Select

A select displays a collapsible list of options and allows a user to select one or more of them.

<ComponentLinks component="select" reactAriaHook="useSelect" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add select",
    npm: "npm install @heroui/select",
    yarn: "yarn add @heroui/select",
    pnpm: "pnpm add @heroui/select",
    bun: "bun add @heroui/select"
  }}
/>

## Import

HeroUI exports 3 select-related components:

- **Select**: The main component, which is a wrapper for the other components.
- **SelectSection**: The component that contains a group of select items.
- **SelectItem**: The component that represents a select item.

<ImportTabs
  commands={{
    main: 'import {Select, SelectSection, SelectItem} from "@heroui/react";',
    individual: 'import {Select, SelectSection, SelectItem} from "@heroui/select";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={selectContent.usage} />

### Dynamic items

Select follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" files={selectContent.dynamic} />

### Multiple Selection

You can use the `selectionMode="multiple"` property to allow multiple selection.

<CodeDemo title="Multiple Selection" files={selectContent.multiple} />

### Disabled

<CodeDemo title="Disabled" files={selectContent.disabled} />

### Disabled Items

You can disable specific items by using the `disabledKeys` property.

<CodeDemo title="Disabled Items" files={selectContent.disabledItems} />

### Required

If you pass the `isRequired` property to the select, it will have a `danger` asterisk at
the end of the label and the select will be required.

<CodeDemo title="Required" files={selectContent.required} />

### Sizes

<CodeDemo title="Sizes" files={selectContent.sizes} />

### Colors

<CodeDemo title="Colors" files={selectContent.colors} />

### Variants

<CodeDemo title="Variants" files={selectContent.variants} />

### Radius

<CodeDemo title="Radius" files={selectContent.radius} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={selectContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Start Content

You can use the `startContent` and `endContent` properties to add content to the start and end of
the select.

<CodeDemo title="Start Content" files={selectContent.startContent} />

### Item Start & End Content

Since the `Select` component uses the [Listbox](/docs/components/listbox) component under the hood, you can
use the `startContent` and `endContent` properties of the `SelectItem` component to add content to the start
and end of the select item.

<CodeDemo title="Item Start Content" files={selectContent.itemStartContent} />

### Custom Selector Icon

By default the select uses a `chevron-down` icon as the selector icon which rotates when the select is open. You can
customize this icon by passing a custom one to the `selectorIcon` property.

<CodeDemo title="Custom Selector Icon" files={selectContent.customSelectorIcon} />

> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.

### Without Scroll Shadow

Select component uses the [ScrollShadow](/docs/components/scroll-shadow) under the hood to show a shadow when the select content is scrollable.
You can disable this shadow by passing using the `scrollShadowProps` property.

<CodeDemo title="Without Scroll Shadow" files={selectContent.withoutScrollShadow} />

> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.

### With Description

You can add a description to the select by passing the `description` property.

<CodeDemo title="With Description" files={selectContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid select.

<CodeDemo title="With Error Message" files={selectContent.errorMessage} />

### Controlled

You can use the `selectedKeys` and `onSelectionChange` / `onChange` properties to control the select value.

Using `onSelectionChange`:

<CodeDemo title="Controlled with onSelectionChange" files={selectContent.singleControlled} />

Using `onChange`:

<CodeDemo title="Controlled with onChange" files={selectContent.singleControlledOnChange} />

### Controlling the open state

You can control the open state of the select by using the `isOpen` and `onOpenChange` / `onClose` properties.

<CodeDemo title="Controlling the open state" files={selectContent.openState} />

### Custom Items

You can customize the select items by modifying the `SelectItem` children.

<CodeDemo title="Custom Items" files={selectContent.customItems} />

### Custom Render Value

By default the select will render the selected item's text value, but you can customize this by passing a `renderValue` function.

<CodeDemo title="Custom Render Value" files={selectContent.customRenderValue} />

The `renderValue` function receives the selected items as a parameter and must return a
`ReactNode`. Check the [Render Value Function](#render-value-function) section for more details.

### Asynchronous Loading

Select supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.

The `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.

<PackageManagers
  commands={{
    npm: "npm install @heroui/use-infinite-scroll",
    yarn: "yarn add @heroui/use-infinite-scroll",
    pnpm: "pnpm add @heroui/use-infinite-scroll",
  }}
/>

```jsx
import {useInfiniteScroll} from "@heroui/use-infinite-scroll";
```

<Spacer y={2} />

<CodeDemo
  asIframe
  typescriptStrict={true}
  title="Asynchronous Loading"
  hideWindowActions={true}
  resizeEnabled={false}
  displayMode="always"
  files={selectContent.asyncLoadingItems}
  previewHeight="400px"
  iframeSrc="/examples/select/async-items-loading"
/>


### Virtualization

Select supports virtualization, which allows efficient rendering of large lists by only rendering items that are visible in the viewport. You can enable virtualization by setting the `isVirtualized` prop to `true`.

<CodeDemo
  title="Virtualization"
  files={selectContent.virtualization}
/>

> **Note**: The virtualization strategy is based on the [@tanstack/react-virtual](https://tanstack.com/virtual/latest) package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.

#### Ten Thousand Items

Here's an example of using virtualization with 10,000 items.

<CodeDemo title="Ten Thousand Items" files={selectContent.virtualizationTenThousand} />

#### Max Listbox Height

The `maxListboxHeight` prop is used to set the maximum height of the listbox. This is required when using virtualization. By default, it's set to `256`.

<CodeDemo title="Max Listbox Height" files={selectContent.virtualizationMaxListboxHeight} />

#### Custom Item Height

The `itemHeight` prop is used to set the height of each item in the listbox. This is required when using virtualization. By default, it's set to `32`.

> **Note**: If the height of the list items differs from the default due to `startContent` or other custom content, be sure to pass the correct value to `itemHeight` to prevent layout issues.

<CodeDemo title="Custom Item Height" files={selectContent.virtualizationCustomItemHeight} />

### With Sections

You can use the `SelectSection` component to group select items.

<CodeDemo title="With Sections" files={selectContent.sections} />

### Custom Sections Style

You can customize the sections style by using the `classNames` property of the `SelectSection` component.

<CodeDemo title="Custom Sections Style" files={selectContent.customSectionsStyle} />

### Multiple Select Controlled

You can use the same properties as the single select to control the multiple select, `selectedKeys` and `onSelectionChange` / `onChange`.

Using `onSelectionChange`:

<CodeDemo
  title="Multiple Selection Controlled with onSelectionChange"
  files={selectContent.multipleControlled}
/>

Using `onChange`:

<CodeDemo
  title="Multiple Selection Controlled with onChange"
  files={selectContent.multipleControlledOnChange}
/>

### Multiple With Chips

You can render any component as the select value by using the `renderValue` property. In this example we are
using the [Chip](/docs/components/chip) component to render the selected items.

<CodeDemo title="Multiple Selection with Chips" files={selectContent.multipleWithChips} />

> **Note**: Make sure to pass the `isMultiline` property to the `Select` component to allow the chips to wrap.

The `renderValue` function receives the selected items as a parameter and must return a
`ReactNode`. Check the [Render Value Function](#render-value-function) section for more details.

### Customizing the select

You can customize any slot of the select by using the `classNames` property. Select
component also provides the [popoverProps](/docs/components/popover#api) and [listboxProps](/docs/components/listbox#api) properties to customize
the popover and listbox components.

<CodeDemo title="Custom Styles" files={selectContent.customStyles} />


### Using `value` attribute in option

The [`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#value) attribute is not directly supported in `SelectItem`. Instead, the `key` property should be used to set the `value` to be submitted in forms.

If you need to submit a specific `value` instead of the `key` during form submission, consider implementing a lookup map in your application.

## Slots

- **base**: The main wrapper of the select. This wraps the rest of the slots.
- **label**: The label of the select.
- **mainWrapper**: Wraps the `helperWrapper` and the `trigger` slots.
- **trigger**: The trigger of the select. This wraps the label the inner wrapper and the selector icon.
- **innerWrapper**: The wrapper of the select content. This wraps the start/end content and the select value.
- **selectorIcon**: The selector icon of the select. This is the icon that rotates when the select is open (`data-open`).
- **value**: The select value. This is also the slot that wraps the `renderValue` function result.
- **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.
- **listbox**: The listbox component. This is the component that wraps the select items.
- **popoverContent**: The popover content slot. Use this to modify the popover content styles.
- **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.
- **description**: The description of the select.
- **errorMessage**: The error message of the select.

## Data Attributes

`Select` has the following attributes on the `base` element:

- **data-filled**:
  Indicates if the select has a value, is focused, has start/end content or is open.
- **data-has-value**:
  Indicates if the select has selected item(s).
- **data-has-label**:
  Indicates if the select has a label. Based on `label` prop.
- **data-has-helper**:
  Indicates if the select has helper text. Based on `errorMessage` or `description` prop.
- **data-invalid**:
  Indicates if the select is invalid. Based on `isInvalid` prop.

`Select` has the following attributes on the `trigger` element:

- **data-open**:
  Indicates if the select is open.
- **data-disabled**:
  When the select trigger is disabled. Based on select `isDisabled` prop.
- **data-focus**:
  When the select trigger is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the select trigger is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-pressed**:
  When the select trigger is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-hover**:
  When the select trigger is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)

`Select` has the following attributes on the `selectorIcon` element:

- **data-open**:
  Indicates if the select is open.

`SelectItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the select item is disabled. Based on select `disabledKeys` prop.
- **data-selected**:
  When the select item is selected. Based on select `selectedKeys` prop.
- **data-hover**:
  When the select item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the select item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the select item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the select item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a button with a listbox popup using ARIA (combined with [Listbox](/docs/components/listbox)).
- Support for selecting a single option.
- Support for selecting multiple options.
- Support for disabled options.
- Support for sections.
- Labeling support for accessibility.
- Support for description and error message help text linked to the input via ARIA.
- Support for mouse, touch, and keyboard interactions.
- Tab stop focus management.
- Keyboard support for opening the listbox using the arrow keys, including automatically focusing the first or last item accordingly.
- Typeahead to allow selecting options by typing text, even without opening the listbox.
- Browser autofill integration via a hidden native `<select>` element.
- Mobile screen reader listbox dismissal support.

<Spacer y={4} />

## API

### Select Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually a list of SelectItem and SelectSection elements.",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "Item objects in the select. (dynamic)",
      default: "-"
    },
    {
      attribute: "selectionMode",
      type: "single | multiple",
      description: "The type of selection that is allowed in the collection.",
      default: "-"
    },
    {
      attribute: "selectedKeys",
      type: "all | Iterable<React.Key>",
      description: "The currently selected keys in the collection (controlled).",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "Iterable<React.Key>",
      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      default: "-"
    },
    {
      attribute: "defaultSelectedKeys",
      type: "all | Iterable<React.Key>",
      description: "The initial selected keys in the collection (uncontrolled).",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the select.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the select.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the select.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the select.",
      default: "-"
    },
    {
      attribute: "placeholder",
      type: "string",
      description: "The placeholder of the select.",
      default: "Select an option"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the select. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "An error message for the select.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the select.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the select.",
      default: "-"
    },
    {
      attribute: "selectorIcon",
      type: "ReactNode",
      description: "Element to be rendered as the selector icon.",
      default: "-"
    },
    {
      attribute: "scrollRef",
      type: "React.RefObject<HTMLElement>",
      description: "A ref to the scrollable element.",
      default: "-"
    },
    {
      attribute: "spinnerRef",
      type: "React.RefObject<HTMLElement>",
      description: "A ref to the spinner element.",
      default: "-"
    },
    {
      attribute: "maxListboxHeight",
      type: "number",
      description: "The maximum height of the listbox in pixels. Required when using virtualization.",
      default: "256"
    },
    {
      attribute: "itemHeight",
      type: "number",
      description: "The fixed height of each item in pixels. Required when using virtualization.",
      default: "32"
    },
    {
      attribute: "isVirtualized",
      type: "boolean",
      description: "Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.",
      default: "undefined"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the select should take up the width of its parent.",
      default: "true"
    },
    {
      attribute: "isOpen",
      type: "boolean",
      description: "Whether the select is open by default (controlled).",
      default: "-"
    },
    {
      attribute: "defaultOpen",
      type: "boolean",
      description: "Whether the select is open by default (uncontrolled).",
      default: "-"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user select is required on the select before form submission.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the select is disabled.",
      default: "false"
    },
    {
      attribute: "isMultiline",
      type: "boolean",
      description: "Whether the select should allow multiple lines of text.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the select is invalid.",
      default: "false"
    },
    {
      attribute: "validationState",
      type: "valid | invalid",
      description: "Whether the select should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
      default: "-"
    },
    {
      attribute: "showScrollIndicators",
      type: "boolean",
      description: "Whether the select should show scroll indicators when the listbox is scrollable.",
      default: "true"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the select should be focused on the first mount.",
      default: "false"
    },
    {
      attribute: "disallowEmptySelection",
      type: "boolean",
      description: "Whether the collection allows empty selection.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the select should be animated.",
      default: "true"
    },
    {
      attribute: "disableSelectorIconRotation",
      type: "boolean",
      description: "Whether the select should disable the rotation of the selector icon.",
      default: "false"
    },
    {
      attribute: "hideEmptyContent",
      type: "boolean",
      description: "Whether the listbox will be prevented from opening when there are no items.",
      default: "false"
    },
    {
      attribute: "popoverProps",
      type: "PopoverProps",
      description: "Props to be passed to the popover component.",
      default: "-"
    },
    {
      attribute: "listboxProps",
      type: "ListboxProps",
      description: "Props to be passed to the listbox component.",
      default: "-"
    },
    {
      attribute: "scrollShadowProps",
      type: "ScrollShadowProps",
      description: "Props to be passed to the scroll shadow component.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\"｜ \"label\"｜ \"trigger\"｜ \"mainWrapper\" ｜ \"innerWrapper\"｜ \"selectorIcon\" ｜ \"value\" ｜ \"listboxWrapper\"｜ \"listbox\" ｜ \"popoverContent\" ｜ \"helperWrapper\" ｜ \"description\" ｜ \"errorMessage\", string>>",
      description: "Allows to set custom class names for the Select slots.",
      default: "-"
    }
  ]}
/>

### Select Events

<APITable
  data={[
    {
      attribute: "onClose",
      type: "() => void",
      description: "Callback fired when the select popover is closed.",
      default: "-"
    },
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Callback fired when the select popover is opened or closed.",
      default: "-"
    },
    {
      attribute: "onSelectionChange",
      type: "(keys: \"all\" | Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void",
      description: "Callback fired when the selected keys change.",
      default: "-"
    },
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLSelectElement>",
      description: "Native select change event, fired when the selected value changes.",
      default: "-"
    },
    {
      attribute: "renderValue",
      type: "RenderValueFunction",
      description: "Function to render the value of the select. It renders the selected item by default.",
      default: "-"
    }
  ]}
/>

---

### SelectItem Props

Check the [ListboxItem](/docs/components/listbox#listboxitem-props) props.

### SelectItem Events

Check the [ListboxItem](/docs/components/listbox#listboxitem-events) events.

### SelectSection Props

Check the [ListboxSection](/docs/components/listbox#listboxsection-props) props.

---

### Types

#### Render Value Function

The `T` type is the type of the data passed to the select `items`.

```tsx
export type SelectedItemProps<T> = {
  /** A unique key for the item. */
  key?: Key;
  /** The props passed to the item. */
  props?: Record<string, any>;
  /** The item data. */
  data?: T | null;
  /** An accessibility label for this item. */
  "aria-label"?: string;
  /** The rendered contents of this item (e.g. JSX). */
  rendered?: ReactNode;
  /** A string value for this item, used for features like typeahead. */
  textValue?: string;
  /** The type of item this item represents. */
  type?: string;
};

type SelectedItems<T> = Array<SelectedItemProps<T>>;

renderValue: (items: SelectedItems<T>) => ReactNode;
```


--- Содержимое из файла: select.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\select.mdx) ---

---
title: "Skeleton"
description: "Skeleton is a placeholder to show a loading state and the expected shape of a component."
---

import {skeletonContent} from "@/content/components/skeleton";

# Skeleton

Skeleton is a placeholder to show a loading state and the expected shape of a component.

<ComponentLinks component="skeleton" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add skeleton",
    npm: "npm install @heroui/skeleton",
    yarn: "yarn add @heroui/skeleton",
    pnpm: "pnpm add @heroui/skeleton",
    bun: "bun add @heroui/skeleton"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Skeleton} from "@heroui/react";',
    individual: 'import {Skeleton} from "@heroui/skeleton";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={skeletonContent.usage} />

### Standalone

Skeleton takes the shape of its `children` component by default, but you can also use
it as a standalone component.

<CodeDemo title="Standalone" files={skeletonContent.standalone} />

### Loaded State

You can use the `isLoaded` prop to stop the skeleton animation and show the children component.

<CodeDemo title="Loaded State" files={skeletonContent.loaded} />

## Slots

- **base**: The base slot of the skeleton, it contains the `before` and `after` pseudo elements to create the animation.
- **content**: The wrapped component to show the skeleton shape. It is visible only when the `isLoaded` prop is `true`.

<Spacer y={4}/>  

## Data Attributes

`Skeleton` has the following attributes on the `base` element:

- **data-loaded**:
  Indicates the loaded state of the skeleton. Based on the `isLoaded` prop.

<Spacer y={4}/>  

## API

### Skeleton Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the skeleton.",
      default: "-"
    },
    {
      attribute: "isLoaded", 
      type: "boolean",
      description: "Whether the skeleton is loaded.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean", 
      description: "Whether to disable the animations.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"content\", string>>",
      description: "Allows to set custom class names for the skeleton slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: skeleton.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\skeleton.mdx) ---

---
title: "Slider"
description: "A slider allows a user to select one or more values within a range."
---

import {sliderContent} from "@/content/components/slider";

# Slider

A slider allows a user to select one or more values within a range.

<ComponentLinks component="slider" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add slider",
    npm: "npm install @heroui/slider",
    yarn: "yarn add @heroui/slider",
    pnpm: "pnpm add @heroui/slider",
    bun: "bun add @heroui/slider"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Slider} from "@heroui/react";',
    individual: 'import {Slider} from "@heroui/slider";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={sliderContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={sliderContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={sliderContent.sizes} />

### Radius

<CodeDemo title="Radius" files={sliderContent.radius} />

### Colors

<CodeDemo title="Sizes" files={sliderContent.colors} />

### Vertical Slider

It is possible to change the orientation of the slider by using the `orientation="vertical"` prop.

<CodeDemo title="With Steps Markers" files={sliderContent.vertical} />

### With Visible Steps

You can use the `showSteps` prop to display small dots on each step.

<CodeDemo title="With Visible Steps" files={sliderContent.visibleSteps} />

### With Marks

You can use the `marks` prop to display a label on each step.

<CodeDemo title="With Marks" files={sliderContent.marks} />

### Range Slider

If you pass an array of values to the `value` prop or to the `defaultValue` prop, the slider will become a range slider.

<CodeDemo title="Range Slider" files={sliderContent.range} />

### Fill Offset

The `fillOffset` prop allows you to set where the fill should start.

<CodeDemo title="Fill Offset" files={sliderContent.fillOffset} />

### With Tooltip

The `showTooltip` prop allows you to show a tooltip with the current thumb value when the user hovers or drags the thumb.

<CodeDemo title="With Tooltip" files={sliderContent.tooltip} />

> **Note:** You can change any of the tooltip props by passing the `tooltipProps` to the `Slider` component.

### With Outline

It is possible to add a small outline to the slider's thumbs by passing the `showOutline` prop.

<CodeDemo title="With Outline" files={sliderContent.outline} />

### Start & End Content

Slider component provides `startContent` and `endContent` props that allows you to add any `ReactNode` to the start and end of the slider.

<CodeDemo title="Start & End Content" files={sliderContent.startEndContent} />

### Value Formatting

Values are formatted as a percentage by default, but this can be modified by using the
`formatOptions` prop to specify a different format. `formatOptions` is compatible with
the option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)
and is applied based on the current locale.

<CodeDemo title="Value Formatting" files={sliderContent.valueFormatting} />

> **Note:** Use the `tooltipValueFormatOptions` prop to format the tooltip value.

It is also possible to format the value using the `getValue` prop.

<CodeDemo title="Value Formatting (Get value)" files={sliderContent.getValue} />

### Hiding the Value

The Slider value is shown by default, but can be hidden by passing the `hideValue` prop.

<CodeDemo title="Hiding the Value" files={sliderContent.hideValue} />

### Hiding the Thumbs

The Slider thumbs are shown by default, but can be hidden by passing the `hideThumb` prop.

<CodeDemo title="Hiding the Thumbs" files={sliderContent.hideThumb} />

### Controlled

You can control the slider by passing the `value` and `onChange` props.

<CodeDemo title="Controlled" files={sliderContent.controlled} />

If you want to capture the slider value only when the user stops dragging the thumb, you can use the `onChangeEnd` prop.

<CodeDemo title="Controlled Change End" files={sliderContent.controlledChangeEnd} />

### Controlled Range

You can also control the range slider by using an array of values in the `value` and `onChange` props.

<CodeDemo title="Controlled Range" files={sliderContent.controlledRange} />

### Custom Thumb

The Slider component provides a `renderThumb` prop that allows you to customize the thumb in any way you want.

<CodeDemo title="Custom Thumb" files={sliderContent.renderThumb} />

### Custom Range Thumbs

You can also use the `renderThumb` prop to customize the thumbs of a range slider. The `index` prop will tell you which thumb is being rendered.

<CodeDemo title="Custom Range Thumbs" files={sliderContent.renderRangeThumb} />

### Custom Label

The Slider component provides a `renderLabel` prop that allows you to customize the label in any way you want.

<CodeDemo title="Custom Label" files={sliderContent.renderLabel} />

### Custom Value

The Slider component provides a `renderValue` prop that allows you to customize the value label element.

<CodeDemo title="Custom Value" files={sliderContent.renderValue} />

### Disabling Thumb Scale

In case you want to disable the thumb scale animation, you can pass the `disableThumbScale` prop.

<CodeDemo title="Disabling Thumb Scale" files={sliderContent.disableThumbScale} />

## Slots

- **base**: The foundational slot, encompassing all other slots and elements. It serves as the primary container.
- **labelWrapper**: The container for the Slider's label and value. It aligns these elements and ensures a consistent layout.
- **label**: A dedicated slot to display the Slider's label.
- **value**: Displays the current value of the Slider. Located within the `labelWrapper`.
- **step**: Represents individual steps or intervals on the Slider.
- **mark**: Denotes specific values or intervals along the Slider.
- **trackWrapper**: A container for the slider's track, ensuring it is consistently aligned and positioned.
- **track**: The base bar of the Slider, along which the thumb moves.
- **filler**: A visual representation of the selected value, filling the track from the start point to the current thumb position.
- **thumb**: The interactive element that users drag along the track to select a value on the Slider.
- **startContent**: A slot for additional content or icons at the beginning of the Slider.
- **endContent**: A slot for additional content or icons at the end of the Slider.

### Custom Styles

You can customize the `Slider` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={sliderContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Slider` has the following attributes:

- **data-hover**:
  When the slider is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-orientation**:
  The orientation of the slider. Based on `orientation` prop.

`Thumbs` have the following attributes which are returned by the `renderThumb` prop:

- **data-dragging**:
  When the thumb is being dragged.
- **data-focus-visible**:
  When the thumb is focused. Based on [useFocusVisible](https://react-spectrum.adobe.com/react-aria/useFocusVisible.html)
- **data-hover**:
  When the thumb is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the thumb is being pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)

<Spacer y={4} />

## Accessibility

- Support for one or multiple thumbs.
- Support for mouse, touch, and keyboard via the [useMove](https://react-spectrum.adobe.com/react-aria/useMove.html) hook.
- Multi-touch support for dragging multiple thumbs or multiple sliders at once.
- Pressing on the track moves the nearest thumb to that position.
- Supports using the arrow keys, as well as page up/down, home, and end keys.
- Support for both horizontal and vertical orientations.
- Support for custom min, max, and step values with handling for rounding errors.
- Support for disabling the whole slider or individual thumbs.
- Prevents text selection while dragging.
- Exposed to assistive technology as a group of slider elements via ARIA.
- Slider thumbs use hidden native input elements to support touch screen readers.
- Support for labeling both the slider as a whole and individual thumbs.
- Support for displaying the current thumb values using an `<output>` element.
- Internationalized number formatting as a percentage or value.
- Support for mirroring in RTL locales.

<Spacer y={4} />

## API

### Slider Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "name",
      type: "string", 
      description: "The name of the input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the Slider filler and thumb.",
      default: "md"
    },
    {
      attribute: "color",
      type: "foreground | primary | secondary | success | warning | danger",
      description: "The color of the filler and thumb.",
      default: "primary"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The Slider's thumbs border radius.",
      default: "full"
    },
    {
      attribute: "step",
      type: "number",
      description: "The Slider's step value.",
      default: "1"
    },
    {
      attribute: "value",
      type: "number",
      description: "The current value (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "number",
      description: "The default value (uncontrolled).",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "number",
      description: "The slider's minimum value.",
      default: "0"
    },
    {
      attribute: "maxValue",
      type: "number",
      description: "The slider's maximum value.",
      default: "100"
    },
    {
      attribute: "orientation",
      type: "horizontal | vertical",
      description: "The orientation of the Slider.",
      default: "horizontal"
    },
    {
      attribute: "fillOffset",
      type: "number",
      description: "The offset from which to start the fill.",
      default: "-"
    },
    {
      attribute: "showSteps",
      type: "boolean",
      description: "Whether to show the steps indicators.",
      default: "false"
    },
    {
      attribute: "showTooltip",
      type: "boolean",
      description: "Whether to show a tooltip with the current thumb value when the user hovers or drags the thumb.",
      default: "false"
    },
    {
      attribute: "marks",
      type: "SliderStepMarks",
      description: "The marks to display on the Slider's steps.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The content to display at the beginning of the Slider.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The content to display at the end of the Slider.",
      default: "-"
    },
    {
      attribute: "formatOptions",
      type: "Intl.NumberFormat",
      description: "The options to format the value.",
      default: "-"
    },
    {
      attribute: "tooltipValueFormatOptions",
      type: "Intl.NumberFormat",
      description: "The options to format the tooltip value.",
      default: "-"
    },
    {
      attribute: "tooltipProps",
      type: "TooltipProps",
      description: "The props to pass to the thumbs's tooltip.",
      default: "-"
    },
    {
      attribute: "showOutline",
      type: "boolean",
      description: "Whether to show a small outline around the thumbs.",
      default: "false"
    },
    {
      attribute: "hideValue",
      type: "boolean",
      description: "Whether to hide the Slider value.",
      default: "false"
    },
    {
      attribute: "hideThumb",
      type: "boolean",
      description: "Whether to hide all the Slider thumbs.",
      default: "false"
    },
    {
      attribute: "disableThumbScale",
      type: "boolean",
      description: "Whether to disable the thumb scale animation.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the whole Slider is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the Slider animations.",
      default: "false"
    }
  ]}
/>

### Slider Functions

<APITable
  data={[
    {
      attribute: "getValue",
      type: "(value: SliderValue) => string",
      description: "A function to format the value. Overrides default formatted number.",
      default: "-"
    },
    {
      attribute: "renderLabel",
      type: "(props: DOMAttributes<HTMLLabelElement>) => ReactNode",
      description: "A function to render the label.",
      default: "-"
    },
    {
      attribute: "renderValue",
      type: "(props: DOMAttributes<HTMLOutputElement>) => ReactNode",
      description: "A function to render the value.",
      default: "-"
    },
    {
      attribute: "renderThumb",
      type: "(props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode",
      description: "A function to render the thumbs. The index prop will tell you which thumb is being rendered.",
      default: "-"
    }
  ]}
/>

### Slider Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "(value: SliderValue) => void",
      description: "Callback fired when the value changes.",
      default: "-"
    },
    {
      attribute: "onChangeEnd",
      type: "(value: SliderValue) => void",
      description: "Callback fired when the value changes and the user stops dragging the thumb.",
      default: "-"
    }
  ]}
/>

### Types

#### Slider Value

```ts
export type SliderValue = number | number[];
```

#### Slider Step Marks

```ts
export type SliderStepMarks = {
  value: number;
  label: string;
}[];
```


--- Содержимое из файла: slider.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\slider.mdx) ---

---
title: "Snippet"
description: "Snippet is a component that can be used to display inline or multiline code snippets."
---

import {snippetContent} from "@/content/components/snippet";

# Snippet

Snippet is a component that can be used to display inline or multiline code snippets.

<ComponentLinks component="snippet" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add snippet",
    npm: "npm install @heroui/snippet",
    yarn: "yarn add @heroui/snippet",
    pnpm: "pnpm add @heroui/snippet",
    bun: "bun add @heroui/snippet"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Snippet} from "@heroui/react";',
    individual: 'import {Snippet} from "@heroui/snippet";',
  }}
/>

## Usage

<CodeDemo title="Snippet" files={snippetContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={snippetContent.sizes} />

### Colors

<CodeDemo title="Colors" files={snippetContent.colors} />

### Variants

<CodeDemo title="Variants" files={snippetContent.variants} />

### Custom Symbol

<CodeDemo title="Custom Symbol" files={snippetContent.symbol} />

### Without Copy

You can hide the copy button by setting the `hideCopyButton` property to `true`.

<CodeDemo title="Without Copy" files={snippetContent.withoutCopy} />

### Custom Tooltip

You can customize the tooltip by using the `tooltipProps` property.

<CodeDemo title="Custom Tooltip" highlightedLines="7-10" files={snippetContent.customTooltip} />

> **Note**: For more information about the `Tooltip` props, please visit the [Tooltip](/docs/components/tooltip) page.

### Multiline

<CodeDemo title="Multiline" files={snippetContent.multiline} />

### Custom Icons

You can customize the copy and copied icons by using the `copyIcon` and `checkIcon` properties.

<CodeDemo title="Custom Icons" highlightedLines="9-10" files={snippetContent.customIcons} />

## Slots

- **base**: The base slot of the snippet, it is the main container.
- **content**: This is the wrapper of the `<pre/>` slot.
- **pre**: The `<pre/>` slot of the snippet. It is used to wrap the code.
- **symbol**: The symbol wrapper slot.
- **copyButton**: The copy button slot.
- **copyIcon**: The copy icon slot.
- **checkIcon**: The check icon slot.

<Spacer y={4} />

## API

### Snippet Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode | ReactNode[]",
      description: "The content of the snippet.",
      default: "-"
    },
    {
      attribute: "size", 
      type: "sm | md | lg",
      description: "The size of the snippet.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg",
      description: "The radius of the snippet.",
      default: "lg"
    },
    {
      attribute: "symbol",
      type: "string | ReactNode",
      description: "The symbol to show before the snippet.",
      default: "$"
    },
    {
      attribute: "timeout",
      type: "number",
      description: "The time in milliseconds to wait before resetting the clipboard.",
      default: "2000"
    },
    {
      attribute: "codeString",
      type: "string",
      description: "The code string to copy. if codeString is passed, it will be copied instead of the children.",
      default: "-"
    },
    {
      attribute: "tooltipProps",
      type: "TooltipProps",
      description: "The props of the tooltip.",
      default: "-"
    },
    {
      attribute: "copyIcon",
      type: "ReactNode",
      description: "The copy icon.",
      default: "-"
    },
    {
      attribute: "checkIcon",
      type: "ReactNode", 
      description: "The check icon.",
      default: "-"
    },
    {
      attribute: "disableTooltip",
      type: "boolean",
      description: "Whether to disable the tooltip.",
      default: "false"
    },
    {
      attribute: "disableCopy",
      type: "boolean",
      description: "Whether to disable the copy button.",
      default: "false"
    },
    {
      attribute: "hideCopyButton",
      type: "boolean",
      description: "Whether to hide the copy button.",
      default: "false"
    },
    {
      attribute: "hideSymbol",
      type: "boolean",
      description: "Whether to hide the symbol.",
      default: "false"
    },
    {
      attribute: "copyButtonProps",
      type: "ButtonProps",
      description: "The props of the copy button.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animations.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'content' | 'pre' | 'symbol' | 'copyButton' | 'checkIcon', string>>",
      description: "Allows to set custom class names for the snippet slots.",
      default: "-"
    }
  ]}
/>

### Snippet Events

<APITable
  data={[
    {
      attribute: "onCopy",
      type: "(value: string | string[]) => void",
      description: "Handler that is called when the code is copied.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: snippet.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\snippet.mdx) ---

---
title: "Spacer"
description: "Spacer is a component used to add space between components."
---

import {spacerContent} from "@/content/components/spacer";

# Spacer

Spacer is a component used to add space between components.

<ComponentLinks component="spacer" rscCompatible />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add spacer",
    npm: "npm install @heroui/spacer",
    yarn: "yarn add @heroui/spacer",
    pnpm: "pnpm add @heroui/spacer",
    bun: "bun add @heroui/spacer"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Spacer} from "@heroui/react";',
    individual: 'import {Spacer} from "@heroui/spacer";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={spacerContent.usage} />

> **Note**: The `x` and `y` values are based on [Tailwind Spacing Scale](https://tailwindcss.com/docs/space)

<Spacer y={4}/>  

## API

### Spacer Props

<APITable
  data={[
    {
      attribute: "x",
      type: "Space",
      description: "The x axis space",
      default: "1"
    },
    {
      attribute: "y", 
      type: "Space",
      description: "The y axis space",
      default: "1"
    }
  ]}
/>

### Types

```ts
type Space = 0 | "px" | 0.5 | 1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 60 | 64 | 72 | 80 | 96;
```


--- Содержимое из файла: spacer.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\spacer.mdx) ---

---
title: "Spinner"
description: "Spinner express an unspecified wait time or display the length of a process."
---

import {spinnerContent} from "@/content/components/spinner";

# Spinner

Spinner express an unspecified wait time or display the length of a process.

<ComponentLinks component="spinner" rscCompatible />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add spinner",
    npm: "npm install @heroui/spinner",
    yarn: "yarn add @heroui/spinner",
    pnpm: "pnpm add @heroui/spinner",
    bun: "bun add @heroui/spinner"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Spinner} from "@heroui/react";',
    individual: 'import {Spinner} from "@heroui/spinner";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={spinnerContent.usage} />

> **Note**: Spinner adds `Loading` as `aria-label` by default. This is required for accessibility. You can change it by passing a `label` or `aria-label` prop.

### Sizes

<CodeDemo title="Sizes" files={spinnerContent.sizes} />

### Colors

<CodeDemo title="Colors" files={spinnerContent.colors} />

### With Label

<CodeDemo title="With Label" files={spinnerContent.label} />

### Label colors

<CodeDemo title="Label colors" files={spinnerContent.labelColors} />

### Variants

<CodeDemo title="Variants" files={spinnerContent.variants} />

## Slots

- **base**: The base slot of the spinner, it wraps the circles and the label.
- **wrapper**: The wrapper of the circles.
- **circle1**: The first circle of the spinner component. (Effective only when variant is `default` or `gradient`)
- **circle2**: The second circle of the spinner component. (Effective only when variant is `default` or `gradient`)
- **dots**: Dots of the spinner component. (Effective only when variant is `wave` or `dots`)
- **spinnerBars**: Bars of the spinner component. (Effective only when variant is `spinner`)
- **label**: The label content.

<Spacer y={4} />

## API

### Spinner Props

<APITable
  data={[
    {
      attribute: "label",
      type: "string",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "size", 
      type: "sm | md | lg",
      description: "The size of the spinner circles.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the spinner circles.",
      default: "primary"
    },
    {
      attribute: "variant",
      type: "default | simple | gradient | wave | dots | spinner",
      description: "The variant of the spinner",
      default: "default"
    },
    {
      attribute: "labelColor",
      type: "default | primary | secondary | success | warning | danger", 
      description: "The color of the label.",
      default: "default"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'wrapper' | 'circle1' | 'circle2' | 'dots' | 'spinnerBars' | 'label', string>>",
      description: "Allows to set custom class names for the spinner slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: spinner.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\spinner.mdx) ---

---
title: "Switch"
description: "The Switch component is used as an alternative between checked and not checked states."
---

import {switchContent} from "@/content/components/switch";

# Switch

The Switch component is used as an alternative between checked and not checked states.

<ComponentLinks component="switch" styles="toggle" reactAriaHook="useSwitch" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add switch",
    npm: "npm install @heroui/switch",
    yarn: "yarn add @heroui/switch",
    pnpm: "pnpm add @heroui/switch",
    bun: "bun add @heroui/switch"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Switch} from "@heroui/react";',
    individual: 'import {Switch} from "@heroui/switch";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={switchContent.usage} />

### With Label

<CodeDemo title="With Label" files={switchContent.label} />

### Disabled

<CodeDemo title="Disabled" files={switchContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={switchContent.sizes} />

### Colors

<CodeDemo title="Colors" files={switchContent.colors} />

### With Thumb Icon

<CodeDemo title="With Thumb Icon" files={switchContent.thumbIcon} />

### With Icons

You can also add icons to start and end of the switch by using `startContent` and `endContent` props.

<CodeDemo title="With Icons" files={switchContent.icons} />

### Controlled

<CodeDemo title="Controlled" files={switchContent.controlled} />

> **Note**: HeroUI `Switch` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

## Slots

- **base**: Base slot for the switch. It is the main wrapper.
- **wrapper**: The wrapper of the start icon, end icon and thumb.
- **hiddenInput**: The hidden input element that is used to handle the switch state.
- **thumb**: The thumb element of the switch. It is the circle element.
- **label**: The label slot of the switch.
- **startContent**: The icon slot at the start of the switch.
- **endContent**: The icon slot at the end of the switch.
- **thumbIcon**: The icon slot inside the thumb.

### Custom Styles

You can customize the `Switch` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={switchContent.customStyles} />

### Custom Implementation

In case you need to customize the switch even further, you can use the `useSwitch` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={switchContent.customImpl} />

<Spacer y={4} />

## Data Attributes

`Switch` has the following attributes on the `base` element:

- **data-selected**:
  When the switch is checked. Based on `isSelected` prop.
- **data-pressed**:
  When the switch is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-readonly**:
  When the switch is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the switch is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the switch is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the switch is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the switch is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Built with a native HTML `<input>` element.
- Full support for browser features like form autofill.
- Keyboard focus management and cross browser normalization.
- Keyboard event support for <Kbd>Tab</Kbd> and <Kbd>Space</Kbd> keys.
- Labeling support for assistive technology.
- Exposed as a switch to assistive technology via ARIA

<Spacer y={4} />

## API

### Switch Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The label of the switch.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string",
      description: "The value of the input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "name",
      type: "string", 
      description: "The name of the input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the switch.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the switch.",
      default: "primary"
    },
    {
      attribute: "thumbIcon",
      type: "ThumbIconProps",
      description: "The icon to be displayed when the switch is checked.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "The icon to be displayed at the start of the switch.",
      default: "-"
    },
    {
      attribute: "endContent", 
      type: "ReactNode",
      description: "The icon to be displayed at the end of the switch.",
      default: "-"
    },
    {
      attribute: "isSelected",
      type: "boolean",
      description: "Whether the element should be selected (controlled).",
      default: "-"
    },
    {
      attribute: "defaultSelected",
      type: "boolean",
      description: "Whether the element should be selected (uncontrolled).",
      default: "-"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the input can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the switch is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the animation should be disabled.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\"｜ \"wrapper\"｜ \"thumb\"｜ \"label\" ｜ \"startContent\" ｜ \"endContent\" ｜ \"thumbIcon\" , string>>",
      description: "Allows to set custom class names for the switch slots.",
      default: "-"
    }
  ]}
/>

### Switch Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing event.target.checked (boolean).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "(isSelected: boolean) => void",
      description: "Handler that is called when the element's selection state changes.",
      default: "-"
    }
  ]}
/>

### Types

#### Switch Icon Props

```ts
type IconProps = {
  "data-checked": string;
  width: string;
  height: string;
  isSelected: boolean;
  className: string;
};

type CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);
```


--- Содержимое из файла: switch.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\switch.mdx) ---

---
title: "Table"
description: "Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data."
---

import {tableContent} from "@/content/components/table";

# Table

Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.

<ComponentLinks component="table" reactHook="useTable" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add table",
    npm: "npm install @heroui/table",
    yarn: "yarn add @heroui/table",
    pnpm: "pnpm add @heroui/table",
    bun: "bun add @heroui/table"
  }}
/>


## Import

HeroUI exports 6 table-related components:

- **Table**: The main component to display a table.
- **TableHeader**: The header of the table.
- **TableBody**: The body of the table.
- **TableColumn**: The column of the table.
- **TableRow**: The row of the table.
- **TableCell**: The cell of the table.

<ImportTabs
  commands={{
    main: `import {
    Table,
    TableHeader,
    TableBody,
    TableColumn,
    TableRow,
    TableCell
} from "@heroui/react";`,
    individual: `import {
    Table,
    TableHeader,
    TableBody,
    TableColumn,
    TableRow,
    TableCell
} from "@heroui/table";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={tableContent.usage} />

### Dynamic

To render a table dynamically, you can use the `columns` prop to pass the columns and `items` prop to pass the data.

<CodeDemo title="Dynamic" files={tableContent.dynamic} />

#### Why not array map?

Using the `items` prop and providing a render function allows [react-aria](https://react-spectrum.adobe.com/react-aria/index.html)
to automatically cache the results of rendering each item and avoid re-rendering all items in the
collection when only one of them changes. This has big performance benefits for large
collections.

You could also use `Array.map` to render the items, but it will not be as performant as using the `items` and `columns` prop.

Example:

```jsx
import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@heroui/react";

const rows = [...];

const columns = [...];

export default function App() {
  return (
    <Table aria-label="Example table with dynamic content">
      <TableHeader>
        {columns.map((column) =>
          <TableColumn key={column.key}>{column.label}</TableColumn>
        )}
      </TableHeader>
      <TableBody>
        {rows.map((row) =>
          <TableRow key={row.key}>
            {(columnKey) => <TableCell>{getKeyValue(row, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}
```

> **Note**: To learn more about React Aria collections and how to use them, please check [React Aria Collections](https://react-spectrum.adobe.com/react-stately/collections.html).

### Empty State

You can use the `emptyContent` prop to render a custom component when the table is empty.

<CodeDemo title="Empty State" highlightedLines="11" files={tableContent.empty} />

### Without Header

In case you don't want to render the header, you can use the `hideHeader` prop.

<CodeDemo title="Without Header" files={tableContent.withoutHeader} />

### Without Wrapper

By default the table is wrapped in a `div` element with a small shadow effect and a border radius.
You can use the `removeWrapper` prop to remove the wrapper and only render the table.

<CodeDemo title="Without Wrapper" files={tableContent.withoutWrapper} />

### Custom Cells

You can render any component inside the table cell. In the example below, we are rendering different components according to the `key` of the column.

<CodeDemo title="Custom Cells" files={tableContent.customCells} />

### Striped Rows

You can use the `isStriped` prop to render striped rows.

<CodeDemo title="Striped Rows" files={tableContent.striped} />

### Single Row Selection

It is possible to make the table rows selectable. To do so, you can use the `selectionMode` prop. Use `defaultSelectedKeys` to
provide a default set of selected rows.

<CodeDemo title="Single Row Selection" files={tableContent.singleSelection} />

> **Note**: The value of the selected keys must match the key prop of the row.

### Multiple Row Selection

You can also select multiple rows by using the `selectionMode="multiple"` prop. Use `defaultSelectedKeys` to
provide a default set of selected rows.

<CodeDemo title="Multiple Row Selection" files={tableContent.multipleSelection} />

> **Note**: When using multiple selection, selectable checkboxes will be rendered in the first column of the table.

### Disallow Empty Selection

Table also supports a `disallowEmptySelection` prop which forces the user to have at least one
row in the Table selected at all times. In this mode, if a single row is selected and the
user presses it, it will not be deselected.

<CodeDemo title="Disallow Empty Selection" files={tableContent.disallowEmptySelection} />

### Controlled Selection

To programmatically control row selection, use the `selectedKeys` prop paired with the `onSelectionChange` callback.
The key prop from the selected rows will be passed into the callback when the row is pressed, allowing you to update state accordingly.

<CodeDemo title="Controlled Selection" files={tableContent.controlledSelection} />

> **Note**: The `selectedKeys` property must be a `Set` object.

### Disabled Rows

You can disable rows by using the `disabledKeys` prop. This will prevent rows from being
selectable as shown in the example below.

<CodeDemo title="Disabled Rows" files={tableContent.disabledRows} />

### Selection Behavior

By default, Table uses the `toggle` selection behavior, which behaves like a checkbox group:
clicking, tapping, or pressing the <Kbd>Space</Kbd> or <Kbd>Enter</Kbd> keys toggles selection for the focused row.

When the `selectionBehavior` prop is set to `replace`, clicking a row with the mouse replaces
the selection with only that row. Using the arrow keys moves both focus and selection.
To select multiple rows, modifier keys such as <Kbd>Ctrl</Kbd>, <Kbd>Cmd</Kbd>, and <Kbd>Shift</Kbd> can be used.

<CodeDemo title="Selection Behavior" files={tableContent.selectionBehavior} />

### Rows Actions

Table supports rows via the `onRowAction` callback. In the default `toggle` selection
behavior, when nothing is selected, clicking or tapping the row triggers the row action.

This behavior is slightly different in the `replace` selection behavior, where single
clicking selects the row and actions are performed via double click.

<CodeDemo title="Rows Actions" files={tableContent.rowActions} />

### Sorting Rows

Table supports sorting its data when a column header is pressed. To designate that a `Column`
should support sorting, provide it with the `allowsSorting` prop.

Table accepts a `sortDescriptor` prop that defines the current column key to sort by
and the sort direction (ascending/descending). When the user presses a sortable column
header, the column's key and sort direction is passed into the `onSortChange` callback,
allowing you to update the `sortDescriptor` appropriately.

We recommend using the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) to manage the data sorting. So make
sure to install it before using the sorting feature.

<PackageManagers
  commands={{
    npm: "npm install @react-stately/data",
    yarn: "yarn add @react-stately/data",
    pnpm: "pnpm add @react-stately/data",
    bun: "bun add @react-stately/data",
  }}
/>

```jsx
import {useAsyncList} from "@react-stately/data";
```

<Spacer y={2} />

<CodeDemo
  asIframe
  title="Sorting Rows"
  resizeEnabled={false}
  displayMode="visible"
  files={tableContent.sorting}
  previewHeight="520px"
  iframeSrc="/examples/table/sorting"
/>

> Note that we passed the `isLoading` and `loadingContent` props to `TableBody` to
> render a loading state while the data is being fetched.

### Loading more data

Table allows you to add a custom component at the end of the table, on the example below we are
using a button to load more data.

<CodeDemo
  asIframe
  title="Loading more data"
  resizeEnabled={false}
  displayMode="visible"
  files={tableContent.loadMore}
  highlightedLines="36-45"
  previewHeight="620px"
  iframeSrc="/examples/table/load-more"
/>

> **Note**: We passed the `isHeaderSticky` to the `Table` component to make the header sticky.

### Paginated Table

You can use the [Pagination](/components/pagination) component to paginate the table.

<CodeDemo title="Paginated Table" files={tableContent.paginated} />

### Async Pagination

It is also possible to use the [Pagination](/components/pagination) component to paginate the table asynchronously. To fetch the data, we are using the `useSWR` hook from [SWR](https://swr.vercel.app/docs/pagination).

<CodeDemo
  asIframe
  title="Async Paginated Table"
  resizeEnabled={false}
  files={tableContent.asyncPagination}
  previewHeight="600px"
  displayMode="visible"
  iframeSrc="/examples/table/async-pagination"
/>

### Infinite Pagination

Table also supports infinite pagination. To do so, you can use the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) and
[@heroui/use-infinite-scroll](https://www.npmjs.com/package/@heroui/use-infinite-scroll) hook.

<PackageManagers
  commands={{
    npm: "npm install @react-stately/data @heroui/use-infinite-scroll",
    yarn: "yarn add @react-stately/data @heroui/use-infinite-scroll",
    pnpm: "pnpm add @react-stately/data @heroui/use-infinite-scroll",
    bun: "bun add @react-stately/data @heroui/use-infinite-scroll",
  }}
/>

```jsx
import { useInfiniteScroll } from "@heroui/use-infinite-scroll";
import { useAsyncList } from "@react-stately/data";
```

<Spacer y={2} />

<CodeDemo
  asIframe
  title="Infinite Paginated Table"
  resizeEnabled={false}
  files={tableContent.infinitePagination}
  previewHeight="620px"
  displayMode="visible"
  showPreview={true}
  showOpenInCodeSandbox={false}
  iframeSrc="/examples/table/infinite-pagination"
/>


### Virtualization

Table supports virtualization, which allows efficient rendering of large lists by only rendering items that are visible in the viewport. You can enable virtualization by setting the `isVirtualized` prop to `true`.

<CodeDemo
  title="Virtualization"
  files={tableContent.virtualization}
/>

> **Note**: The virtualization strategy is based on the [@tanstack/react-virtual](https://tanstack.com/virtual/latest) package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.

#### Ten Thousand Items

Here's an example of using virtualization with 10,000 items.

<CodeDemo title="Ten Thousand Items" files={tableContent.virtualizationTenThousand} />

#### Max Table Height

The `maxTableHeight` prop is used to set the maximum height of the table. This is required when using virtualization. By default, it's set to `600`.

<CodeDemo title="Max Table Height" files={tableContent.virtualizationCustomMaxTableHeight} />

#### Custom Row Height

The `rowHeight` prop is used to set the height of each row in the table. This is required when using virtualization. By default, it's set to `40`.

<CodeDemo title="Custom Row Height" files={tableContent.virtualizationCustomItemHeight} />

### Use Case Example

When creating a table, you usually need core functionalities like sorting, pagination, and filtering. In the
example below, we combined all these functionalities to create a complete table.

<CodeDemo
  asIframe
  typescriptStrict={true}
  title="Table use Case Example"
  resizeEnabled={false}
  files={tableContent.useCase}
  previewHeight="630px"
  displayMode="visible"
  iframeSrc="/examples/table/use-case"
/>

## Slots

- **base**: Defines a flexible column layout and relative positioning for the table component.
- **wrapper**: Applies to the outermost wrapper, providing padding, flexible layout, relative positioning, visual styles, and scrollable overflow handling.
- **table**: Sets the table to have a full minimum width and auto-adjusting height.
- **thead**: Specifies rounded corners for the first child row in the table header.
- **tbody**: No specific styles are applied to the body of the table.
- **tr**: Styles for table rows including group focus, outline properties, and a set of undefined focus-visible classes.
- **th**: Styles for table headers, including padding, text alignment, font properties, and special styles for sortable columns.
- **td**: Applies to table cells, with properties for padding, alignment, and relative positioning, plus special styles for first child elements, selection indication, and disabled cells.
- **tfoot**: No specific styles are applied to the footer of the table.
- **sortIcon**: Styles for sorting icons, with properties for margin, opacity, and transition effects based on sorting direction and hover state.
- **emptyWrapper**: Defines style for an empty table, with text alignment, color, and a specified height.
- **loadingWrapper**: Style applied when the table is loading, positioning it centrally in its container.

### Custom Styles

You can customize the `Table` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo
  asIframe
  title="Table custom styles example"
  resizeEnabled={false}
  files={tableContent.customStyles}
  previewHeight="540px"
  displayMode="visible"
  iframeSrc="/examples/table/custom-styles"
/>

<Spacer y={4} />

## Data Attributes

`TableBody` has the following attributes:

- **data-empty**:
  When the table is empty.
- **data-loading**:
  When the table data is loading. Based on `TableBody` `isLoading` and `loadingContent` props.

`TableRow` has the following attributes:

- **data-selected**:
  When the row is selected. Based on `Table` `selectedKeys` prop.
- **data-disabled**:
  When the row is disabled. Based on `Table` `disabledKeys` prop.
- **data-hover**:
  When the row is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus-visible**:
  When the row is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-first**:
  When the row is the first row.
- **data-middle**:
  When the row is in the middle.
- **data-odd**:
  When the row is odd.
- **data-last**:
  When the row is the last row.

`TableCell` has the following attributes:

- **data-selected**:
  When the cell row is selected. Based on `Table` `selectedKeys` prop.
- **data-focus-visible**:
  When the cell is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a grid using ARIA.
- Keyboard navigation between columns, rows, cells, and in-cell focusable elements via the arrow keys.
- Single, multiple, or no row selection via mouse, touch, or keyboard interactions.
- Support for disabled rows, which cannot be selected.
- Column sorting support.
- Async loading, infinite scrolling, filtering, and sorting support.
- Support for both toggle and replace selection behaviors.
- Labeling support for accessibility.
- Ensures that selections are announced using an ARIA live region.
- Support for marking columns as row headers, which will be read when navigating the rows with a screen reader.
- Optional support for checkboxes in each row for selection, as well as in the header to select all rows.
- Automatic scrolling support during keyboard navigation.
- Support for row actions via double click, Enter key, or tapping.
- Typeahead to allow focusing rows by typing text.
- Long press to enter selection mode on touch when there is both selection and row actions.

<Spacer y={4} />

## API

### Table Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The elements that make up the table. Includes the TableHeader, TableBody, TableColumn, and TableRow.",
      default: "-"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "Color of the selected rows, and checkboxes.",
      default: "default"
    },
    {
      attribute: "layout",
      type: "auto | fixed",
      description: "Defines the layout of the table.",
      default: "auto"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg",
      description: "The border-radius of the table.",
      default: "lg"
    },
    {
      attribute: "shadow",
      type: "none | sm | md | lg",
      description: "The shadow size of the table.",
      default: "sm"
    },
        {
      attribute: "maxTableHeight",
      type: "number",
      description: "The maximum height of the table in pixels. Required when using virtualization.",
      default: 600
    },
    {
      attribute: "rowHeight",
      type: "number", 
      description: "The fixed height of each row item in pixels. Required when using virtualization.",
      default: 40
    },
    {
      attribute: "isVirtualized",
      type: "boolean",
      description: "Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.",
      default: "undefined"
    },
    {
      attribute: "hideHeader",
      type: "boolean",
      description: "Whether to hide the table header.",
      default: "false"
    },
    {
      attribute: "isStriped",
      type: "boolean",
      description: "Whether to apply striped rows in the table.",
      default: "false"
    },
    {
      attribute: "isCompact",
      type: "boolean", 
      description: "Whether to apply compact style to the table.",
      default: "false"
    },
    {
      attribute: "isHeaderSticky",
      type: "boolean",
      description: "Whether to make the table header sticky.",
      default: "false"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether to make the table full width.",
      default: "true"
    },
    {
      attribute: "removeWrapper",
      type: "boolean",
      description: "Whether the table base container should not be rendered.",
      default: "false"
    },
    {
      attribute: "BaseComponent",
      type: "React.ComponentType<any>",
      description: "A custom wrapper component for the table.",
      default: "div"
    },
    {
      attribute: "topContent",
      type: "ReactNode",
      description: "Provides content to include a component in the top of the table.",
      default: "-"
    },
    {
      attribute: "bottomContent",
      type: "ReactNode", 
      description: "Provides content to include a component in the bottom of the table.",
      default: "-"
    },
    {
      attribute: "topContentPlacement",
      type: "inside | outside",
      description: "Where to place the topContent component.",
      default: "inside"
    },
    {
      attribute: "bottomContentPlacement",
      type: "inside | outside",
      description: "Where to place the bottomContent component.",
      default: "inside"
    },
    {
      attribute: "showSelectionCheckboxes",
      type: "boolean",
      description: "Whether the row selection checkboxes should be displayed.",
      default: "-"
    },
    {
      attribute: "sortDescriptor",
      type: "SortDescriptor",
      description: "The current sorted column and direction.",
      default: "-"
    },
    {
      attribute: "selectedKeys",
      type: "Selection",
      description: "The currently selected keys in the collection (controlled).",
      default: "-"
    },
    {
      attribute: "defaultSelectedKeys",
      type: "Selection",
      description: "The initial selected keys in the collection (uncontrolled).",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "Selection",
      description: "A set of keys for rows that are disabled.",
      default: "-"
    },
    {
      attribute: "disallowEmptySelection",
      type: "boolean",
      description: "Whether the collection allows empty selection.",
      default: "-"
    },
    {
      attribute: "selectionMode",
      type: "single | multiple | none",
      description: "The type of selection that is allowed in the collection.",
      default: "none"
    },
    {
      attribute: "selectionBehavior",
      type: "toggle | replace",
      description: "How multiple selection should behave in the collection.",
      default: "toggle"
    },
    {
      attribute: "disabledBehavior",
      type: "selection | all",
      description: "Whether disabledKeys applies to all interactions, or only selection.",
      default: "selection"
    },
    {
      attribute: "allowDuplicateSelectionEvents",
      type: "boolean",
      description: "Whether onSelectionChange should fire even if the new set of keys is the same as the last.",
      default: "-"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the table and checkbox animations.",
      default: "false"
    },
    {
      attribute: "checkboxesProps",
      type: "CheckboxProps",
      description: "Props to be passed to the checkboxes.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<'base' | 'table' | 'thead' | 'tbody' | 'tfoot' | 'emptyWrapper' | 'loadingWrapper' | 'wrapper' | 'tr' | 'th' | 'td' | 'sortIcon', string>>",
      description: "Allows to set custom class names for the dropdown item slots.",
      default: "-"
    },
    {
      attribute: "isKeyboardNavigationDisabled",
      type: "boolean",
      description: "Whether to disable keyboard navigations or not.",
      default: "false"
    }
  ]}
/>

### Table Events

<APITable
  data={[
    {
      attribute: "onRowAction",
      type: "(key: React.Key) => void",
      description: "Handler that is called when a user performs an action on the row.",
      default: "-"
    },
    {
      attribute: "onCellAction",
      type: "(key: React.Key) => void",
      description: "Handler that is called when a user performs an action on the cell.",
      default: "-"
    },
    {
      attribute: "onSelectionChange",
      type: "(keys: Selection) => any",
      description: "Handler that is called when the selection changes.",
      default: "-"
    },
    {
      attribute: "onSortChange",
      type: "(descriptor: SortDescriptor) => any",
      description: "Handler that is called when the sorted column or direction changes.",
      default: "-"
    }
  ]}
/>

### TableHeader Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "A list of Column(s) or a function. If the latter, a list of columns must be provided using the columns prop",
      default: "-"
    },
    {
      attribute: "columns",
      type: "T[]",
      description: "A list of table columns.",
      default: "-"
    }
  ]}
/>

### TableColumn Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "Static child columns or content to render as the column header",
      default: "-"
    },
    {
      attribute: "align",
      type: "start | center | end",
      description: "The alignment of the column's contents relative to its allotted width",
      default: "start"
    },
    {
      attribute: "hideHeader",
      type: "boolean",
      description: "Whether the column should hide its header text",
      default: "false"
    },
    {
      attribute: "allowsSorting",
      type: "boolean",
      description: "Whether the column allows sorting",
      default: "-"
    },
    {
      attribute: "isRowHeader",
      type: "boolean",
      description: "Whether a column is a row header and should be announced by assistive technology during row navigation",
      default: "-"
    },
    {
      attribute: "textValue",
      type: "string",
      description: "A string representation of the column's contents, used for accessibility announcements",
      default: "-"
    },
    {
      attribute: "width",
      type: "string | number",
      description: "The width of the column",
      default: "-"
    },
    {
      attribute: "minWidth",
      type: "string | number",
      description: "The minimum width of the column",
      default: "-"
    },
    {
      attribute: "maxWidth",
      type: "string | number",
      description: "The maximum width of the column",
      default: "-"
    }
  ]}
/>

### TableBody Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "RowElement | RowElement[] | ((item: T) => RowElement)",
      description: "The contents of the table body. Supports static items or a function for dynamic rendering",
      default: "-"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "A list of row objects in the table body used when dynamically rendering rows",
      default: "-"
    },
    {
      attribute: "isLoading",
      type: "boolean",
      description: "Whether the table body is loading.",
      default: "-"
    },
    {
      attribute: "loadingState",
      type: "LoadingState",
      description: "Handler that is called when more items should be loaded, e.g. while scrolling near the bottom",
      default: "-"
    },
    {
      attribute: "loadingContent",
      type: "ReactNode",
      description: "Content to display while loading more items",
      default: "-"
    },
    {
      attribute: "emptyContent",
      type: "ReactNode",
      description: "Content to display when there are no items in the table body",
      default: "-"
    }
  ]}
/>

### TableBody Events

<APITable
  data={[
    {
      attribute: "onLoadMore",
      type: "() => any",
      description: "A list of row objects in the table body used when dynamically rendering rows",
      default: "-"
    }
  ]}
/>

### TableRow Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "CellElement | CellElement[] | CellRenderer",
      description: "Rendered contents of the row or row child items",
      default: "-"
    },
    {
      attribute: "textValue",
      type: "string",
      description: "A string representation of the row's contents, used for features like typeahead",
      default: "-"
    }
  ]}
/>

### TableCell Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The contents of the cell",
      default: "-"
    },
    {
      attribute: "textValue",
      type: "string",
      description: "A string representation of the row's contents, used for features like typeahead",
      default: "-"
    }
  ]}
/>

---

<Spacer y={2} />

### Table types

#### Sort descriptor

```ts
type SortDescriptor = {
  column: React.Key;
  direction: "ascending" | "descending";
};
```

#### Selection

```ts
type Selection = "all" | Set<React.Key>;
```

#### Loading state

```ts
type LoadingState = "loading" | "sorting" | "loadingMore" | "error" | "idle" | "filtering";
```


--- Содержимое из файла: table.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\table.mdx) ---

---
title: "Tabs"
description: "Tabs organize content into multiple sections and allow users to navigate between them."
---

import {tabsContent} from "@/content/components/tabs";

# Tabs

Tabs organize content into multiple sections and allow users to navigate between them.

<ComponentLinks component="tabs" reactAriaHook="useTabList" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add tabs",
    npm: "npm install @heroui/tabs",
    yarn: "yarn add @heroui/tabs",
    pnpm: "pnpm add @heroui/tabs",
    bun: "bun add @heroui/tabs"
  }}
/>

## Import

HeroUI exports 2 tabs-related components:

- **Tabs**: The main component to display a tab list.
- **Tab**: The component to display a tab item. The children of this component will be displayed as the content of the tab.

<ImportTabs
  commands={{
    main: 'import {Tabs, Tab} from "@heroui/react";',
    individual: 'import {Tabs, Tab} from "@heroui/tabs";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={tabsContent.usage} />

### Dynamic

You can render tabs dynamically by using `items` prop.

<CodeDemo title="Dynamic" files={tabsContent.dynamic} />

### Disabled

<CodeDemo title="Disabled" files={tabsContent.disabled} />

### Disabled Item

<CodeDemo title="Disabled Item" files={tabsContent.disabledItem} />

### Sizes

<CodeDemo title="Sizes" files={tabsContent.sizes} />

### Radius

<CodeDemo title="Radius" files={tabsContent.radius} />

### Colors

<CodeDemo title="Colors" files={tabsContent.colors} />

### Variants

<CodeDemo title="Variants" files={tabsContent.variants} />

### With Icons

<CodeDemo title="With Icons" files={tabsContent.icons} />

### Controlled

You can use the `onSelectionChange` and `selectedKey` props to control the selected tab.

<CodeDemo title="Controlled" files={tabsContent.controlled} />

### Placement

You can change the position of the tabs by using the `placement` prop. The default value is `top`.

<CodeDemo title="Placement" files={tabsContent.placement} />

### Vertical

Change the orientation of the tabs it will invalidate the placement prop when the value is `true`.

<CodeDemo title="Vertical" files={tabsContent.vertical} />

### Links

Tabs items can be rendered as links by passing the `href` prop to the `Tab` component. By
default, links perform native browser navigation. However, you'll usually want to synchronize
the selected tab with the current URL from your client side router. You can do this by doing
the following:

1. Set up your router at the root of your app. See [Routing guide](/docs/guide/routing) to learn how to do this.
2. Use the `selectedKey` prop to set the selected tab based on the current URL.

#### Next.js

This example uses [Next.js App router](https://nextjs.org/docs/app/api-reference/functions/use-pathname) to
set up routes for each tab and synchronize the selected tab with the current URL.

```tsx
// app/tabs/page.tsx
"use client";

import {usePathname} from "next/navigation";

function ExampleClientRouterWithTabs() {
  const pathname = usePathname();

  return (
    <Tabs aria-label="Options" selectedKey={pathname}>
      <Tab key="photos" title="Photos" href="/photos">
        <Card>
          <CardBody>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
          </CardBody>
        </Card>
      </Tab>
      <Tab key="music" title="Music" href="/music">
        <Card>
          <CardBody>
            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum
            dolore eu fugiat nulla pariatur.
          </CardBody>
        </Card>
      </Tab>
      <Tab key="videos" title="Videos" href="/videos">
        <Card>
          <CardBody>
            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
            mollit anim id est laborum.
          </CardBody>
        </Card>
      </Tab>
    </Tabs>
  );
}
```

#### React Router

This example uses [React Router](https://reactrouter.com/en/main) to setup routes for each tab and synchronize the selection with the URL.

```tsx
import {Route, Routes, useLocation} from "react-router-dom";
import {Tabs, Tab} from "@heroui/react";

function AppTabs() {
  const {pathname} = useLocation();

  return (
    <div className="flex flex-col gap-2">
      <Tabs selectedKey={pathname} aria-label="Tabs">
        <Tab key="/" href="/" title="Home" />
        <Tab key="/photos" href="/photos" title="Photos" />
        <Tab key="/music" href="/music" title="Music" />
        <Tab key="/videos" href="/videos" title="Videos" />
      </Tabs>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/photos" element={<PhotosPage />} />
        <Route path="/music" element={<MusicPage />} />
        <Route path="/videos" element={<VideosPage />} />
      </Routes>
    </div>
  );
}
```

> **Note**: See the [Routing guide](/docs/guide/routing) to learn how to set up the router for your framework.

### With Form

<CodeDemo title="With Form" files={tabsContent.form} />

## Slots

- **base**: The main tabs slot, it wraps the items and the panels.
- **tabList**: The tab list slot, it wraps the tab items.
- **tab**: The tab slot, it wraps the tab item.
- **tabContent**: The tab content slot, it wraps the tab content.
- **cursor**: The cursor slot, it wraps the cursor. This is only visible when `disableAnimation=false`
- **panel**: The panel slot, it wraps the tab panel (content).
- **tabWrapper**: The tab wrapper slot, it wraps the tab and the tab content.

### Custom Styles

You can customize the `Tabs` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={tabsContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Tab` has the following attributes on the `base` element:

- **data-selected**:
  When the tab is selected.
- **data-disabled**:
  When the tab is disabled.
- **data-hover**:
  When the tab is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
- **data-hover-selected**:
  When the tab is being hovered and is not selected. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html) and `selected` state.
- **data-focus**:
  When the tab is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the tab is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-pressed**:
  When the tab is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).

<Spacer y={4} />

## Accessibility

- Support for mouse, touch, and keyboard interactions on tabs.
- Keyboard event support for arrows keys.
- Support for disabled tabs.
- Follows the tabs ARIA pattern, semantically linking tabs and their associated tab panels.
- Focus management for tab panels without any focusable children.

<Spacer y={4} />

## API

### Tabs Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode | ((item: T) => ReactElement)",
      description: "The list of tabs.",
      default: "-"
    },
    {
      attribute: "variant",
      type: "solid | bordered | light | underlined",
      description: "The tabs appearance style.",
      default: "solid"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The tabs color theme.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The tabs size.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The tabs border radius.",
      default: "-"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the tabs should take the full width of its parent.",
      default: "false"
    },
    {
      attribute: "items",
      type: "Iterable<T>",
      description: "The list of tabs (dynamic).",
      default: "-"
    },
    {
      attribute: "disabledKeys",
      type: "React.Key[]",
      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
      default: "-"
    },
    {
      attribute: "selectedKey",
      type: "React.Key",
      description: "The key for the currently selected item.",
      default: "-"
    },
    {
      attribute: "defaultSelectedKey",
      type: "React.Key",
      description: "The key for the initially selected item.",
      default: "-"
    },
    {
      attribute: "shouldSelectOnPressUp",
      type: "boolean",
      description: "Whether the tabs selection should occur on press up instead of press down.",
      default: "true"
    },
    {
      attribute: "keyboardActivation",
      type: "automatic | manual",
      description: "Whether tabs are activated automatically on focus or manually.",
      default: "automatic"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The props to modify the cursor framer motion animation. Use the variants API to create your own animation.",
      default: "-"
    },
    {
      attribute: "disableCursorAnimation",
      type: "boolean",
      description: "Whether the cursor should be hidden.",
      default: "false"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the tab list should be disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the tab list should be animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\"｜ \"tabList\"｜ \"tab\"｜ \"tabContent\"｜ \"cursor\" ｜ \"panel\" ｜ \"tabWrapper\", string>>",
      description: "Allows to set custom class names for the card slots.",
      default: "-"
    },
    {
      attribute: "placement",
      type: "top | bottom | start | end",
      description: "The position of the tabs.",
      default: "top"
    },
    {
      attribute: "isVertical",
      type: "boolean",
      description: "Whether the tabs are vertical.",
      default: "false"
    },
    {
      attribute: "destroyInactiveTabPanel",
      type: "boolean",
      description: "Whether to destroy inactive tab panel when switching tabs. Inactive tab panels are inert and cannot be interacted with.",
      default: "true"
    }
  ]}
/>

### Tabs Events

<APITable
  data={[
    {
      attribute: "onSelectionChange",
      type: "(key: React.Key) => any",
      description: "Handler that is called when the selection changes.",
      default: "-"
    }
  ]}
/>

### Tab Props

<APITable
  data={[
    {
      attribute: "tabRef",
      type: "RefObject<HTMLButtonElement>",
      description: "A ref to the tab item.",
      default: "-"
    },
    {
      attribute: "children*",
      type: "ReactNode",
      description: "The content of the tab.",
      default: "-"
    },
    {
      attribute: "title",
      type: "ReactNode",
      description: "The title of the tab.",
      default: "-"
    },
    {
      attribute: "titleValue",
      type: "string",
      description: "A string representation of the item's contents. Use this when the title is not readable.",
      default: "-"
    },
    {
      attribute: "href",
      type: "string",
      description: "A URL to link to. See MDN.",
      default: "-"
    },
    {
      attribute: "target",
      type: "HTMLAttributeAnchorTarget",
      description: "The target window for the link. See MDN.",
      default: "-"
    },
    {
      attribute: "rel",
      type: "string",
      description: "The relationship between the linked resource and the current page. See MDN.",
      default: "-"
    },
    {
      attribute: "download",
      type: "boolean | string",
      description: "Causes the browser to download the linked URL. A string may be provided to suggest a file name. See MDN.",
      default: "-"
    },
    {
      attribute: "ping",
      type: "string",
      description: "A space-separated list of URLs to ping when the link is followed. See MDN.",
      default: "-"
    },
    {
      attribute: "referrerPolicy",
      type: "HTMLAttributeReferrerPolicy",
      description: "How much of the referrer to send when following the link. See MDN.",
      default: "-"
    },
    {
      attribute: "shouldSelectOnPressUp",
      type: "boolean",
      description: "Whether the tab selection should occur on press up instead of press down.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: tabs.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\tabs.mdx) ---

---
title: "Textarea"
description: "Textarea component is a multi-line Input which allows you to write large texts."
---

import {textareaContent} from "@/content/components/textarea";

# Textarea

Textarea component is a multi-line Input which allows you to write large texts.

<ComponentLinks component="input" storybook="textarea" reactAriaHook="useTextField" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add input",
    npm: "npm install @heroui/input",
    yarn: "yarn add @heroui/input",
    pnpm: "pnpm add @heroui/input",
    bun: "bun add @heroui/input",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Textarea} from "@heroui/react";',
    individual: 'import {Textarea} from "@heroui/input";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={textareaContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={textareaContent.disabled} />

### Read Only

<CodeDemo title="Readonly" files={textareaContent.readonly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the textarea will be required.

<CodeDemo title="Required" files={textareaContent.required} />

### Clear Button

If you pass the `isClearable` property to the textarea, it will have a clear button at the
end of the textarea, it will be visible when the textarea has a value.

<CodeDemo title="Clear Button" files={textareaContent.clearButton} />

### Autosize

Textarea grows automatically based on the content, but you can also set a min and max height to
it using the `minRows` and `maxRows` properties. It is based on [react-textarea-autosize](https://github.com/Andarist/react-textarea-autosize).

<CodeDemo title="Autosize" files={textareaContent.autosize} />

### Without Autosize

In case you want to disable the autosize feature, you can use the `disableAutosize` property.

<CodeDemo title="Without Autosize" files={textareaContent.disableAutosize} />

### Variants

<CodeDemo title="Variants" files={textareaContent.variants} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid textarea.

<CodeDemo title="With Error Message" files={textareaContent.errorMessage} />

### Description

<CodeDemo title="Description" files={textareaContent.description} />

### Controlled

You can use the `value` and `onValueChange` properties to control the input value.

<CodeDemo title="Controlled" files={textareaContent.controlled} />

> **Note**: HeroUI `Textarea` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).


## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the textarea, it is the one that is displayed above, inside or left of the textarea.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The textarea input element.
- **description**: The description of the textarea.
- **errorMessage**: The error message of the textarea.
- **headerWrapper**: Wraps the `label` and the `clearButton`.

<Spacer y={4} />

## Data Attributes

`Textarea` has the following attributes on the `base` element:

- **data-invalid**:
  When the textarea is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the textarea is required. Based on `isRequired` prop.
- **data-readonly**:
  When the textarea is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the textarea is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the textarea is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the textarea is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the textarea is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input via ARIA.

<Spacer y={4} />

## API

### Textarea Props

<APITable
  data={[
    {
      attribute: "children",
      type: "ReactNode",
      description: "The content of the textarea.",
      default: "-"
    },
    {
      attribute: "minRows",
      type: "number",
      description: "The minimum number of rows to display.",
      default: "3"
    },
    {
      attribute: "maxRows",
      type: "number", 
      description: "Maximum number of rows up to which the textarea can grow.",
      default: "8"
    },
    {
      attribute: "cacheMeasurements",
      type: "boolean",
      description: "Reuse previously computed measurements when computing height of textarea.",
      default: "false"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the textarea.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the textarea.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the textarea.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the textarea.",
      default: "-"
    },
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "value",
      type: "string",
      description: "The current value of the textarea (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "string",
      description: "The default value of the textarea (uncontrolled).",
      default: "-"
    },
    {
      attribute: "placeholder",
      type: "string",
      description: "The placeholder of the textarea.",
      default: "-"
    },
    {
      attribute: "startContent",
      type: "ReactNode",
      description: "Element to be rendered in the left side of the input.",
      default: "-"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "Element to be rendered in the right side of the input.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the textarea. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
      description: "An error message for the textarea.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: string) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "fullWidth",
      type: "boolean",
      description: "Whether the textarea should take up the width of its parent.",
      default: "true"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user input is required on the textarea before form submission.",
      default: "false"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the textarea can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the textarea is disabled.",
      default: "false"
    },
    {
      attribute: "isClearable",
      type: "boolean",
      description: "Whether the textarea should have a clear button.",
      default: "false"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the textarea is invalid.",
      default: "false"
    },
    {
      attribute: "validationState",
      type: "valid | invalid",
      description: "Whether the textarea should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
      default: "-"
    },
    {
      attribute: "disableAutosize",
      type: "boolean",
      description: "Whether the textarea auto vertically resize should be disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the textarea should be animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"label\" | \"inputWrapper\" | \"innerWrapper\" | \"input\" | \"description\" | \"errorMessage\", string>>",
      description: "Allows to set custom class names for the checkbox slots.",
      default: "-"
    }
  ]}
/>

### Input Events

<APITable
  data={[
    {
      attribute: "onChange",
      type: "React.ChangeEvent<HTMLInputElement>",
      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
      default: "-"
    },
    {
      attribute: "onValueChange",
      type: "(value: string) => void",
      description: "Handler that is called when the element's value changes.",
      default: "-"
    },
    {
      attribute: "onClear",
      type: "() => void",
      description: "Handler that is called when the clear button is clicked.",
      default: "-"
    },
    {
      attribute: "onHeightChange",
      type: "(height: number, meta: { rowHeight: number }) => void",
      description: "Handler that is called when the height of the textarea changes.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: textarea.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\textarea.mdx) ---

---
title: "Time Input"
description: "A time input allows users to enter and edit time values using a keyboard. Each part of a time value is displayed in an individually editable segment."
---

import {timeInputContent} from "@/content/components/time-input";

# Time Input

The `TimeInput` component consists of a label, and a group of segments representing each unit of a time (e.g. hours, minutes, and seconds). Each segment is individually focusable and editable by the user, by typing or using the arrow keys to increment and decrement the value. This approach allows values to be formatted and parsed correctly regardless of the locale or time format, and offers an easy and error-free way to edit times using the keyboard.

<ComponentLinks component="date-input" storybook="timeinput" reactAriaHook="useTimeField" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add date-input",
    npm: "npm install @heroui/date-input",
    yarn: "yarn add @heroui/date-input",
    pnpm: "pnpm add @heroui/date-input",
    bun: "bun add @heroui/date-input"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {TimeInput} from "@heroui/react";',
    individual: 'import {TimeInput} from "@heroui/date-input";',
  }}
/>

## Usage

A `TimeInput` displays a placeholder by default. An initial, uncontrolled value can be provided to the TimeField using the defaultValue prop. Alternatively, a controlled value can be provided using the value prop.

Time values are provided using objects in the `@internationalized/date` package. This library handles correct international date and time manipulation across calendars, time zones, and other localization concerns.

`TimeInput` only supports selecting times, but values with date components are also accepted. By default, `TimeInput` will emit `Time` objects in the onChange event, but if a `CalendarDateTime` or `ZonedDateTime` object is passed as the `value` or `defaultValue`, values of that type will be emitted, changing only the time and preserving the date components.

<CodeDemo title="Usage" files={timeInputContent.usage} />

### Required

`TimeInput` supports the `isRequired` prop to ensure the user enters a value, as well as minimum and maximum values, and custom client and server-side validation.

<CodeDemo title="Required" files={timeInputContent.required} />

### Disabled

The `isDisabled` boolean prop makes `TimeInput` disabled. Inputs cannot be focused or selected.

<CodeDemo title="Disabled" files={timeInputContent.disabled} />

### Read Only

The `isReadOnly` boolean prop makes `TimeInput`'s value immutable. Unlike `isDisabled`, `TimeInput` remains focusable.

<CodeDemo title="Readonly" files={timeInputContent.readonly} />

### Without Label

`TimeInput` supports the `label` prop to show or not show the label.

<CodeDemo title="Without Label" files={timeInputContent.withoutLabel} />

### With Description

A description for the field. Provides a hint such as specific requirements for what to choose.

<CodeDemo title="With Description" files={timeInputContent.withDescription} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={timeInputContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).

<CodeDemo title="With Error Message Function" files={timeInputContent.errorMessageFunction} />


### Label Placement

The label's overall position relative to the element it is labeling.

<CodeDemo title="Label Placement" files={timeInputContent.labelPlacement} />

### Start Content

If you want to display some content before the time inputs, you can set the `startContent` property.

<CodeDemo title="Start Content" files={timeInputContent.startContent} />

### End Content

If you want to display some content after the time inputs, you can set the `endContent` property.

<CodeDemo title="End Content" files={timeInputContent.endContent} />

### Controlled

An initial, uncontrolled value can be provided to the `TimeInput` using the `defaultValue` prop. A controlled value can be provided using the `value` prop.

<CodeDemo title="Controlled" files={timeInputContent.controlled} />

### Time Zones

`TimeInput` is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

In most cases, your data will come from and be sent to a server as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string. [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into ZonedDateTime objects. Which format you use will depend on what information you need to store.

- `parseZonedDateTime` – This function parses a date with an explicit time zone and optional UTC offset attached (e.g. `2021-11-07T00:45[America/Los_Angeles]` or `2021-11-07T00:45-07:00[America/Los_Angeles]`). This format preserves the maximum amount of information. If the exact local time and time zone that a user selected is important, use this format. Storing the time zone and offset that was selected rather than converting to UTC ensures that the local time is correct regardless of daylight saving rule changes (e.g. if a locale abolishes DST). Examples where this applies include calendar events, reminders, and other times that occur in a particular location.
- `parseAbsolute` – This function parses an absolute date and time that occurs at the same instant at all locations on Earth. It can be represented in UTC (e.g. `2021-11-07T07:45:00Z`), or stored with a particular offset (e.g. `2021-11-07T07:45:00-07:00`). A time zone identifier, e.g. America/Los_Angeles, must be passed, and the result will be converted into that time zone. Absolute times are the best way to represent events that occurred in the past, or future events where an exact time is needed, regardless of time zone.
- `parseAbsoluteToLocal` – This function parses an absolute date and time into the current user's local time zone. It is a shortcut for parseAbsolute, and accepts the same formats.

<CodeDemo title="Time Zones" files={timeInputContent.timezones} />

### Granularity

The `granularity` prop allows you to control the smallest unit that is displayed by TimeInput. By default, times are displayed with "minute" granularity. More granular time values can be displayed by setting the granularity prop to "second".

<CodeDemo title="Granularity" files={timeInputContent.granularity} />

### Min Time Value

The `minValue` prop allows you to validate time value before a certain time.

<CodeDemo title="Min Time Value" files={timeInputContent.minTimeValue} />

### Max Time Value

The `maxValue` prop allows you to validate time value before a certain time.

<CodeDemo title="Max Time Value" files={timeInputContent.maxTimeValue} />

### Placeholder Value

When no value is set, a placeholder is shown. The format of the placeholder is influenced by the `granularity` and `placeholderValue` props. placeholderValue also controls the default values of each segment when the user first interacts with them, e.g. using the up and down arrow keys. By default, the placeholderValue is midnight, but you can set it to a more appropriate value if needed.

<CodeDemo title="Placeholder Value" files={timeInputContent.placeholderValue} />

### Hide Time Zone

When a `ZonedDateTime` object is provided as the value to `TimeInput`, the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the `hideTimeZone` option.

<CodeDemo title="Hide Time Zone" files={timeInputContent.hideTimeZone} />

### Hour Cycle

By default, `TimeInput` displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. This example forces `TimeInput` to use 24-hour time, regardless of the locale.

<CodeDemo title="Hour Cycle" files={timeInputContent.hourCycle} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the time input, it is the one that is displayed above, inside or left of the time input.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The time input element.
- **innerWrapper**: Wraps the segments, the `startContent` and the `endContent`.
- **segment**: The segment of input elements.
- **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.
- **description**: The description of the time input.
- **errorMessage**: The error message of the time input.

<Spacer y={4} />

## Data Attributes

`TimeInput` has the following attributes on the `base` element:

- **data-has-helper**:
  When the time input has description or error message. Based on `description` or `errorMessage` props.
- **data-required**:
  When the time input is required. Based on `isRequired` prop.
- **data-disabled**:
  When the time input is disabled. Based on `isDisabled` prop.
- **data-readonly**:
  When the time input is readonly. Based on `isReadOnly` prop.
- **data-invalid**:
  When the time input is invalid. Based on `isInvalid` prop.
- **data-has-start-content**:
  When the time input has start content. Based on `startContent` prop.
- **data-has-end-content**:
  When the time input has end content. Based on `endContent` prop.

<Spacer y={4} />

## Accessibility

- Support for locale-specific formatting, number systems, hour cycles, and right-to-left layout.
- Times can optionally include a time zone. All modifications follow time zone rules such as daylight saving time.
- Each time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit times using the keyboard, in any format and locale.
- Time segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.

<Spacer y={4} />

## API

### TimeInput Props

<APITable
  data={[
    {
      attribute: "label",
      type: "ReactNode",
      description: "The content to display as the label.",
      default: "-"
    },
    {
      attribute: "name",
      type: "string",
      description: "The name of the time input element, used when submitting an HTML form.",
      default: "-"
    },
    {
      attribute: "value",
      type: "TimeValue | null",
      description: "The current value (controlled).",
      default: "-"
    },
    {
      attribute: "defaultValue",
      type: "TimeValue | null",
      description: "The default value (uncontrolled).",
      default: "-"
    },
    {
      attribute: "variant",
      type: "flat | bordered | faded | underlined",
      description: "The variant of the time input.",
      default: "flat"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The color of the time input.",
      default: "default"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The size of the time input.",
      default: "md"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The radius of the time input.",
      default: "-"
    },
    {
      attribute: "hourCycle",
      type: "12 | 24",
      description: "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
      default: "-"
    },
    {
      attribute: "granularity",
      type: "hour | minute | second",
      description: "Determines the smallest unit that is displayed in the time picker.",
      default: "minute"
    },
    {
      attribute: "hideTimeZone",
      type: "boolean",
      description: "Whether to hide the time zone abbreviation.",
      default: "-"
    },
    {
      attribute: "labelPlacement",
      type: "inside | outside | outside-left",
      description: "The position of the label.",
      default: "inside"
    },
    {
      attribute: "shouldForceLeadingZeros",
      type: "boolean",
      description: "Whether to always show leading zeros in the hour field. By default, this is determined by the user's locale.",
      default: "true"
    },
    {
      attribute: "placeholderValue",
      type: "TimeValue",
      description: "A placeholder time that influences the format of the placeholder shown when no value is selected.",
      default: "-"
    },
    {
      attribute: "minValue",
      type: "TimeValue",
      description: "The minimum allowed time that a user may select.",
      default: "-"
    },
    {
      attribute: "maxValue",
      type: "TimeValue",
      description: "The maximum allowed time that a user may select.",
      default: "-"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the time input is disabled.",
      default: "-"
    },
    {
      attribute: "isReadOnly",
      type: "boolean",
      description: "Whether the time input can be selected but not changed by the user.",
      default: "-"
    },
    {
      attribute: "isRequired",
      type: "boolean",
      description: "Whether user time input is required on the time input before form submission.",
      default: "-"
    },
    {
      attribute: "isInvalid",
      type: "boolean",
      description: "Whether the time input is invalid.",
      default: "-"
    },
    {
      attribute: "autoFocus",
      type: "boolean",
      description: "Whether the element should receive focus on render.",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode",
      description: "A description for the field. Provides a hint such as specific requirements for what to choose.",
      default: "-"
    },
    {
      attribute: "errorMessage",
      type: "ReactNode | (v: ValidationResult) => ReactNode",
      description: "An error message for the field.",
      default: "-"
    },
    {
      attribute: "validate",
      type: "(value: MappedTimeValue<TimeValue>) => ValidationError | true | null | undefined",
      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
      default: "-"
    },
    {
      attribute: "validationBehavior",
      type: "native | aria",
      description: "Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.",
      default: "native"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether to disable the animation of the time input.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"label\" | \"inputWrapper\" | \"innerWrapper\" | \"segment\" | \"helperWrapper\" | \"input\" | \"description\" | \"errorMessage\", string>>",
      description: "Allows to set custom class names for the time input slots.",
      default: "-"
    }
  ]}
/>

### TimeInput Events

<APITable
  data={[
    {
      attribute: "onFocus",
      type: "(e: FocusEvent<Target>) => void",
      description: "Handler that is called when the element receives focus."
    },
    {
      attribute: "onBlur",
      type: "(e: FocusEvent<Target>) => void",
      description: "Handler that is called when the element loses focus."
    },
    {
      attribute: "onFocusChange",
      type: "(isFocused: boolean) => void",
      description: "Handler that is called when the element's focus status changes."
    },
    {
      attribute: "onKeyDown",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is pressed."
    },
    {
      attribute: "onKeyUp",
      type: "(e: KeyboardEvent) => void",
      description: "Handler that is called when a key is released."
    },
    {
      attribute: "onChange",
      type: "(value: MappedTimeValue<TimeValue>) => void",
      description: "Handler that is called when the value changes."
    }
  ]}
/>


--- Содержимое из файла: time-input.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\time-input.mdx) ---

---
title: "Toast"
description: "Toast are temporary notifications that provide concise feedback about an action or event."
---

import {toastContent} from "@/content/components/toast";

# Toast

Toasts are temporary notifications that provide concise feedback about an action or event.

<ComponentLinks component="toast" />

---

<CarbonAd />

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add toast",
    npm: "npm install @heroui/toast",
    yarn: "yarn add @heroui/toast",
    pnpm: "pnpm add @heroui/toast",
    bun: "bun add @heroui/toast",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {addToast, ToastProvider} from "@heroui/react";',
    individual: 'import {addToast, ToastProvider} from "@heroui/toast";',
  }}
/>

## Requirement

The `ToastProvider` must be added to the application before using the `addToast` function. This is required to initialize the context for managing toasts.

```jsx {4,9}
// app/providers.tsx

import {HeroUIProvider} from '@heroui/react'
import {ToastProvider} from "@heroui/toast";

export default function Providers({children}) {
  return (
    <HeroUIProvider>
      <ToastProvider />
      {children}
    </HeroUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {3,9,11}
// app/layout.tsx

import {Providers} from "./providers";

export default function RootLayout({children}) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```


### Usage

<CodeDemo title="Usage" files={toastContent.usage} />

### Colors

Toast comes with 6 color variants to convey different meanings.

<CodeDemo title="Color" files={toastContent.color} />

### Variants

<CodeDemo
  title="Variants"
  files={toastContent.variants}
/>

### Radius

<CodeDemo
  title="Radius"
  files={toastContent.radius}
/>

### Toast Placement

<CodeDemo
  title="Placement"
  files={toastContent.placement}
/>

### Custom Styles

You can customize the alert by passing custom Tailwind CSS classes to the component slots.

<CodeDemo
  title="Custom Style"
  files={toastContent.customStyles}
/>

### Custom Close Icon

You can pass a custom close icon to the toast by passing the `closeIcon` prop and a custom class name to the `closeButton` slot.

<CodeDemo
  title="Custom Close Icon"
  files={toastContent.customCloseIcon}
/>

### Global Toast Props

You can pass global toast props to the `ToastProvider` to apply to all toasts.

```jsx
<ToastProvider 
  toastProps={{
    radius: "full",
    color: "primary",
    variant: "flat",
    timeout: 1000,
    hideIcon: true,
    classNames: {
      closeButton: "opacity-100 absolute right-4 top-1/2 -translate-y-1/2",
    },
  }} 
/>
```

<Spacer y={4} />

## Data Attributes

Toast has the following attributes on the `base` element:

- **data-has-title**: When the toast has a title
- **data-has-description**: When the toast has a description
- **data-animation**: Shows the current animation of toast ("entering", "queued", "exiting", "undefined")
- **data-placement**: Where the toast is placed on the view-port.
- **data-drag-value**: Value by which the toast is dragged from it's original position. (This remains "0" in case of disabledAnimation)

<Spacer y={4} />

### Slots

Toast has the following slots:

- `base`: The main toast container element
- `title`: The title element
- `description`: The description element
- `icon`: The icon element
- `loadingIcon`: The icon to be displayed until `promise` is resolved/rejected.
- `content`: The wrapper for the title, description and icon content.
- `motionDiv`: The motion.div for the FramerMotion.
- `progressTrack`: The track of the progressBar.
- `progressIndicator`: The indicator of the progressBar.
- `closeButton`: The close button element
- `closeIcon`: The icon which resides in the close button.


## Accessibility

- Toast has role of `alert`
- All Toasts are present in ToastRegion.
- Close button has aria-label="Close" by default
- When no toast are present, ToastRegion is removed from the DOM

<Spacer y={4} />

## API

### Toast Props

<APITable
  data={[
    {
      attribute: "title",
      type: "ReactNode",
      description: "The alert title",
      default: "-"
    },
    {
      attribute: "icon", 
      type: "ReactNode",
      description: "The alert icon - overrides the default icon",
      default: "-"
    },
    {
      attribute: "description",
      type: "ReactNode", 
      description: "The alert description",
      default: "-"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The alert color theme",
      default: "default"
    },
    {
      attribute: "variant",
      type: "solid | bordered | flat",
      description: "The alert variant",
      default: "flat"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The alert border radius",
      default: "md"
    },
    {
      attribute: "endContent",
      type: "ReactNode",
      description: "The alert end content", 
      default: "-"
    },
    {
      attribute: "closeIcon",
      type: "ReactNode",
      description: "The close icon for the toast - overrides the default close icon",
      default: "-"
    },
    {
      attribute: "timeout",
      type: "number",
      description: "Time in milliseconds after which the toast will be closed", 
      default: "6000"
    },
    {
      attribute: "promise",
      type: "Promise | undefined",
      description: "Promise based on which the notification will be styled",
      default: "undefined"
    },
    {
      attribute: "loadingIcon", 
      type: "ReactNode",
      description: "The loading icon for toasts with promise prop - overrides the default loading icon",
      default: "-"
    },
    {
      attribute: "priority",
      type: "number | undefined",
      description: "Priority at which the toast will be displayed",
      default: "undefined",
    },
    {
      attribute: "hideIcon",
      type: "boolean",
      description: "Hides icon when true",
      default: "false"
    },
    {
      attribute: "hideCloseButton",
      type: "boolean",
      description: "Hides closeButton when true",
      default: "false"
    },
    {
      attribute: "shouldShowTimeoutProgress",
      type: "boolean",
      description: "Whether to indicate the timeout progress or not",
      default: "false",
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"content\" | \"wrapper\" | \"title\" | \"description\" | \"icon\" | \"loadingIcon\" | \"progressTrack\" | \"progressIndicator\ | \"motionDiv\" | \"closeButton\" | \"closeIcon\", string>>",
      description: "Allows to set custom class names for the toast slots.",
      default: "-"
    }
  ]}
/>

### ToastProvider Props

<APITable
  data={[
    {
      attribute: "maxVisibleToasts",
      type: "number",
      description: "Maximum toasts which will be visible",
      default: "3"
    },
    {
      attribute: "placement", 
      type: "bottom-right | bottom-left | bottom-center | top-right | top-left | top-center",
      description: "The placement of the toast.",
      default: "bottom-right"
    },
    {
      attribute: "severity", 
      type: "default | primary | secondary | success | warning | danger",
      description: "The severity of the toast. This changes the icon of the toast without having to change the color.",
      default: "default"
    },
    {
      attribute: "disableAnimation", 
      type: "boolean",
      description: "Disables the animation.",
      default: "false"
    },
    {
      attribute: "toastOffset",
      type: "number",
      description: "offset distance from the top or bottom",
      default: "0"
    },
    {
      attribute: "toastProps",
      type: "ToastProps",
      description: "Props to be passed to all toasts",
      default: "-"
    },
  ]}
/>


### Toast Events

<APITable
  data={[
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler called when the close button is clicked",
      default: "-"
    }
  ]}
/>

--- Содержимое из файла: toast.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\toast.mdx) ---

---
title: "Tooltip"
description: "Tooltips display a brief, informative message that appears when a user interacts with an element."
---

import {tooltipContent} from "@/content/components/tooltip";

# Tooltip

Tooltips display a brief, informative message that appears when a user interacts with an element.

<ComponentLinks component="tooltip" styles="popover" reactAriaHook="useTooltipTrigger" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add tooltip",
    npm: "npm install @heroui/tooltip",
    yarn: "yarn add @heroui/tooltip",
    pnpm: "pnpm add @heroui/tooltip",
    bun: "bun add @heroui/tooltip"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Tooltip} from "@heroui/react";',
    individual: 'import {Tooltip} from "@heroui/tooltip";',
  }}
/>

> For individual installation, please note that you should add `./node_modules/@heroui/theme/dist/components/popover.js` to your `tailwind.config.js` file instead since tooltip reuses popover styles.

## Usage

<CodeDemo title="Usage" files={tooltipContent.usage} />

### With Arrow

<CodeDemo title="With Arrow" files={tooltipContent.arrow} />

### Colors

<CodeDemo title="Colors" files={tooltipContent.colors} />

### Placements

<CodeDemo title="Placements" files={tooltipContent.placements} />

### Offset

<CodeDemo title="Offset" files={tooltipContent.offset} />

### Controlled

<CodeDemo title="Controlled" files={tooltipContent.controlled} />

### With Delay

You can control the `open` and `close` delay of the tooltip with `delay` and `closeDelay` props.

<CodeDemo title="With Delay" files={tooltipContent.delay} />

Hovering over the second button shows the tooltip immediately. If you wait for a delay before hovering
another element, the delay restarts.

<CodeDemo title="With Delay Multiple" files={tooltipContent.delayMultiple} />

### Custom Content

<CodeDemo title="Custom Content" files={tooltipContent.customContent} />

### Custom Motion

Tooltip offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={tooltipContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

## Slots

- **base**: The main tooltip slot, it wraps the tooltip content.
- **arrow**: The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. `data-[placement=top]:...`.

### Custom Styles

You can customize the `Tooltip` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={tooltipContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Tooltip` has the following attributes on the `base` element:

- **data-open**:
  When the tooltip is open. Based on tooltip state.
- **data-placement**:
  The placement of the tooltip. Based on `placement` prop. The arrow element is positioned based on this attribute.
- **data-disabled**:
  When the tooltip is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Keyboard focus management and cross browser normalization.
- Hover management and cross browser normalization.
- Labeling support for screen readers (aria-describedby).
- Exposed as a tooltip to assistive technology via ARIA.
- Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.

<Spacer y={4} />

## API

### Tooltip Props

<APITable
  data={[
    {
      attribute: "children*",
      type: "ReactNode[]",
      description: "The children to render. Usually a trigger element.",
      default: "-"
    },
    {
      attribute: "content",
      type: "ReactNode",
      description: "The content to render inside the tooltip.",
      default: "-"
    },
    {
      attribute: "size",
      type: "sm | md | lg",
      description: "The tooltip size. This change the content font size.",
      default: "md"
    },
    {
      attribute: "color",
      type: "default | primary | secondary | success | warning | danger",
      description: "The tooltip color theme.",
      default: "default"
    },
    {
      attribute: "radius",
      type: "none | sm | md | lg | full",
      description: "The tooltip border radius.",
      default: "md"
    },
    {
      attribute: "shadow",
      type: "none | sm | md | lg",
      description: "The tooltip shadow.",
      default: "sm"
    },
    {
      attribute: "placement",
      type: "TooltipPlacement",
      description: "The placement of the tooltip relative to its trigger reference.",
      default: "top"
    },
    {
      attribute: "delay",
      type: "number",
      description: "The delay in milliseconds before the tooltip opens.",
      default: "0"
    },
    {
      attribute: "closeDelay",
      type: "number",
      description: "The delay in milliseconds before the tooltip closes.",
      default: "500"
    },
    {
      attribute: "isOpen",
      type: "boolean",
      description: "Whether the tooltip is open by default (controlled).",
      default: "-"
    },
    {
      attribute: "defaultOpen",
      type: "boolean",
      description: "Whether the tooltip is open by default (uncontrolled).",
      default: "-"
    },
    {
      attribute: "offset",
      type: "number",
      description: "The distance or margin between the reference and popper. It is used internally to create an offset modifier.",
      default: "7"
    },
    {
      attribute: "containerPadding",
      type: "number",
      description: "The placement padding that should be applied between the element and its surrounding container.",
      default: "12"
    },
    {
      attribute: "crossOffset",
      type: "number",
      description: "The additional offset applied along the cross axis between the element and its anchor element.",
      default: "0"
    },
    {
      attribute: "showArrow",
      type: "boolean",
      description: "Whether the tooltip should have an arrow.",
      default: "false"
    },
    {
      attribute: "shouldFlip",
      type: "boolean",
      description: "Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.",
      default: "true"
    },
    {
      attribute: "triggerScaleOnOpen",
      type: "boolean",
      description: "Whether the trigger should scale down when the tooltip is open.",
      default: "true"
    },
    {
      attribute: "isKeyboardDismissDisabled",
      type: "boolean",
      description: "Whether pressing the escape key to close the tooltip should be disabled.",
      default: "false"
    },
    {
      attribute: "isDismissable",
      type: "boolean",
      description: "Whether to close the overlay when the user interacts outside it.",
      default: "false"
    },
    {
      attribute: "shouldCloseOnBlur",
      type: "boolean",
      description: "Whether the tooltip should close when focus is lost or moves outside it.",
      default: "true"
    },
    {
      attribute: "motionProps",
      type: "MotionProps",
      description: "The props to modify the framer motion animation. Use the variants API to create your own animation.",
      default: "-"
    },
    {
      attribute: "portalContainer",
      type: "HTMLElement",
      description: "The container element in which the overlay portal will be placed.",
      default: "document.body"
    },
    {
      attribute: "updatePositionDeps",
      type: "any[]",
      description: "The dependencies to force the tooltip position update.",
      default: "[]"
    },
    {
      attribute: "isDisabled",
      type: "boolean",
      description: "Whether the tooltip is disabled.",
      default: "false"
    },
    {
      attribute: "disableAnimation",
      type: "boolean",
      description: "Whether the tooltip is animated.",
      default: "false"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\"｜\"content\", string>>",
      description: "Allows to set custom class names for the tooltip slots.",
      default: "-"
    }
  ]}
/>

### Tooltip Events

<APITable
  data={[
    {
      attribute: "onOpenChange",
      type: "(isOpen: boolean) => void",
      description: "Handler that is called when the tooltip's open state changes.",
      default: "-"
    },
    {
      attribute: "shouldCloseOnInteractOutside",
      type: "(e: HTMLElement) => void",
      description: "When user interacts with the argument element outside of the tooltip ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip. By default, onClose will always be called on interaction outside the overlay ref.",
      default: "-"
    },
    {
      attribute: "onClose",
      type: "() => void",
      description: "Handler that is called when the tooltip should close.",
      default: "-"
    }
  ]}
/>

### Tooltip types

<Spacer y={1} />

#### Tooltip Placement

```ts
type TooltipPlacement =
  | "top"
  | "bottom"
  | "right"
  | "left"
  | "top-start"
  | "top-end"
  | "bottom-start"
  | "bottom-end"
  | "left-start"
  | "left-end"
  | "right-start"
  | "right-end";
```

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```


--- Содержимое из файла: tooltip.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\tooltip.mdx) ---

---
title: "User"
description: "Display user information with avatar and name."
---

import {userContent} from "@/content/components/user";

# User

Display user information with avatar and name.

<ComponentLinks component="user" />

---

<CarbonAd/>

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx heroui-cli@latest add user",
    npm: "npm install @heroui/user",
    yarn: "yarn add @heroui/user",
    pnpm: "pnpm add @heroui/user",
    bun: "bun add @heroui/user"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {User} from "@heroui/react";',
    individual: 'import {User} from "@heroui/user";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={userContent.usage} />

> **Note**: See the [Avatar](/docs/components/avatar) component for more details about `avatarProps`.

### Link Description

<CodeDemo title="Link Description" files={userContent.linkDescription} />

## Slots

- **base**: The base slot of the user, it is the main container.
- **wrapper**: The name and description wrapper.
- **name**: The name of the user.
- **description**: The description of the user.

<Spacer y={4}/>  

## Data Attributes

`User` has the following attributes on the `root` element only when `isFocusable` is `true`:

- **data-focus**:
  When the user is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)
- **data-focus-visible**:
  When the user is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)

<Spacer y={4}/>  

## API

### User Props

<APITable
  data={[
    {
      attribute: "name",
      type: "string",
      description: "The name of the user.",
      default: "-"
    },
    {
      attribute: "description", 
      type: "ReactNode",
      description: "The description component.",
      default: "-"
    },
    {
      attribute: "isFocusable",
      type: "boolean", 
      description: "Whether the user is focusable. This is useful when using `Dropdown` or similar components.",
      default: "false"
    },
    {
      attribute: "avatarProps",
      type: "AvatarProps",
      description: "The avatar component props. The `name` is passed by default.",
      default: "-"
    },
    {
      attribute: "classNames",
      type: "Partial<Record<\"base\" | \"wrapper\" | \"name\" | \"description\", string>>",
      description: "Allows to set custom class names for the user slots.",
      default: "-"
    }
  ]}
/>


--- Содержимое из файла: user.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\components\user.mdx) ---

---
title: Colors
description: Learn how to configure and customize colors with HeroUI.
---

# Colors

HeroUI's plugin enables you to personalize the semantic colors of the theme such as `primary`,
`secondary`, `success`, etc.

```js {7,11}
module.exports = {
  plugins: [
    heroui({
      themes: {
        light: {
          // ...
          colors: {},
        },
        dark: {
          // ...
          colors: {},
        },
        // ... custom themes
      },
    }),
  ],
};
```

<CarbonAd/>

> **Note**: Colors configurations apply globally across all components.

## Default Colors

HeroUI offers a default color palette right out of the box, perfect for when you're 
still undecided about your specific branding colors.

These colors are split into [Common Colors](#common-colors) and [Semantic Colors](#semantic-colors).

- [Common Colors](#common-colors): Consistent across themes.
- [Semantic Colors](#semantic-colors): Adjust according to the chosen theme.

### Common Colors

Common colors, like [TailwindCSS](https://tailwindcss.com/docs/customizing-colors) colors, 
remain consistent regardless of the theme. 

To prevent conflicts with TailwindCSS colors, common colors are initially disabled but can 
be activated with the `addCommonColors` option.

```js {4}
module.exports = {
  plugins: [
    heroui({
      addCommonColors: true,
    }),
  ],
};
```

Enabling this option supplements some TailwindCSS default colors with the following:

```js
module.exports = {
  theme: {
    extend: {
      colors: {
        white: "#FFFFFF",
        black: "#000000",
        blue: {
          50: "#e6f1fe",
          100: "#cce3fd",
          200: "#99c7fb",
          300: "#66aaf9",
          400: "#338ef7",
          500: "#006FEE",
          600: "#005bc4",
          700: "#004493",
          800: "#002e62",
          900: "#001731",
        },
        // .. rest of the colors
      },
    },
  },
};
```

<CommonColors />

### Semantic Colors

Semantic colors adapt with the theme, delivering meaning and reinforcing your brand identity.

For an effective palette, we recommend using color ranges from `50` to `900`. You can use tools like [Eva Design System](https://colors.eva.design/),
[Smart Watch](https://smart-swatch.netlify.app/), [Palette](https://palettte.app/) or [Color Box](https://colorbox.io/) to generate your palette.

> Semantic colors should be placed inside the `heroui` plugin options, not inside the TailwindCSS theme object.

```js {7-13,19-25,33-37}
module.exports = {
  plugins: [
    heroui({
      themes: {
        light: {
          colors: {
            background: "#FFFFFF", // or DEFAULT
            foreground: "#11181C", // or 50 to 900 DEFAULT
            primary: {
              //... 50 to 900
              foreground: "#FFFFFF",
              DEFAULT: "#006FEE",
            },
            // ... rest of the colors
          },
        },
        dark: {
          colors: {
            background: "#000000", // or DEFAULT
            foreground: "#ECEDEE", // or 50 to 900 DEFAULT
            primary: {
              //... 50 to 900
              foreground: "#FFFFFF",
              DEFAULT: "#006FEE",
            },
          },
          // ... rest of the colors
        },
        mytheme: {
          // custom theme
          extend: "dark",
          colors: {
            primary: {
              DEFAULT: "#BEF264",
              foreground: "#000000",
            },
            focus: "#BEF264",
          },
        },
      },
    }),
  ],
};
```

<Blockquote className="flex items-center gap-2">
  Change the docs theme to see the semantic colors in action.
  <ThemeSwitch />
</Blockquote>

<SemanticColors />

### Using Semantic Colors

Semantic colors can be applied anywhere in your project where colors are used, such as 
text color, border color, background color utilities, and more.

```html
<div class="bg-primary-500 text-primary-50 rounded-small px-2 py-1">
  This is a primary color box
</div>
```

<Spacer y={4} />

import semanticColorsExample from "@/content/customization/colors/semantic-colors";

<CodeDemo title="Semantic Colors Example" showEditor={false} files={semanticColorsExample} />

### Javascript Variables

Import semantic and common colors into your JavaScript files as follows:

```js
import {commonColors, semanticColors} from "@heroui/theme";

console.log(commonColors.white); // #FFFFFF
console.log(commonColors.blue[500]); // #006FEE

console.log(semanticColors.dark.warning.DEFAULT); // #FFC107
console.log(semanticColors.light.primary.DEFAULT); // #006FEE
```

### CSS Variables

HeroUI creates CSS variables using the format `--prefix-colorname-shade` for each semantic color. By
default the prefix is `heroui`, but you can change it with the `prefix` option.

```js {4}
module.exports = {
  plugins: [
    heroui({
      prefix: "myapp",
    }),
  ],
};
```

Then you can use the CSS variables in your CSS files.

```css
/* With default prefix */
.my-component {
  background-color: hsl(var(--heroui-primary-500));
}
/*  With custom prefix */
.my-component {
  background-color: hsl(var(--myapp-primary-500));
}
```


--- Содержимое из файла: colors.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\colors.mdx) ---

---
title: Create theme
description: HeroUI provides a simple way to create new themes.
---

# Create theme

Create a new theme by adding it to your `tailwind.config.js` file. For color palettes (50-900), you can use tools like [Eva Design System](https://colors.eva.design/) or [Smart Watch](https://smart-swatch.netlify.app/) to generate them.

<CarbonAd/>

### Add the new theme to the plugin

```js {9-43}
// tailwind.config.js
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    heroui({
      themes: {
        "purple-dark": {
          extend: "dark", // <- inherit default values from dark theme
          colors: {
            background: "#0D001A",
            foreground: "#ffffff",
            primary: {
              50: "#3B096C",
              100: "#520F83",
              200: "#7318A2",
              300: "#9823C2",
              400: "#c031e2",
              500: "#DD62ED",
              600: "#F182F6",
              700: "#FCADF9",
              800: "#FDD5F9",
              900: "#FEECFE",
              DEFAULT: "#DD62ED",
              foreground: "#ffffff",
            },
            focus: "#F182F6",
          },
          layout: {
            disabledOpacity: "0.3",
            radius: {
              small: "4px",
              medium: "6px",
              large: "8px",
            },
            borderWidth: {
              small: "1px",
              medium: "2px",
              large: "3px",
            },
          },
        },
      },
    }),
  ],
};
```

### Apply the new theme

Now, applying the new theme is as simple as adding the theme name `purple-dark` to the `className` of the
`html` / `body` or `main` element.

```jsx {4}
// main.tsx or main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import {HeroUIProvider} from "@heroui/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <HeroUIProvider>
      <main className="purple-dark text-foreground bg-background">
        <App />
      </main>
    </HeroUIProvider>
  </React.StrictMode>,
);
```

### Use the new theme

All components that use the `primary` color will be affected by this change.

```jsx
import {Button} from "@heroui/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4 items-center">
      <Button color="primary" variant="solid">
        Solid
      </Button>
      <Button color="primary" variant="faded">
        Faded
      </Button>
      <Button color="primary" variant="bordered">
        Bordered
      </Button>
      <Button color="primary" variant="light">
        Light
      </Button>
      <Button color="primary" variant="flat">
        Flat
      </Button>
      <Button color="primary" variant="ghost">
        Ghost
      </Button>
      <Button color="primary" variant="shadow">
        Shadow
      </Button>
    </div>
  );
}
```

<Spacer y={4} />

import customTheme from "@/content/customization/create-theme/custom-theme";

<CodeDemo
  title="Custom theme example"
  showEditor={false}
  files={customTheme}
  className="bg-[#0D001A] text-[#FFFFFF]"
/>


--- Содержимое из файла: create-theme.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\create-theme.mdx) ---

---
title: Custom Variants
description: Learn how to create new variants for the HeroUI components.
---

# Custom Variants

HeroUI allows you to create new variants for components by extending and customizing their styles. You can override the component's `variants`, `defaultVariants` and `compoundVariants`.

<CarbonAd/>

> **Note**: For one-off customizations, refer to the [Override Styles](/docs/customization/override-styles) documentation.

## Creating new variants for non-slots components

Let's use the [Button](/docs/components/button) component as an example. It's a non-slots component, and you can view its source styles [here](https://github.com/heroui/heroui/blob/feat/v2/packages/core/theme/src/components/button.ts).

> **Note**: If you are not familiar with the variants concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/variants) documentation.

<Steps>

### Extend the original component variants

Use the `extendVariants` function to create a new component with customized variants based on an existing component.

```tsx
// MyButton.tsx
import {extendVariants, Button} from "@heroui/react";

export const MyButton = extendVariants(Button, {
  variants: {
    // <- modify/add variants
    color: {
      olive: "text-[#000] bg-[#84cc16]",
      orange: "bg-[#ff8c00] text-[#fff]",
      violet: "bg-[#8b5cf6] text-[#fff]",
    },
    isDisabled: {
      true: "bg-[#eaeaea] text-[#000] opacity-50 cursor-not-allowed",
    },
    size: {
      xs: "px-2 min-w-12 h-6 text-tiny gap-1 rounded-small",
      md: "px-4 min-w-20 h-10 text-small gap-2 rounded-small",
      xl: "px-8 min-w-28 h-14 text-large gap-4 rounded-medium",
    },
  },
  defaultVariants: { // <- modify/add default variants
    color: "olive",
    size: "xl",
  },
  compoundVariants: [ // <- modify/add compound variants
    {
      isDisabled: true,
      color: "olive",
      class: "bg-[#84cc16]/80 opacity-100",
    },
  ],
});
```

### Use your custom component in your application

Then, you can now use your custom component in your application. Here, `MyButton` is
used with the color set to `olive` and the size set to `xl`.

```tsx
// App.tsx
import {MyButton} from "./MyButton";

const MyApp = () => {
  return (
    <MyButton color="olive" size="md">
      Press Me
    </MyButton>
  );
};
```

The new component will include the original props of the `Button` component, plus the new
variants that you have created.

import customVariantsNoSlots from "@/content/customization/custom-variants/no-slots-component";

<CodeDemo
  title="Custom Variants for non-slots components"
  showEditor={false}
  files={customVariantsNoSlots}
/>

</Steps>

## Creating new variants for slots components

The `extendVariants` function can also be used with slot-based components like [Input](/docs/components/input) to add or override variants. You can view the Input component's source styles [here](https://github.com/heroui/heroui/blob/feat/v2/packages/core/theme/src/components/input.ts).

> **Note**: If you are not familiar with the variants/slots concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/slots#slots-with-variants) documentation.

<Steps>

### Extend the original component variants

Use the `extendVariants` function to create a new component with custom variants based on the original component.

```tsx
// MyInput.tsx
import {extendVariants, Input} from "@heroui/react";

const MyInput = extendVariants(Input, {
  variants: { // <- modify/add variants
    color: {
      stone: { // <- add a new color variant
        inputWrapper: [ // <- Input wrapper slot
          "bg-zinc-100",
          "border",
          "shadow",
          "transition-colors",
          "focus-within:bg-zinc-100",
          "data-[hover=true]:border-zinc-600",
          "data-[hover=true]:bg-zinc-100",
          "group-data-[focus=true]:border-zinc-600",
          // dark theme
          "dark:bg-zinc-900",
          "dark:border-zinc-800",
          "dark:data-[hover=true]:bg-zinc-900",
          "dark:focus-within:bg-zinc-900",
        ],
        input: [  // <- Input element slot
          "text-zinc-800",
          "placeholder:text-zinc-600",
          // dark theme
          "dark:text-zinc-400",
          "dark:placeholder:text-zinc-600",
        ],
      },
    },
    size: {
      xs: {
        inputWrapper: "h-6 min-h-6 px-1",
        input: "text-tiny",
      },
      md: {
        inputWrapper: "h-10 min-h-10",
        input: "text-small",
      },
      xl: {
        inputWrapper: "h-14 min-h-14",
        input: "text-medium",
      },
    },
    radius: {
      xs: {
        inputWrapper: "rounded",
      },
      sm: {
        inputWrapper: "rounded-[4px]",
      },
    },
    textSize: {
      base: {
        input: "text-base",
      },
    },
    removeLabel: {
      true: {
        label: "hidden",
      },
      false: {},
    },
  },
  defaultVariants: {
    color: "stone",
    textSize: "base",
    removeLabel: true,
  },
});
```

### Use your custom component in your application

Then, you can now use your custom component in your application. Here, `MyInput` is
used with the color set to `slate` and the size set to `xl`.

```tsx
// App.tsx
import {MyInput} from "./MyInput";
import {SearchIcon} from "your-icons-library";

const MyApp = () => {
  return (
    <MyInput
      isClearable
      placeholder="Search..."
      radius="md"
      size="md"
      startContent={<SearchIcon className="text-zinc-500" size={16} />}
    />
  );
};
```

The new component will include the original props of the [Input](/docs/components/input) component, plus the new
variants that you have created.

import customVariantsSlots from "@/content/customization/custom-variants/slots-component";

<CodeDemo
  title="Custom Variants for slots components"
  showEditor={false}
  files={customVariantsSlots}
/>

</Steps>

<Blockquote>
  Use the `Styles source` link at the top of each component page to view its source code as a reference for customization.
</Blockquote>

### Types

### Main Function

```jsx
const Component = extendVariants(BaseComponent, options, config);

/**
 * BaseComponent -> HeroUI component to extend
 * options -> the variants to add/modify
 * config -> config to extend the component
 */
```

### Options

```ts
type ExtendVariantsOptions = {
  variants?: Record<string, Record<string, ClassValue>>;
  defaultVariants?: Record<string, ClassValue>;
  compoundVariants?: Array<Record<string, string> & ClassProp>;
};
```

### Config

```ts
  /**
   * Whether to merge the class names with `tailwind-merge` library.
   * It's avoid to have duplicate tailwind classes. (Recommended)
   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/README.md
   * @default true
   */
  twMerge?: boolean;
  /**
   * The config object for `tailwind-merge` library.
   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md
   */
  twMergeConfig?: TWMergeConfig;
```

> **Note**: See the [Tailwind Merge Config](https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md) to learn more about it.


--- Содержимое из файла: custom-variants.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\custom-variants.mdx) ---

---
title: Customize theme
description: Learn how HeroUI enables effortless customization of default themes.
---

# Customize theme

HeroUI provides `light` and `dark` themes that can be customized to match your needs. You can also create custom themes based on these defaults, using [Layout](/docs/customization/layout) and [Color](/docs/customization/colors) tokens.

<CarbonAd/>

## Customizing Layout

Layout tokens let you customize spacing, typography, borders and more - either globally or per theme.

### Global Layout Customization

You can customize border radius, border width, and disabled opacity across all themes by modifying your `tailwind.config.js` file:

```js {9-19}
// tailwind.config.js
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    heroui({
      layout: {
        disabledOpacity: "0.3", // opacity-[0.3]
        radius: {
          small: "2px", // rounded-small
          medium: "4px", // rounded-medium
          large: "6px", // rounded-large
        },
        borderWidth: {
          small: "1px", // border-small
          medium: "1px", // border-medium
          large: "2px", // border-large
        },
      },
      themes: {
        light: {},
        dark: {},
      },
    }),
  ],
};
```

Layout tokens are used across all HeroUI components. For example, the [Button](/docs/components/button) component uses `radius` and `borderWidth` tokens for its styling. Here's how it looks with the customized values:


```jsx
import {Button} from "@heroui/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Button variant="bordered" radius="md">
        Button
      </Button>
      <Button isDisabled color="primary" radius="md">
        Disabled
      </Button>
    </div>
  );
}
```

<Spacer y={4} />

import customLayout from "@/content/customization/customize-theme/custom-layout";

<CodeDemo title="Custom layout example" showEditor={false} files={customLayout} />

> See the [Layout](/docs/customization/layout#default-layout) section for more details about the available tokens.

### Customizing Colors

Now, Let's say you wish to modify the primary and focus colors of the dark theme. This can 
be achieved by adding the following code to your `tailwind.config.js` file.

```js {10-16}
// tailwind.config.js
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    heroui({
      themes: {
        dark: {
          colors: {
            primary: {
              DEFAULT: "#BEF264",
              foreground: "#000000",
            },
            focus: "#BEF264",
          },
        },
      },
    }),
  ],
};
```

This modification will impact all components using the `primary` color. For instance, 
the [Button](/docs/components/button) component uses the `primary` color as background color when the 
variant is `solid` or `ghost`.

```jsx
import {Button} from "@heroui/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Button color="primary" variant="solid">Solid</Button>
      <Button color="primary" variant="ghost">Ghost</Button>
    </div>
  );
}
```

<Spacer y={4} />

import customColors from "@/content/customization/customize-theme/custom-colors";

<CodeDemo title="Custom colors example" showEditor={false} files={customColors} />

> 🎉 That's it! You have successfully customized the default theme. See the [Colors](/docs/customization/colors) 
> section for more details about the available semantic colors and color tokens. 


--- Содержимое из файла: customize-theme.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\customize-theme.mdx) ---

---
title: Dark mode
description: HeroUI comes with two palette modes light (the default) and dark.
---

# Dark mode

HeroUI supports both `light` and `dark` themes. To enable dark mode, simply add the `dark` class to your root element (`html`, `body`, or `main`).

```jsx {11}
// main.tsx or main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import {HeroUIProvider} from "@heroui/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <HeroUIProvider>
      <main className="dark text-foreground bg-background">
        <App />
      </main>
    </HeroUIProvider>
  </React.StrictMode>,
);
```

This enables dark mode application-wide. For theme switching functionality, you can use a theme library or create a custom implementation.

<CarbonAd/>

## Using next-themes

For [Next.js](/docs/frameworks/nextjs) applications, [next-themes](https://github.com/pacocoursey/next-themes) provides seamless theme switching functionality.

> For more information, refer to the [next-themes](https://github.com/pacocoursey/next-themes) documentation.

### Next.js App Directory Setup

<Steps>

### Install next-themes

Install `next-themes` in your project.

<PackageManagers
  commands={{
    npm: 'npm install next-themes',
    yarn: 'yarn add next-themes',
    pnpm: 'pnpm add next-themes',
  }}
/>


### Add next-themes provider

Wrap your app with the `ThemeProvider` component from `next-themes`.

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the 
Component with the `HeroUIProvider` and the `next-themes` provider components.


```jsx
// app/providers.tsx
"use client";

import {HeroUIProvider} from '@heroui/react'
import {ThemeProvider as NextThemesProvider} from "next-themes";

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      <NextThemesProvider attribute="class" defaultTheme="dark">
        {children}
      </NextThemesProvider>
    </HeroUIProvider>
  )
}
```

> Note: We're using the `class` attribute to switch between themes, this is because HeroUI uses the `className` attribute.

### Add the theme switcher

Add the theme switcher to your app.

```jsx
// app/components/ThemeSwitcher.tsx
"use client";

import {useTheme} from "next-themes";
import { useEffect, useState } from "react";

export function ThemeSwitcher() {
  const [mounted, setMounted] = useState(false)
  const { theme, setTheme } = useTheme()

  useEffect(() => {
    setMounted(true)
  }, [])

  if(!mounted) return null

  return (
    <div>
      The current theme is: {theme}
      <button onClick={() => setTheme('light')}>Light Mode</button>
      <button onClick={() => setTheme('dark')}>Dark Mode</button>
    </div>
  )
};
```

> **Note**: You can use any theme name you want, but make sure it exists in your 
`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.

</Steps>

### Next.js Pages Directory Setup

<Steps>

### Install next-themes

Install `next-themes` in your project.

<PackageManagers
  commands={{
    npm: 'npm install next-themes',
    yarn: 'yarn add next-themes',
    pnpm: 'pnpm add next-themes',
  }}
/>

### Add next-themes provider

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and  wrap the
Component with the `HeroUIProvider` and the `next-themes` provider components.

```jsx
// pages/_app.js
import {HeroUIProvider} from "@heroui/react";
import {ThemeProvider as NextThemesProvider} from "next-themes";

function MyApp({ Component, pageProps }) {
  return (
    <HeroUIProvider>
      <NextThemesProvider attribute="class" defaultTheme="dark">
        <Component {...pageProps} />
      </NextThemesProvider>
    </HeroUIProvider>
  )
}

export default MyApp;
```

> Note: We're using the `class` attribute to switch between themes, this is because HeroUI uses the `className` attribute.

### Add the theme switcher

Add the theme switcher to your app.

```jsx
// components/ThemeSwitcher.tsx
import {useTheme} from "next-themes";

export const ThemeSwitcher = () => {
  const { theme, setTheme } = useTheme()

  return (
    <div>
      The current theme is: {theme}
      <button onClick={() => setTheme('light')}>Light Mode</button>
      <button onClick={() => setTheme('dark')}>Dark Mode</button>
    </div>
  )
};
```

> **Note**: You can use any theme name you want, but make sure it exists in your
`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.

</Steps>


## Using use-theme hook

In case you're using plain React with [Vite](/docs/frameworks/vite) or [Create React App](https://create-react-app.dev/) 
you can use the [@heroui/use-theme](https://github.com/heroui-inc/heroui/tree/canary/packages/hooks/use-theme) hook to switch between themes.

<Steps> 

### Install @heroui/use-theme

Install `@heroui/use-theme` in your project.

<PackageManagers
  commands={{
    npm: 'npm install @heroui/use-theme',
    yarn: 'yarn add @heroui/use-theme',
    pnpm: 'pnpm add @heroui/use-theme',
  }}
/> 

### Add the theme switcher

Add the theme switcher to your app.

```jsx
// 'use client'; // uncomment this line if you're using Next.js App Directory Setup

// components/ThemeSwitcher.tsx
import {useTheme} from "@heroui/use-theme";

export const ThemeSwitcher = () => {
  const { theme, setTheme } = useTheme()

  return (
    <div>
      The current theme is: {theme}
      <button onClick={() => setTheme('light')}>Light Mode</button>
      <button onClick={() => setTheme('dark')}>Dark Mode</button>
    </div>
  )
};
```

> **Note**: You can use any theme name you want, but make sure it exists in your
`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.


</Steps>


--- Содержимое из файла: dark-mode.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\dark-mode.mdx) ---

---
title: Layout
description: HeroUI offers a set of layout options to customize the theme.
---

# Layout

HeroUI provides layout customization options for spacing, fonts, and other visual properties. Layout tokens help maintain consistency across components without modifying Tailwind CSS defaults.

<CarbonAd/>


```js {4,7,11}
module.exports = {
  plugins: [
    heroui({
      layout: {}, // common layout options
      themes: {
        light: {
          layout: {}, // light theme layout options
          // ...
        },
        dark: {
          layout: {}, // dark theme layout options
          // ...
        },
        // ... custom themes
      },
    }),
  ],
};
```

> Layout options are applied to all components.

## Default Layout

Default values for the layout tokens are:

```js
module.exports = {
  plugins: [
    heroui({
      layout: {
        dividerWeight: "1px", // h-divider the default height applied to the divider component
        disabledOpacity: 0.5, // this value is applied as opacity-[value] when the component is disabled
        fontSize: {
          tiny: "0.75rem", // text-tiny
          small: "0.875rem", // text-small
          medium: "1rem", // text-medium
          large: "1.125rem", // text-large
        },
        lineHeight: {
          tiny: "1rem", // text-tiny
          small: "1.25rem", // text-small
          medium: "1.5rem", // text-medium
          large: "1.75rem", // text-large
        },
        radius: {
          small: "8px", // rounded-small
          medium: "12px", // rounded-medium
          large: "14px", // rounded-large
        },
        borderWidth: {
          small: "1px", // border-small
          medium: "2px", // border-medium (default)
          large: "3px", // border-large
        },
      },
      themes: {
        light: {
          layout: {
            hoverOpacity: 0.8, //  this value is applied as opacity-[value] when the component is hovered
            boxShadow: {
              // shadow-small
              small:
                "0px 0px 5px 0px rgb(0 0 0 / 0.02), 0px 2px 10px 0px rgb(0 0 0 / 0.06), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
              // shadow-medium
              medium:
                "0px 0px 15px 0px rgb(0 0 0 / 0.03), 0px 2px 30px 0px rgb(0 0 0 / 0.08), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
              // shadow-large
              large:
                "0px 0px 30px 0px rgb(0 0 0 / 0.04), 0px 30px 60px 0px rgb(0 0 0 / 0.12), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
            },
          },
        },
        dark: {
          layout: {
            hoverOpacity: 0.9, //  this value is applied as opacity-[value] when the component is hovered
            boxShadow: {
              // shadow-small
              small:
                "0px 0px 5px 0px rgb(0 0 0 / 0.05), 0px 2px 10px 0px rgb(0 0 0 / 0.2), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
              // shadow-medium
              medium:
                "0px 0px 15px 0px rgb(0 0 0 / 0.06), 0px 2px 30px 0px rgb(0 0 0 / 0.22), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
              // shadow-large
              large:
                "0px 0px 30px 0px rgb(0 0 0 / 0.07), 0px 30px 60px 0px rgb(0 0 0 / 0.26), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
            },
          },
        },
      },
    }),
  ],
};
```

### CSS Variables

HeroUI creates CSS variables using the format `--prefix-prop-name-scale` for each layout token. By
default the prefix is `heroui`, but you can change it with the `prefix` option.

```js {4}
module.exports = {
  plugins: [
    heroui({
      prefix: "myapp",
    }),
  ],
};
```

Then you can use the CSS variables in your CSS files.

```css
/* With default prefix */
.my-button {
  font-size: var(--heroui-font-size-small);
  line-height: var(--heroui-line-height-small);
  border-radius: var(--heroui-radius-medium);
}

/*  With custom prefix */
.my-component {
  font-size: var(--myapp-font-size-small);
  line-height: var(--myapp-line-height-small);
  border-radius: var(--myapp-radius-medium);
}
```

#### API Reference

| Attribute       | Type                            | Description                                                                                 |
| --------------- | ------------------------------- | ------------------------------------------------------------------------------------------- |
| hoverOpacity    | string, number                  | A number between 0 and 1 that is applied as opacity-[value] when the component is hovered.  |
| disabledOpacity | string, number                  | A number between 0 and 1 that is applied as opacity-[value] when the component is disabled. |
| dividerWeight   | string                          | The default height applied to the divider component. We recommend to use `px` units.        |
| fontSize        | [FontThemeUnit](#fontthemeunit) | The default font size applied across the components.                                        |
| lineHeight      | [FontThemeUnit](#fontthemeunit) | The default line height applied across the components.                                      |
| radius          | [BaseThemeUnit](#basethemeunit) | The default radius applied across the components. We recommend to use `rem` units.          |
| borderWidth     | [BaseThemeUnit](#basethemeunit) | The border width applied across the components.                                             |
| boxShadow       | [BaseThemeUnit](#basethemeunit) | The box shadow applied across the components.                                               |

#### BaseThemeUnit

```ts
export type BaseThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
};
```

#### FontThemeUnit

```ts
export type FontThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
  tiny?: string;
};
```

--- Содержимое из файла: layout.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\layout.mdx) ---

---
title: Override styles
description: HeroUI allows you to override the default styles of the components in several ways.
---

# Override styles

Overriding default component styles is as simple as passing your own class names to the `className`
or to the `classNames` prop for components with slots.

<CarbonAd/>

### What is a Slot?

A slot is a part of a component that can be styled separately using the `classNames` prop. For example, the [CircularProgress](/docs/components/circular-progress) component has slots like `track`, `indicator`, and `value` that can each be styled independently.

### Overriding a component

Let's override the default styles of the [Button](/docs/components/button) component, which is a component that has no slots.

```jsx {7}
import {Button} from "@heroui/react";

export default function App() {
  return (
    <Button
      disableRipple
      className="relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-[''] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-[-1] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0"
      size="lg"
    >
      Press me
    </Button>
  );
}
```

<Spacer y={4}/>

import buttonOverrideExample from "@/content/customization/override-styles/button-example";

<CodeDemo
  isCentered
  title="Override Button styles"
  files={buttonOverrideExample}
  showEditor={false}
  isPreviewCentered={true}
  gradientColor="orange"
  isGradientBox={true}
  previewHeight={160}
  className="py-5"
/>

### Components with slots

Some HeroUI components have slots that can be styled individually using the `classNames` prop. The [CircularProgress](/docs/components/circular-progress) component has the following slots:

- **base**: The base slot of the circular progress, it is the main container.
- **svgWrapper**: The wrapper of the svg circles and the value label.
- **svg**: The svg element of the circles.
- **track**: The track is the background circle of the circular progress.
- **indicator**: The indicator is the one that is filled according to the `value`.
- **value**: The value content.
- **label**: The label content.

The example below demonstrates styling these slots to create a custom circular progress:

import slotsOverrideExample from "@/content/customization/override-styles/slots-example";

```jsx {9-12}
import {CircularProgress, Card, CardBody} from "@heroui/react";

export default function App() {
  return (
    <Card className="w-[240px] h-[240px] bg-gradient-to-br from-violet-500 to-fuchsia-500">
      <CardBody className="justify-center items-center py-0">
        <CircularProgress
          classNames={{
            svg: "w-36 h-36 drop-shadow-md",
            indicator: "stroke-white",
            track: "stroke-white/10",
            value: "text-3xl font-semibold text-white",
          }}
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </CardBody>
    </Card>
  );
}
```

<Spacer y={4}/>

<CodeDemo
  title="Override CircularProgress styles"
  files={slotsOverrideExample}
  showEditor={false}
/>

> **Note**: You will find a `Slots` section in the documentation of each component that has slots.


### CSS Modules

CSS Modules allow for the creation of local scope classes and variables. Here's how 
you can use it to override styles:

```jsx
import {CircularProgress, Card, CardBody} from "@heroui/react";
import styles from './App.module.css';

export default function App() {
  return (
    <Card className={styles.card}>
      <CardBody className={styles.cardBody}>
        <CircularProgress
          classNames={{
            svg: styles.svg,
            indicator: styles.indicator,
            track: styles.track,
            value: styles.value,
          }}
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </CardBody>
    </Card>
  );
}
```

With the corresponding CSS module:

```css
/* App.module.css */
.card {
  width: 240px;
  height: 240px;
  background: linear-gradient(to bottom right, violet, fuchsia);
}

.cardBody {
  justify-content: center;
  align-items: center;
  padding-bottom: 0;
}

.svg {
  width: 36px;
  height: 36px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);
}

.indicator {
  stroke: white;
}

.track {
  stroke: rgba(255, 255, 255, 0.1);
}

.value {
  font-size: 24px;
  font-weight: 600;
  color: white;
}
```

### CSS-in-JS

If you are using a CSS-in-JS library such as [styled-components](https://styled-components.com/) or [emotion](https://emotion.sh/), you can use the following
example to override the styles of a component:


```jsx
import {CircularProgress, Card, CardBody} from "@heroui/react";
import styled from 'styled-components';

const StyledCard = styled(Card)`
  width: 240px;
  height: 240px;
  background: linear-gradient(to bottom right, violet, fuchsia);
`;

const StyledCardBody = styled(CardBody)`
  justify-content: center;
  align-items: center;
  padding-bottom: 0;
`;

const StyledCircularProgress = styled(CircularProgress).attrs({
  classNames: {
    svg: 'w-36 h-36 drop-shadow-md',
    indicator: 'stroke-white',
    track: 'stroke-white/10',
    value: 'text-3xl font-semibold text-white',
  }
})``;

export default function App() {
  return (
    <StyledCard>
      <StyledCardBody>
        <StyledCircularProgress
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </StyledCardBody>
    </StyledCard>
  );
}
```

Each styled component combines the original component styles with custom styles defined in the template strings. The `StyledCircularProgress` uses `.attrs` to add classNames.


--- Содержимое из файла: override-styles.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\override-styles.mdx) ---

---
title: Theme
description: Learn how to customize your application's appearance using HeroUI's TailwindCSS plugin.
---

# Theme

Theming allows you to maintain a consistent look and feel across your application. HeroUI provides theme customization through a TailwindCSS plugin based on [tw-colors](https://github.com/L-Blondy/tw-colors), enabling you to easily customize colors, layouts and other UI elements.

<CarbonAd/>

## What is a Theme?

A theme is a predefined set of colors and layout attributes that ensure visual consistency across your application. It simplifies managing and updating your app's appearance.

## Setup

The first step to using HeroUI's theming capability is adding the `heroui` plugin to your
`tailwind.config.js` file. Below is an example of how to do this:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {9,14-15}
// tailwind.config.js
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()],
};
```

### Usage

After adding the plugin to your `tailwind.config.js` file, you can utilize any of the default
themes (light/dark) or a custom one. Here's how you can apply these themes in your `main.jsx` or `main.tsx`:

Go to the src directory and inside `main.jsx` or `main.tsx`, apply the following class names to the root element:

- `light` for the light theme.
- `dark` for the dark theme.
- `text-foreground` to set the text color.
- `bg-background` to set the background color.

```jsx {11}
// main.tsx or main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import {HeroUIProvider} from "@heroui/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <HeroUIProvider>
      <main className="dark text-foreground bg-background">
        <App />
      </main>
    </HeroUIProvider>
  </React.StrictMode>,
);
```

> **Note**: See the [Colors](/docs/customization/colors) section to learn more about the color classes.

### Default Plugin Options

The `heroui` plugin provides a default structure. It is outlined as follows:

```js
module.exports = {
  plugins: [
    heroui({
      prefix: "heroui", // prefix for themes variables
      addCommonColors: false, // override common colors (e.g. "blue", "green", "pink").
      defaultTheme: "light", // default theme from the themes object
      defaultExtendTheme: "light", // default theme to extend on custom themes
      layout: {}, // common layout tokens (applied to all themes)
      themes: {
        light: {
          layout: {}, // light theme layout tokens
          colors: {}, // light theme colors
        },
        dark: {
          layout: {}, // dark theme layout tokens
          colors: {}, // dark theme colors
        },
        // ... custom themes
      },
    }),
  ],
};
```

### Themes Options

These are the options that you can use to apply custom configurations to your themes.

```js {6-7,10-11}
module.exports = {
  plugins: [
    heroui({
      themes: {
        light: {
          layout: {},
          colors: {}
        },
        dark: {
          layout: {},
          colors: {}
        },
        ... // custom themes
      }
    })
  ]
}
```

### Nested themes

HeroUI supports nested themes, allowing you to apply different themes to different sections
of your application:

```html
<html class="dark">
  ...
  <div class="light">...</div>
  <div class="purple-dark">...</div>
</html>
```

### Theme based variants

HeroUI enables you to apply TailwindCSS styles based on the currently active theme. Below are
examples of how to do this:

```html
<!-- In dark theme, background will be dark and text will be light. 
  In light theme, background will be light and text will be dark -->

<div class="dark dark:bg-gray-800 dark:text-white bg-white text-black">
  ...
  <div>Text color changes based on theme</div>
</div>

<div class="light light:bg-gray-100 light:text-black bg-black text-white">
  ...
  <div>Text color changes based on theme</div>
</div>
```

### API Reference

The following table provides an overview of the various attributes you can use when working
with themes in HeroUI:

| Attribute          | Type                          | Description                                                                                                     | Default  |
| ------------------ | ----------------------------- | --------------------------------------------------------------------------------------------------------------- | -------- |
| prefix             | `string`                      | The prefix for the css variables.                                                                               | `heroui` |
| addCommonColors    | `boolean`                     | If true, the common heroui colors (e.g. "blue", "green", "purple") will replace the TailwindCSS default colors. | `false`  |
| defaultTheme       | `light` \| `dark`             | The default theme to use.                                                                                       | `light`  |
| defaultExtendTheme | `light` \| `dark`             | The default theme to extend.                                                                                    | `light`  |
| layout             | [LayoutTheme](#layouttheme)   | The layout definitions.                                                                                         | -        |
| themes             | [ConfigThemes](#configthemes) | The theme definitions.                                                                                          | -        |

### Types

#### ConfigThemes

```ts
type ConfigTheme = {
  extend?: "light" | "dark"; // base theme to extend
  layout?: LayoutTheme; // see LayoutTheme
  colors?: ThemeColors; // see ThemeColors
};

type ConfigThemes = Record<string, ConfigTheme>;
```

#### LayoutTheme

```ts
type BaseThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
};

type FontThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
  tiny?: string;
};

interface LayoutTheme {
  /**
   * The default font size applied across the components.
   */
  fontSize?: FontThemeUnit;
  /**
   * The default line height applied across the components.
   */
  lineHeight?: FontThemeUnit;
  /**
   * The default radius applied across the components.
   * we recommend to use `rem` units.
   */
  radius?: BaseThemeUnit;
  /**
   * A number between 0 and 1 that is applied as opacity-[value] when
   * the component is disabled.
   */
  disabledOpacity?: string | number;
  /**
   * The default height applied to the divider component.
   * we recommend to use `px` units.
   */
  dividerWeight?: string;
  /**
   * The border width applied across the components.
   */
  borderWidth?: BaseThemeUnit;
  /**
   * The box shadow applied across the components.
   */
  boxShadow?: BaseThemeUnit;
}
```

#### ThemeColors

```ts
type ColorScale = {
  50: string;
  100: string;
  200: string;
  300: string;
  400: string;
  500: string;
  600: string;
  700: string;
  800: string;
  900: string;
  foreground: string; // contrast color
  DEFAULT: string;
};

type BaseColors = {
  background: ColorScale; // the page background color
  foreground: ColorScale; // the page text color
  divider: ColorScale; // used for divider and single line border
  overlay: ColorScale; // used for modal, popover, etc.
  focus: ColorScale; // used for focus state outline
  content1: ColorScale; // used for card, modal, popover, etc.
  content2: ColorScale;
  content3: ColorScale;
  content4: ColorScale;
};

// brand colors
type ThemeColors = BaseColors & {
  default: ColorScale;
  primary: ColorScale;
  secondary: ColorScale;
  success: ColorScale;
  warning: ColorScale;
  danger: ColorScale;
};
```


--- Содержимое из файла: theme.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\customization\theme.mdx) ---

---
title: Astro
description: How to use HeroUI with Astro
---

# Astro

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/astro) or later
- [Framer Motion 11.9](https://www.framer.com/motion/) or later

------

<CarbonAd/>

To use HeroUI in your Astro project, you need to follow the following steps:

<Steps>

### Install React

HeroUI is built on top of React, so you need to install React first. You can follow the official
[integration guide](https://docs.astro.build/en/guides/integrations-guide/react/) to install React.


### Install HeroUI

In your Astro project, run one of the following command to install HeroUI:

<PackageManagers
  commands={{
    npm: 'npm i @heroui/react framer-motion',
    yarn: 'yarn add @heroui/react framer-motion',
    pnpm: 'pnpm add @heroui/react framer-motion',
    bun: "bun add @heroui/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/astro) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.cjs` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,9,14-15}
// tailwind.config.cjs
const { heroui } = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()]
}
```

### Usage

Now you can import HeroUI components and use them in your Astro project:

```markdown
---
import Layout from '../layouts/Layout.astro';
import {Button} from '@heroui/react';
---

<Layout title="Welcome to Astro.">
  <main>
      <Button color="primary" client:visible>My button</Button>
  </main>
</Layout>
```

Note that you have to add `client:visible` to the component to make it visible only on the client side. Otherwise
some functionalities of HeroUI components may not work properly.

</Steps>

--- Содержимое из файла: astro.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\frameworks\astro.mdx) ---

---
title: Laravel
description: How to use HeroUI with Laravel
---

# Laravel

Requirements:

- [Laravel 11](https://laravel.com/)
- [PHP v8.2](https://www.php.net/)
- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/vite#react) or later
- [Framer Motion 11.9](https://www.framer.com/motion/) or later

------

<CarbonAd/>

To use HeroUI in your Laravel project, you need to follow the following steps:

### Using HeroUI + Laravel template

If you are starting a new project, you can run one of the following commands to create a Laravel project pre-configured with HeroUI:

<PackageManagers
  commands={{
    npm: 'npx create-laravel@latest --template https://github.com/heroui-inc/laravel-template',
    yarn: 'yarn create laravel --template https://github.com/heroui-inc/laravel-template',
    pnpm: 'pnpm create laravel --template https://github.com/heroui-inc/laravel-template',
    bun: 'bunx create-laravel@latest --template https://github.com/heroui-inc/laravel-template',
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
heroui add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
heroui add button input
```

Or you can add the main library `@heroui/react` by running the following command:

```codeBlock bash
heroui add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {HeroUIProvider} from '@heroui/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      {children}
    </HeroUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {8,23,25}
// app.tsx or app.jsx
import '../css/app.css';
import './bootstrap';

import { createInertiaApp } from '@inertiajs/react';
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
import { createRoot } from 'react-dom/client';
import { HeroUIProvider } from "@heroui/react";

const appName = import.meta.env.VITE_APP_NAME || 'Laravel';

createInertiaApp({
    title: (title) => `${title} - ${appName}`,
    resolve: (name) =>
        resolvePageComponent(
            `./Pages/${name}.tsx`,
            import.meta.glob('./Pages/**/*.tsx'),
        ),
    setup({ el, App, props }) {
        const root = createRoot(el);

        root.render(
            <HeroUIProvider>
                <App {...props} />
            </HeroUIProvider>
        );
    },
    progress: {
        color: '#4B5563',
    },
});
```

### Manual Installation

<Steps>

### Add dependencies

In your Laravel project, run one of the following command to install HeroUI:

<PackageManagers
  commands={{
    npm: 'npm i @heroui/react framer-motion',
    yarn: 'yarn add @heroui/react framer-motion',
    pnpm: 'pnpm add @heroui/react framer-motion',
    bun: "bun add @heroui/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/vite#react) to install Tailwind CSS. Then you need to add
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,8,13-14}
// tailwind.config.js
const { heroui } = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()]
}
```

### Provider Setup

After installing HeroUI, you need to set up the `HeroUIProvider` at the `root` of your application.

Go to the src directory and inside `app.jsx` or `app.tsx`, wrap `HeroUIProvider` around App:

```jsx {8,23,25}
// app.tsx or app.jsx
import '../css/app.css';
import './bootstrap';

import { createInertiaApp } from '@inertiajs/react';
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
import { createRoot } from 'react-dom/client';
import {HeroUIProvider} from "@heroui/react";

const appName = import.meta.env.VITE_APP_NAME || 'Laravel';

createInertiaApp({
    title: (title) => `${title} - ${appName}`,
    resolve: (name) =>
        resolvePageComponent(
            `./Pages/${name}.tsx`,
            import.meta.glob('./Pages/**/*.tsx'),
        ),
    setup({ el, App, props }) {
        const root = createRoot(el);

        root.render(
            <HeroUIProvider>
                <App {...props} />
            </HeroUIProvider>
        );
    },
    progress: {
        color: '#4B5563',
    },
});
```

</Steps>

--- Содержимое из файла: laravel.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\frameworks\laravel.mdx) ---

---
title: Next.js
description: How to use HeroUI with Next.js
---

# Next.js


Requirements:

- [Next.js 12](https://nextjs.org/) or later
- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/nextjs) or later
- [Framer Motion 11.9](https://www.framer.com/motion/) or later

------

<CarbonAd/>

To use HeroUI in your Next.js project, you need to follow the steps below, depending on your project structure.

## App Directory Setup

Next.js 13's `app/` directory uses Server Components by default. HeroUI components can be imported directly in Server Components since we add `use client` at build time.

### HeroUI CLI (recommended)

If you are starting a new project, you can use the HeroUI CLI to create a new project with HeroUI pre-configured:

<Spacer y={4}/>

```bash
npx heroui-cli@latest init -t app
```

or

<PackageManagers
  commands={{
    npm: 'npx heroui-cli@latest init -t app',
    yarn: 'yarn dlx heroui-cli@latest init -t app',
    pnpm: 'pnpm dlx heroui-cli@latest init -t app',
    bun: "bunx heroui-cli@latest init -t app"
  }}
/>

### create-next-app 

If you are starting a new project, you can run one of the following commands to create a Next.js project pre-configured with HeroUI:

<PackageManagers
  commands={{
    npm: 'npx create-next-app -e https://github.com/heroui-inc/next-app-template',
    yarn: 'yarn create next-app -e https://github.com/heroui-inc/next-app-template',
    pnpm: 'pnpm create next-app -e https://github.com/heroui-inc/next-app-template',
    bun: 'bunx create-next-app -e https://github.com/heroui-inc/next-app-template'
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
npx heroui-cli@latest add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
npx heroui-cli@latest add button input
```

Or you can add the main library `@heroui/react` by running the following command:

```codeBlock bash
npx heroui-cli@latest add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {HeroUIProvider} from '@heroui/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      {children}
    </HeroUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {6,10,12,14}
// app/layout.tsx

// globals.css includes @tailwind directives
// adjust the path if necessary
import "@/styles/globals.css";
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

### Manual Installation

<Steps>

### Add dependencies

In your Next.js project, run one of the following commands to install HeroUI:

<PackageManagers
  commands={{
    npm: 'npm i @heroui/react framer-motion',
    yarn: 'yarn add @heroui/react framer-motion',
    pnpm: 'pnpm add @heroui/react framer-motion',
    bun: "bun add @heroui/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,9,14-15}
// tailwind.config.js
import {heroui} from "@heroui/react";

/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()]
}

export default config;
```

### Setup Provider

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the Component with the `HeroUIProvider`:

```jsx {4,8,10}
// app/providers.tsx
'use client'

import {HeroUIProvider} from '@heroui/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      {children}
    </HeroUIProvider>
  )
}
```

### Add Provider to Root

Now, Go to your `root` layout page and wrap it with the `Providers`:

```jsx {6,10,12,14}
// app/layout.tsx

// globals.css includes @tailwind directives
// adjust the path if necessary
import "@/styles/globals.css";
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

> **Note**: HeroUI automatically adds two themes, `light` and `dark`, to your application. You can use any 
of them by adding the `dark`/`light` class to the `html` tag. See the [theme docs](/docs/customization/customize-theme) for more details.


### Use HeroUI Components

Now you can import any HeroUI component directly in your Server Components without needing to use
the `use client;` directive:

```jsx {2,7}
// app/page.tsx
import {Button} from '@heroui/button'; 

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```
> **Important 🚨**: Note that you need to import the component from the individual package, not from `@heroui/react`. 

</Steps>

---

## Pages Directory Setup 

### HeroUI CLI (recommended)

If you are starting a new project, you can use the HeroUI CLI to create a new project with HeroUI pre-configured:

<Spacer y={4}/>

```bash
npx heroui-cli@latest init -t pages
```

If you are using the `/pages` Next.js project structure, you need to follow the steps below.

### create-next-app 

If you are starting a new project, you can run one of the following commands to create a Next.js project pre-configured with HeroUI:

<PackageManagers
  commands={{
    npm: 'npx create-next-app -e https://github.com/heroui-inc/next-pages-template',
    yarn: 'yarn create next-app -e https://github.com/heroui-inc/next-pages-template',
    pnpm: 'pnpm create next-app -e https://github.com/heroui-inc/next-pages-template'
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
npx heroui-cli@latest add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
npx heroui-cli@latest add button input
```

Or you can add the main library `@heroui/react` by running the following command:

```codeBlock bash
npx heroui-cli@latest add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {HeroUIProvider} from '@heroui/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      {children}
    </HeroUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {6,10,12,14}
// app/layout.tsx

// globals.css includes @tailwind directives
// adjust the path if necessary
import "@/styles/globals.css";
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

### Manual Installation

<Steps>

### Add dependencies

In your Next.js project, run one of the following commands to install HeroUI:

<PackageManagers
  commands={{
    npm: 'npm i @heroui/react framer-motion',
    yarn: 'yarn add @heroui/react framer-motion',
    pnpm: 'pnpm add @heroui/react framer-motion',
    bun: "bun add @heroui/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,9,14-15}
// tailwind.config.js
import {heroui} from "@heroui/react";

/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()]
}

export default config;
```

### Setup Provider

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and wrap the Component with the `HeroUIProvider`:

```jsx {2,6,8}
// pages/_app.js
import {HeroUIProvider} from '@heroui/react'

function MyApp({ Component, pageProps }) {
  return (
    <HeroUIProvider>
      <Component {...pageProps} />
    </HeroUIProvider>
  )
}

export default MyApp;
```

### Use HeroUI Components

Now you can import any HeroUI component wherever you want:

```jsx {1,6}
import {Button} from '@heroui/react'

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```
</Steps>


--- Содержимое из файла: nextjs.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\frameworks\nextjs.mdx) ---

---
title: Remix
description: How to use HeroUI with Remix
---

# Remix

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/remix) or later
- [Framer Motion 11.9](https://www.framer.com/motion/) or later

------

<CarbonAd/>

To use HeroUI in your Remix project, you need to follow the following steps:

### Using HeroUI + Remix template

If you are starting a new project, you can run one of the following commands to create a Remix project pre-configured with HeroUI:

<PackageManagers
  commands={{
    npm: 'npx create-remix@latest --template https://github.com/heroui-inc/remix-template',
    yarn: 'yarn create remix --template https://github.com/heroui-inc/remix-template',
    pnpm: 'pnpm create remix --template https://github.com/heroui-inc/remix-template',
    bun: 'bunx create-remix@latest --template https://github.com/heroui-inc/remix-template',
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
npx heroui-cli@latest add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
npx heroui-cli@latest add button input
```

Or you can add the main library `@heroui/react` by running the following command:

```codeBlock bash
npx heroui-cli@latest add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {HeroUIProvider} from '@heroui/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      {children}
    </HeroUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {6,10,12,14}
// app/layout.tsx

// globals.css includes @tailwind directives
// adjust the path if necessary
import "@/styles/globals.css";
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

### Manual Installation

<Steps>

### Add dependencies

In your Remix project, run one of the following command to install HeroUI:

<PackageManagers
  commands={{
    npm: 'npm i @heroui/react framer-motion',
    yarn: 'yarn add @heroui/react framer-motion',
    pnpm: 'pnpm add @heroui/react framer-motion',
    bun: "bun add @heroui/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/remix) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```ts {2,10,15-16}
// tailwind.config.ts
const { heroui } = require("@heroui/react");

import type { Config } from 'tailwindcss'

export default {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()]
} satisfies Config
```

### Provider Setup

After installing HeroUI, you need to set up the `HeroUIProvider` at the `root` of your application.

Go to the src directory and inside `root.tsx`, wrap `HeroUIProvider` around App:

```tsx {9,19,24}
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";
import {HeroUIProvider} from "@heroui/react";

export default function App() {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        <HeroUIProvider>
          <Outlet />
          <ScrollRestoration />
          <Scripts />
          <LiveReload />
        </HeroUIProvider>
      </body>
    </html>
  );
}
```

</Steps>

--- Содержимое из файла: remix.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\frameworks\remix.mdx) ---

---
title: Vite
description: How to use HeroUI with Vite
---

# Vite

Requirements:

- [Vite 2](https://vitejs.dev/) or later
- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/vite#react) or later
- [Framer Motion 11.9](https://www.framer.com/motion/) or later

------

<CarbonAd/>

To use HeroUI in your Vite project, you need to follow the following steps:

### HeroUI CLI (recommended)

If you are starting a new project, you can use the [HeroUI CLI](/docs/guide/cli) to create a new project with HeroUI pre-configured:

<PackageManagers
  commands={{
    npm: 'npx heroui-cli@latest init -t vite',
    yarn: 'yarn dlx heroui-cli@latest init -t vite',
    pnpm: 'pnpm dlx heroui-cli@latest init -t vite',
    bun: "bunx heroui-cli@latest init -t vite"
  }}
/>

### Using HeroUI + Vite template

If you are starting a new project, you can run one of the following commands to create a Vite project pre-configured with HeroUI:

<PackageManagers
  commands={{
    npm: 'npx degit https://github.com/heroui-inc/vite-template my-vite-app',
    yarn: 'yarn dlx degit https://github.com/heroui-inc/vite-template my-vite-app',
    pnpm: 'pnpm dlx degit https://github.com/heroui-inc/vite-template my-vite-app',
    bun: 'bunx degit https://github.com/heroui-inc/vite-template my-vite-app',
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
npx heroui-cli@latest add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
npx heroui-cli@latest add button input
```

Or you can add the main library `@heroui/react` by running the following command:

```codeBlock bash
npx heroui-cli@latest add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {HeroUIProvider} from '@heroui/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <HeroUIProvider>
      {children}
    </HeroUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {6,10,12,14}
// app/layout.tsx

// globals.css includes @tailwind directives
// adjust the path if necessary
import "@/styles/globals.css";
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

### Manual Installation

<Steps>

### Add dependencies

In your Vite React project, run one of the following command to install HeroUI:

<PackageManagers
  commands={{
    npm: 'npm i @heroui/react framer-motion',
    yarn: 'yarn add @heroui/react framer-motion',
    pnpm: 'pnpm add @heroui/react framer-motion',
    bun: "bun add @heroui/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/vite#react) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,8,13-14}
// tailwind.config.js
const { heroui } = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()]
}
```

### Provider Setup

After installing HeroUI, you need to set up the `HeroUIProvider` at the `root` of your application.

Go to the src directory and inside `main.jsx` or `main.tsx`, wrap `HeroUIProvider` around App:

```jsx {4,10,12}
// main.tsx or main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import {HeroUIProvider} from '@heroui/react'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <HeroUIProvider>
      <App />
    </HeroUIProvider>
  </React.StrictMode>,
)
```

</Steps>

--- Содержимое из файла: vite.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\frameworks\vite.mdx) ---

---
title: CLI
description: Use the CLI to manage and enhance your HeroUI project components.
---

# CLI

The CLI offers a comprehensive suite of commands to initialize, manage, and improve your HeroUI projects. It enables you to `add`, `remove`, or `upgrade` individual components, assess the health of your project, and more.

## Installation

Requirements:

- [Node.js version 18.17.x or later](https://nodejs.org/en/)

<CarbonAd/>

<Steps>

### Global Installation

To install the `CLI` globally, execute one of the following commands in your terminal:

<PackageManagers
  commands={{
    npm: "npm install heroui-cli -g",
    yarn: "yarn add heroui-cli -g",
    pnpm: "pnpm add heroui-cli -g",
    bun: "bun add heroui-cli -g",
  }}
/>

### Without Installation

Alternatively, you can use the `CLI` without a global installation by running the following command:

<PackageManagers
  commands={{
    npm: "npx heroui-cli@latest",
    yarn: "yarn dlx heroui-cli@latest",
    pnpm: "pnpm dlx heroui-cli@latest",
    bun: "bunx heroui-cli@latest",
  }}
/>

</Steps>

## Quick Start

Once the `CLI` is installed, run the following command to display available commands:

```codeBlock bash
heroui
```

This will produce the following help output:

```codeBlock bash
HeroUI CLI <version>

A command line tool for seamless integration with HeroUI

Usage: heroui [command]

Options:
  -v, --version  Show the version number
  --no-cache     Disable cache, by default data will be cached for 30m after the first request
  -h, --help     Display help for commands

Commands:
  init [options] [projectName]       Start a new HeroUI project
  add [options] [components...]      Add HeroUI components to your project
  upgrade [options] [components...]  Update HeroUI components to the latest versions
  remove [options] [components...]   Remove HeroUI components from your project
  list [options]                     Show details of installed components
  env [options]                      Display debug information about the local environment
  doctor [options]                   Diagnose problems in your project
  help [command]                     Get help on a specific command
```

## init

Initialize a new HeroUI project using the `init` command. This sets up your project with the necessary configurations.

```codeBlock bash
heroui init my-heroui-app
```

<Spacer y={4} />

You will be prompted to configure your project:

```codeBlock bash
┌  Create a new project
│
◇  Select a template (Enter to select)
│  ● App (A Next.js 14 with app directory template pre-configured with HeroUI (v2) and Tailwind CSS.)
│  ○ Pages (A Next.js 14 with pages directory template pre-configured with HeroUI (v2) and Tailwind CSS.)
│  ○ Vite (A Vite template pre-configured with HeroUI (v2) and Tailwind CSS.)
│
◇  New project name (Enter to skip with default name)
│  my-heroui-app
│
◇  Select a package manager (Enter to select)
│  ● npm
│  ○ yarn
│  ○ pnpm
│  ○ bun
│
◇  Template created successfully!
│
◇  Next steps ───────╮
│                    │
│  cd my-heroui-app  │
│  npm install       │
│                    │
├────────────────────╯
│
└  🚀 Get started with npm run dev
```

Install the dependencies to start the local server:

<PackageManagers
  commands={{
    npm: "cd my-heroui-app && npm install",
    yarn: "cd my-heroui-app && yarn install",
    pnpm: "cd my-heroui-app && pnpm install",
    bun: "cd my-heroui-app && bun install",
  }}
/>

Start the local server:

<PackageManagers
  commands={{
    npm: "npm run dev",
    yarn: "yarn run dev",
    pnpm: "pnpm run dev",
    bun: "bun run dev",
  }}
/>

## add

Add components to your HeroUI project with the add command. This command manages component dependencies and updates your project configurations.

Without specifying a specific component:

```codeBlock bash
heroui add
```

<Spacer y={4} />

You will be prompted to select the components you wish to add:

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

To add a specific component:

```codeBlock bash
heroui add button
```

You will see an output confirming the addition of the component:

```codeBlock bash
Adding the required dependencies: @heroui/button

Tailwind CSS settings have been updated in: /project-path/tailwind.config.js

✅ Components added successfully
```

## upgrade

Upgrade all the HeroUI components within your project.

```codeBlock bash
heroui upgrade --all
```

Upgrade specific HeroUI components within your project using the upgrade command to ensure they are up to date.

```codeBlock bash
heroui upgrade button
```

You will be asked to confirm the upgrade:

```codeBlock bash

╭───────────────────────── Component ─────────────────────────╮
│  @heroui/button              ^2.0.11  ->  ^2.0.31       │
╰─────────────────────────────────────────────────────────────╯

Required min version: @heroui/theme>=2.1.0, tailwindcss>=3.4.0
╭───────────────────── PeerDependencies ─────────────────────╮
│  @heroui/theme               2.0.1    ->  2.1.0        │
│  tailwindcss                     ^3.2.3   ->  ^3.4.0       │
╰────────────────────────────────────────────────────────────╯
2 minor, 1 patch

? Would you like to proceed with the upgrade? › - Use arrow-keys. Return to submit.
❯   Yes
    No
```

Upon confirmation, the command will execute and provide an output similar to:

```codeBlock bash
✅ Upgrade complete. All components are up to date.
```

## remove

Remove components from your HeroUI project with the remove command. This helps in managing the project's
component structure and dependencies.

```codeBlock bash
heroui remove button
```

A confirmation prompt will be displayed:

```codeBlock bash
❗️ Components slated for removal:
╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package              │   Version              │   Status   │   Docs                                        │
│──────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @heroui/button   │   2.0.27 🚀latest      │   stable   │   https://heroui.com/docs/components/button   │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

? Confirm removal of these components: › - Use arrow-keys. Return to submit.
❯   Yes
    No
```

Following confirmation, the output will indicate successful removal:

```codeBlock bash
✅ Successfully removed the specified HeroUI components: @heroui/button
```

## list

List all installed HeroUI components in your project with the list command. This provides a clear overview of what is currently included in your project.

```codeBlock bash
heroui list
```

The output will detail each component:

```codeBlock bash
Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @heroui/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://heroui.com/docs/components/autocomplete   │
│   @heroui/badge          │   2.0.24 🚀latest      │   stable    │   https://heroui.com/docs/components/badge          │
│   @heroui/button         │   2.0.27 🚀latest      │   stable    │   https://heroui.com/docs/components/button         │
│   @heroui/chip           │   2.0.25 🚀latest      │   stable    │   https://heroui.com/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
```

## doctor

Diagnose and resolve issues within your project using the doctor command. This ensures your project's health and proper configuration.

```codeBlock bash
heroui doctor
```

Depending on your project's status, you might see:

```codeBlock bash
✅ Your project has no detected issues.
```

Or, if issues are detected:

```codeBlock bash
❌ Your project has 1 issue that requires attention
```

## env

Display detailed information about your project's environment settings using the env command. This includes system, dependencies, and configuration details.

```codeBlock bash
heroui env
```

The output will reflect your current environment setup:

```codeBlock bash
Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @heroui/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://heroui.com/docs/components/autocomplete   │
│   @heroui/badge          │   2.0.24 🚀latest      │   stable    │   https://heroui.com/docs/components/badge          │
│   @heroui/button         │   2.0.27 🚀latest      │   stable    │   https://heroui.com/docs/components/button         │
│   @heroui/chip           │   2.0.25 🚀latest      │   stable    │   https://heroui.com/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Environment Info:
  System:
    OS: darwin
    CPU: arm64
  Binaries:
    Node: v18.18.2
```

## API Reference

Explore the complete CLI commands and features in the [API References](/docs/api-references/cli-api).

For updates and source code, visit the [GitHub Repository](https://github.com/heroui-inc/heroui-cli).


--- Содержимое из файла: cli.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\cli.mdx) ---

---
title: Design Principles
description: Understand the fundamental design and API decisions behind the development of HeroUI.
---

# Design Principles

The development of HeroUI has been guided by a set of specific design and API principles.
These principles serve as the foundation for our library and play a crucial role in ensuring
the efficiency, effectiveness, and user-friendliness of the components we offer.

### Simplicity and Usability

Simplicity is the ultimate sophistication. At HeroUI, we believe in delivering simple and
intuitive components. Our design process centers around the user, ensuring that we deliver
tools that are easy to understand, configure, and implement, regardless of a developer's
expertise level.

### Modular Design

Each component in HeroUI is designed as a standalone module. This modular approach allows
developers to import and use only what they need, leading to lighter applications and faster
load times.

### Customization and Flexibility

HeroUI is designed with customization at its core. Whether it's theming or overriding styles,
we provide developers with comprehensive control over the aesthetics of the components. Our
integration with the [TailwindCSS](https://tailwindcss.com/) and [Tailwind Variants](https://tailwind-variants.org)
library and simplifies the customization process and enables an extensive range of design possibilities.

### Consistent API

HeroUI maintains a consistent API across all components. We've ensured that common attributes
function identically across different components, allowing developers to anticipate component
behavior and thus reducing the learning curve.

### Accessibility

We are committed to ensuring that our components are accessible to all users.
In the development of HeroUI, accessibility standards and guidelines have been adhered to,
ensuring our components work effectively with assistive technologies. For further information
on how to make your web applications more accessible, refer to [React Spectrum](https://react-spectrum.adobe.com/react-aria/index.html).

### Component Slots

To provide maximum flexibility, many HeroUI components have `slots`, allowing developers to
inject custom styles or content in specific areas of a component. Each slot can be individually
styled, offering granular control over the appearance and behavior of the component.

<Spacer y={4}/>

Through these principles, we aim to make HeroUI an effective, efficient, and enjoyable tool
for developers to use. As we continue to expand and enhance HeroUI, these guiding principles
will remain central to our design and development processes.

<Spacer y={4}/>

<CarbonAd/>

--- Содержимое из файла: design-principles.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\design-principles.mdx) ---

---
title: Figma
description: HeroUI Figma Kit helps you design beautiful and consistent user interfaces using our component library in Figma.
---

# Figma Kit

HeroUI components recreated in Figma. It includes components, colors, and typography from the HeroUI design system.

<iframe
  className="w-full border border-transparent dark:border-default-200/50 object-fit rounded-xl shadow-lg aspect-video"
  height="600"
  src="https://embed.figma.com/file/1267584376234254760/hf_embed?community_viewer=true&embed_host=heroui"
  title="HeroUI Figma Kit"
  width="800"
/>

<Spacer y={4} />

<FigmaButton />

## What is HeroUI Figma Kit?

HeroUI Figma Kit is a comprehensive design resource that contains the foundation of the HeroUI design system. It helps designers and developers create consistent and beautiful user interfaces using our component library.


<Blockquote color="warning">
  This file is still in development and will be continuously updated.
</Blockquote>

---

## FAQ

### How can I access the Figma Kit?

<div className="text-default-600 dark:text-default-500">
  You can access the HeroUI Figma Kit by clicking the "Open in Figma" button above. The kit is free and available to anyone with a Figma account.
</div>

### Is the Figma Kit kept up to date with the component library?

<div className="text-default-600 dark:text-default-500">
  Yes, we strive to keep the Figma Kit synchronized with our component library. However, as noted above, the kit is still in development and continuously being updated.
</div>

### Can I use the Figma Kit for my projects?

<div className="text-default-600 dark:text-default-500">
  Yes, you can use the HeroUI Figma Kit for both personal and commercial projects. We encourage you to use it as a starting point for your designs.
</div>

### Are the components in the Figma Kit responsive?

<div className="text-default-600 dark:text-default-500">
  The components in the Figma Kit are designed with responsiveness in mind, matching the behavior of our React components. You can find examples of different viewport sizes and component states.
</div>



--- Содержимое из файла: figma.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\figma.mdx) ---

---
title: Forms
description: Learn how to handle forms in HeroUI.
---

import {formContent} from "@/content/components/form";

# Forms

HeroUI provides form components with built-in validation and styling to help users input and submit data effectively.

<CarbonAd />

<CodeDemo title="Demo" files={formContent.demo} />

## Labels and help text

Accessible forms start with clear, descriptive labels for each field. All HeroUI form components support labeling using
the Label component, which is automatically associated with the field via the id and for attributes on your behalf.

In addition, HeroUI components support help text, which associates additional context with a field such as a **description**
or **error message**. The label and help text are announced by assistive technology such as screen readers when the user focuses
the field.

```tsx {5,6}
import {Input} from "@heroui/react";

<Input
  type="password"
  label="Password"
  description="Password must be at least 8 characters."
/>;
```

Most fields should have a visible label. In rare exceptions, the `aria-label` or `aria-labelledby` attribute must be provided instead to identify the element to screen readers.

## Submitting data

How you submit form data depends on your framework, application, and server. By default, **HTML** forms are submitted via a full-page refresh in the browser.
You can call `preventDefault` in the `onSubmit` event to handle form data submission via an API.

Frameworks like [Next.js](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms), [Remix](https://remix.run/docs/en/main/guides/forms), and [React Router](https://reactrouter.com/en/main/route/form-submission) provide their own ways to handle form submission.

#### Uncontrolled forms

A simple way to get form data is to use the browser's [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) API during the `onSubmit` event. You can send this data to a backend API or convert it into a JavaScript object using [Object.fromEntries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries).
Each field should have a `name` prop to identify it, and the values will be serialized as strings by the browser.

```tsx {12,15}
import * as React from "react";
import {Button, Form, Input} from "@heroui/react";

function Example() {
  const [submitted, setSubmitted] = React.useState(null);

  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    // Prevent default browser page refresh.
    e.preventDefault();

    // Get form data as an object.
    const data = Object.fromEntries(new FormData(e.currentTarget));

    // Submit data to your backend API.
    setSubmitted(data);
  };

  return (
    <Form onSubmit={onSubmit}>
      <Input
        isRequired
        errorMessage="Please enter a valid email"
        label="Email"
        labelPlacement="outside"
        name="email"
        placeholder="Enter your email"
        type="email"
      />
      <Button type="submit">Submit</Button>
      {submitted && (
        <div className="text-small text-default-500">
          You submitted: <code>{JSON.stringify(submitted)}</code>
        </div>
      )}
    </Form>
  );
}
```

<Spacer y={4} />

<CodeDemo title="Usage" showEditor={false} files={formContent.usage} />

#### Controlled forms

HeroUI form components are uncontrolled by default, but if you need to manage state in real-time, you can use the `useState` hook to make the component controlled.

```tsx {5,26-27}
import * as React from "react";
import {Button, Form, Input} from "@heroui/react";

function Example() {
  const [email, setEmail] = React.useState("");
  const [submitted, setSubmitted] = React.useState(null);

  const onSubmit = (e) => {
    e.preventDefault();

    const data = Object.fromEntries(new FormData(e.currentTarget));

    setSubmitted(data);
  };

  return (
    <Form className="w-full max-w-xs" onSubmit={onSubmit}>
      <Input
        isRequired
        errorMessage="Please enter a valid email"
        label="Email"
        labelPlacement="outside"
        name="email"
        placeholder="Enter your email"
        type="email"
        value={email}
        onValueChange={setEmail}
      />
      <Button type="submit" variant="bordered">
        Submit
      </Button>
      {submitted && (
        <div className="text-small text-default-500">
          You submitted: <code>{JSON.stringify(submitted)}</code>
        </div>
      )}
    </Form>
  );
}
```

<Spacer y={4} />

<CodeDemo title="Controlled" showEditor={false} files={formContent.controlled} />


#### Customizing error messages

By default, error messages are provided by the browser.
You can customize these messages by providing a function to the `errorMessage` prop.

```tsx {12-16}
import {Form, Input, Button} from "@heroui/react";

export default function App() {
  const onSubmit = (e) => {
    e.preventDefault();
  };

  return (
    <Form onSubmit={onSubmit}>
      <Input
        isRequired
        errorMessage={({validationDetails}) => {
          if (validationDetails.valueMissing) {
            return "Please enter a valid name";
          }
        }}
        label="Name"
        labelPlacement="outside"
        name="name"
        placeholder="Enter your name"
        type="text"
      />
      <Button type="submit" variant="bordered">
        Submit
      </Button>
    </Form>
  );
}
```

<Spacer y={4} />

<CodeDemo
  title="Custom error messages"
  showEditor={false}
  files={formContent.customErrorMessages}
/>

> **Note**: The default error messages are localized by the browser based on the browser/operating system language settings. The [locale setting in HeroUI Provider](/docs/api-references/heroui-provider#props) does not affect validation errors.


## Validation

Form validation is crucial for ensuring that users enter the correct data.
HeroUI supports native HTML constraint validation and allows for custom validation and real-time validation.

#### Built-in validation

HeroUI form components support [native HTML validation](https://developer.mozilla.org/docs/Web/HTML/Constraint_validation) attributes like `isRequired` and `minLength`.
These constraints are checked by the browser when the user commits changes (e.g., on blur) or submits the form.
You can display validation errors with custom styles instead of the browser's default UI.

```tsx {10}
import {Form, Input, Button} from "@heroui/react";

export default function App() {
  const onSubmit = (e) => {
    e.preventDefault();
  };

  return (
    <Form onSubmit={onSubmit}>
      <Input
        isRequired
        label="Email"
        labelPlacement="outside"
        name="email"
        placeholder="Enter your email"
        type="email"
      />
      <Button type="submit" variant="bordered">
        Submit
      </Button>
    </Form>
  );
}
```

To enable ARIA validation, set `validationBehavior="aria"`.
When`validationBehavior="aria"` is set, fields are only marked as required or invalid for assistive technologies, without preventing form submission.
You can change the form defaults for your entire app using [HeroUI Provider](/docs/api-references/heroui-provider).

Supported constraints include:

- `isRequired` indicates that a field must have a value before the form can be submitted.
- `minValue` and `maxValue` specify the minimum and maximum value in a date picker or number input.
- `minLength` and `maxLength` specify the minimum and length of text input.
- `pattern` provides a custom regular expression that a text input must conform to.
- `type="email"` and `type="url"` provide built-in validation for email addresses and URLs.

See each component's documentation for more details on the supported validation props.

<Spacer y={4} />

<CodeDemo title="Native validation" showEditor={false} files={formContent.nativeValidation} />

#### Custom validation

In addition to built-in constraints, you can provide a function to the `validate` prop to support custom validation.

```tsx {17-23}
import {Form, Input, Button} from "@heroui/react";

export default function App() {
  const onSubmit = (e) => {
    e.preventDefault();
  };

  return (
    <Form onSubmit={onSubmit}>
      <Input
        isRequired
        label="Username"
        labelPlacement="outside"
        name="username"
        placeholder="Enter your username"
        type="text"
        validate={(value) => {
          if (value.length < 3) {
            return "Username must be at least 3 characters long";
          }

          return value === "admin" ? "Nice try!" : null;
        }}
      />
      <Button type="submit" variant="bordered">
        Submit
      </Button>
    </Form>
  );
}
```

<Spacer y={4} />

<CodeDemo title="Custom validation" showEditor={false} files={formContent.customValidation} />

#### Realtime validation

If you want to display validation errors while the user is typing, you can control the field value and use the `isInvalid` prop along with the `errorMessage` prop.

```tsx {19-26,30,32}
import {Input} from "@heroui/react";

export function Example() {
  const [password, setPassword] = React.useState("");
  const errors = [];

  if (password.length < 4) {
    errors.push("Password must be 4 characters or more.");
  }
  if ((password.match(/[A-Z]/g) || []).length < 1) {
    errors.push("Password must include at least 1 upper case letter");
  }
  if ((password.match(/[^a-z]/gi) || []).length < 1) {
    errors.push("Password must include at least 1 symbol.");
  }

  return (
    <Input
      errorMessage={() => (
        <ul>
          {errors.map((error, i) => (
            <li key={i}>{error}</li>
          ))}
        </ul>
      )}
      isInvalid={errors.length > 0}
      label="Password"
      labelPlacement="outside"
      placeholder="Enter your password"
      value={password}
      variant="bordered"
      onValueChange={setPassword}
    />
  );
}
```

<Spacer y={4} />

<CodeDemo title="Realtime validation" showEditor={false} files={formContent.realTimeValidation} />

Use `validationBehavior="aria"` to allow form submission even when fields are invalid, while maintaining accessibility.

#### Server validation

Client-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.
HeroUI allows you to display server-side validation errors by using the `validationErrors` prop in the `Form` component.
This prop should be an object where each key is the field `name` and the value is the error message.

```tsx {4,17,25-26}
import {Button, Form, Input} from "@heroui/react";

function Example() {
  const [errors, setErrors] = React.useState({});

  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const data = Object.fromEntries(new FormData(e.currentTarget));

    if (!data.username) {
      setErrors({username: "Username is required"});

      return;
    }

    const result = await callServer(data);

    setErrors(result.errors);
  };

  return (
    <Form
      className="w-full max-w-xs flex flex-col gap-3"
      validationErrors={errors}
      onSubmit={onSubmit}
    >
      <Input
        label="Username"
        labelPlacement="outside"
        name="username"
        placeholder="Enter your username"
      />
      <Button type="submit" variant="flat">
        Submit
      </Button>
    </Form>
  );
}

// Fake server used in this example.
function callServer(data) {
  return {
    errors: {
      username: "Sorry, this username is taken.",
    },
  };
}
```

<Spacer y={4} />

<CodeDemo title="Server validation" showEditor={false} files={formContent.serverValidation} />

#### Schema validation

HeroUI supports errors from schema validation libraries like [Zod](https://zod.dev/).
You can use Zod's `flatten` method to get error messages for each field and return them as part of the server response.

```tsx {14}
// In your server.
import {z} from "zod";

const schema = z.object({
  name: z.string().min(1),
  age: z.coerce.number().positive(),
});

function handleRequest(formData: FormData) {
  const result = schema.safeParse(Object.fromEntries(formData));

  if (!result.success) {
    return {
      errors: result.error.flatten().fieldErrors,
    };
  }

  // Do something with the validated data.

  return {
    errors: {},
  };
}
```

### React Server Actions

[Server Actions](https://react.dev/reference/rsc/server-actions) that allows seamless form submission to the server and retrieval of results.
The [useActionState](https://react.dev/reference/react/useActionState) hook can be used to get the result of server actions (such as errors) after submitting a form.

```tsx {9-11,14}
// app/add-form.tsx
"use client";

import {useActionState} from "react";
import {Button, Input, Label} from "@heroui/react";
import {createTodo} from "@/app/actions";

export function AddForm() {
  const [{errors}, formAction] = useActionState(createTodo, {
    errors: {},
  });

  return (
    <Form action={formAction} validationErrors={errors}>
      <Input name="todo" label="Task" />
      <Button type="submit">Add</Button>
    </Form>
  );
}
```

<Spacer y={4} />

```ts {10}
// app/actions.ts
"use server";

export async function createTodo(prevState: any, formData: FormData) {
  try {
    // Create the todo.
  } catch (err) {
    return {
      errors: {
        todo: "Invalid todo.",
      },
    };
  }
}
```

### Remix

[Remix actions](https://remix.run/docs/en/main/route/action) handle form submissions on the server.
You can use the [useSubmit](https://remix.run/docs/en/main/hooks/use-submit) hook to submit form data to the server and the [useActionData](https://remix.run/docs/en/main/hooks/use-action-data) hook to retrieve validation errors from the server.

```tsx {13,18,34}
// app/routes/signup.tsx
import type {ActionFunctionArgs} from "@remix-run/node";
import {useActionData, useSubmit} from "@remix-run/react";
import {Button, Form, Input} from "@heroui/react";

export default function SignupForm() {
  let submit = useSubmit();
  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    submit(e.currentTarget);
  };

  const actionData = useActionData<typeof action>();

  return (
    <Form
      method="post"
      validationErrors={actionData?.errors}
      onSubmit={onSubmit}
    >
      <Input label="Username" name="username" />
      <Input label="Password" name="password" type="password" />
      <Button type="submit">Submit</Button>
    </Form>
  );
}

export async function action({request}: ActionFunctionArgs) {
  try {
    // Validate data and perform action...
  } catch (err) {
    return {
      errors: {
        username: "Sorry, this username is taken.",
      },
    };
  }
}
```

<Spacer y={4} />

## Form libraries

In most cases, the built-in validation features of HeroUI are sufficient. However, if you're building more complex forms or integrating HeroUI components into an existing form, you can use a form library like [React Hook Form](https://react-hook-form.com/) or [Formik](https://formik.org/).

#### React Hook Form

You can integrate HeroUI components using [Controller](https://react-hook-form.com/docs/usecontroller/controller).
Controller allows you to manage field values and validation errors, and reflect the validation result in HeroUI components.

```tsx
import {Controller, useForm} from "react-hook-form";
import {Button, Input, Label} from "@heroui/react";

function App() {
  const {handleSubmit, control} = useForm({
    defaultValues: {
      name: "",
    },
  });

  const onSubmit = (data) => {
    // Call your API here.
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)}>
      <Controller
        control={control}
        name="name"
        render={({field: {name, value, onChange, onBlur, ref}, fieldState: {invalid, error}}) => (
          <Input
            ref={ref}
            isRequired
            errorMessage={error?.message}
            // Let React Hook Form handle validation instead of the browser.
            validationBehavior="aria"
            isInvalid={invalid}
            label="Name"
            name={name}
            value={value}
            onBlur={onBlur}
            onChange={onChange}
          />
        )}
        rules={{required: "Name is required."}}
      />
      <Button type="submit">Submit</Button>
    </Form>
  );
}
```

> For more information about forms in HeroUI, visit the [React Aria Forms Guide](https://react-spectrum.adobe.com/react-aria/forms.html).


--- Содержимое из файла: forms.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\forms.mdx) ---

---
title: Installation
description: Get started with HeroUI in the official documentation, and learn more about all our features!
---

# Installation

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/) or later
- [Framer Motion 11.9](https://www.framer.com/motion/) or later

---

<CarbonAd/>

## Automatic Installation

Using the CLI is now the easiest way to start a HeroUI project. You can initialize your project and add components directly via the CLI:

<Steps>

### Installation 
Execute one of the following commands in your terminal:
<PackageManagers
  commands={{
    npm: "npm install -g heroui-cli",
    yarn: "yarn global add heroui-cli",
    pnpm: "pnpm add -g heroui-cli",
    bun: "bun add -g heroui-cli",
  }}
/>

### Initialization and Starting the App
Initialize the project by using the `init` command. 
```bash
heroui init my-heroui-app
```

You will be prompted to configure your project:

```bash
◇  Select a template (Enter to select)
│  ● App (A Next.js 14 with app directory template pre-configured with HeroUI (v2) and Tailwind CSS.)
│  ○ Pages (A Next.js 14 with pages directory template pre-configured with HeroUI (v2) and Tailwind CSS.)
│  ○ Vite (A Vite template pre-configured with HeroUI (v2) and Tailwind CSS.)
```

Install the dependencies to start the local server:
<PackageManagers
  commands={{
    npm: "cd my-heroui-app && npm install",
    yarn: "cd my-heroui-app && yarn install",
    pnpm: "cd my-heroui-app && pnpm install",
    bun: "cd my-heroui-app && bun install",
  }}
/>

Start the local server:
<PackageManagers
  commands={{
    npm: "npm run dev",
    yarn: "yarn run dev",
    pnpm: "pnpm run dev",
    bun: "bun run dev",
  }}
/>

### Adding the Components
Once your HeroUI project is ready to develop, you can add individual components using the CLI. For example, to add a button component:

```bash
heroui add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```bash
heroui add button input
```

Or you can add the main library `@heroui/react` by running the following command:

```bash
heroui add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

</Steps>

## Manual Installation

If you prefer not to use the CLI, you may try either global installation or individual installation to set up HeroUI in your project:

### Global Installation

The easiest way to get started with HeroUI is to use the global installation, which means
that all the components are imported from a single package.

Follow the steps below to install all HeroUI components:

<Steps>

#### Install Packages

To install HeroUI, run one of the following commands in your terminal:

<PackageManagers
  commands={{
    npm: "npm install @heroui/react framer-motion",
    yarn: "yarn add @heroui/react framer-motion",
    pnpm: "pnpm add @heroui/react framer-motion",
    bun: "bun add @heroui/react framer-motion"
  }}
/>

#### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

#### Tailwind CSS Setup

HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/installation) to install Tailwind CSS. Then you need to add
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js
// tailwind.config.js
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()],
};
```

#### Provider Setup

It is essential to add the `HeroUIProvider` at the `root` of your application.

```jsx
import * as React from "react";

// 1. import `HeroUIProvider` component
import {HeroUIProvider} from "@heroui/react";

function App() {
  // 2. Wrap HeroUIProvider at the root of your app
  return (
    <HeroUIProvider>
      <YourApplication />
    </HeroUIProvider>
  );
}
```

</Steps>

### Individual Installation

HeroUI is also available as individual packages. You can install each package separately. This
is useful if you want to reduce the size of your CSS bundle as it will only include styles for the components
you're actually using.

<Blockquote color="primary">
**Note**: JavaScript bundle size will not change due to tree shaking support in HeroUI.
</Blockquote>

Follow the steps below to install each package separately:

<Steps>

#### Install Core Packages

Although you can install each package separately, you need to install the core packages first
to ensure that all components work correctly.

Run one of the following commands in your terminal to install the core packages:

<PackageManagers
  commands={{
    npm: "npm install @heroui/theme @heroui/system framer-motion",
    yarn: "yarn add @heroui/theme @heroui/system framer-motion",
    pnpm: "pnpm add @heroui/theme @heroui/system framer-motion",
    bun: "bun add @heroui/theme @heroui/system framer-motion"
  }}
/>

#### Install Component

Now, let's install the component you want to use. For example, if you want to use the
[Button](/docs/components/button) component, you need to run one of the following commands
in your terminal:

<PackageManagers
  commands={{
    npm: "npm install @heroui/button",
    yarn: "yarn add @heroui/button",
    pnpm: "pnpm add @heroui/button",
    bun: "bun add @heroui/button"
  }}
/>

#### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use `pnpm` to install. If you install HeroUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@heroui/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

#### Tailwind CSS Setup

TailwindCSS setup changes a bit when you use individual packages. You only need to add the
styles of the components you're using to your `tailwind.config.js` file. For example, for the
[Button](/docs/components/button) component, you need to add the following code to your
`tailwind.config.js` file:

```js
// tailwind.config.js
const {heroui} = require("@heroui/theme");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // single component styles
    "./node_modules/@heroui/theme/dist/components/button.js",
    // or you can use a glob pattern (multiple component styles)
    './node_modules/@heroui/theme/dist/components/(button|snippet|code|input).js'
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()],
};
```

#### Provider Setup

It is essential to add the `HeroUIProvider` at the `root` of your application.

```jsx
import * as React from "react";

// 1. import `HeroUIProvider` component
import {HeroUIProvider} from "@heroui/system";

function App() {
  // 2. Wrap HeroUIProvider at the root of your app
  return (
    <HeroUIProvider>
      <YourApplication />
    </HeroUIProvider>
  );
}
```

#### Use the Component

Now, you can use the component you installed in your application:

```jsx
import * as React from "react";
import {Button} from "@heroui/button";

function App() {
  return (
    <Button>Press me</Button>
  );
}
```
</Steps>

## Framework Guides

HeroUI is compatible with your preferred framework. We have compiled comprehensive, step-by-step tutorials for the following frameworks:

<Frameworks />


--- Содержимое из файла: installation.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\installation.mdx) ---

---
title: Introduction
description: HeroUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of Tailwind CSS and React Aria.
---

# Introduction

Welcome to the HeroUI documentation!

<NextImage
  priority
  src="/heroui-banner.png"
  quality={100}
  width={700}
  height={350}
  alt="HeroUI banner"
  className="w-full border border-transparent dark:border-default-200/50 object-fit rounded-xl shadow-lg"
/>

## What is HeroUI?

HeroUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of
[Tailwind CSS](https://tailwindcss.com/) and [React Aria](https://react-spectrum.adobe.com/react-aria/index.html).

HeroUI's primary goal is to streamline the development process, offering a beautiful and adaptable system design for an enhanced user experience.

---

## FAQ

### Is HeroUI a copy-paste library?

No, HeroUI is not a copy-paste library. All components are available through `npm` and can be installed individually or as a whole package.

### How is HeroUI different from TailwindCSS?

- **TailwindCSS**:

  <div className="text-default-600 dark:text-default-500">
    Tailwind CSS is a CSS Framework that provides atomic CSS classes to help you style components,
    leaving you to handle lots of other things like accessibility, component composition, keyboard
    navigation, style overrides, etc.
  </div>

- **HeroUI**:
  <div className="text-default-600 dark:text-default-500">
    HeroUI is a UI library for React that combines the power of TailwindCSS with React Aria to
    provide complete components (logic and styles) for building accessible and customizable user
    interfaces. Since HeroUI uses TailwindCSS as its style engine, you can use all TailwindCSS
    classes within your HeroUI components, ensuring optimal compiled CSS size.
  </div>

### How is HeroUI different from TailwindCSS components libraries?

<div className="text-default-600 dark:text-default-500">
  TailwindCSS components libraries such as [TailwindUI](https://tailwindui.com/),
  [Flowbite](https://flowbite.com/), or [Preline](https://preline.co/), just to name a few, only offer a curated selection of TailwindCSS classes to style your components.
  They don't provide any React specific components, logic, props, composition, or accessibility features.<br/>
  <Spacer y={2}/>
  In contrast to these libraries, HeroUI is a complete UI library that provides a set of accessible and
  customizable components, hooks, and utilities.
</div>

### How HeroUI deals with TailwindCSS classes conflicts?

<div className="text-default-600 dark:text-default-500">
  We created a TailwindCSS utility library called [tailwind-variants](https://www.tailwind-variants.org/) that automatically handles TailwindCSS class conflicts. This ensures your custom classes will
  consistently override the default ones, eliminating any duplication.
</div>

### Does HeroUI use runtime CSS?

<div className="text-default-600 dark:text-default-500">
  No. As HeroUI uses TailwindCSS as its style engine, it generates CSS at build time, eliminating
  the need for runtime CSS. This means that HeroUI is fully compatible with the latest React and
  Next.js versions.
</div>

### Does HeroUI support TypeScript?

<div className="text-default-600 dark:text-default-500">
  Yes, HeroUI is written in TypeScript and has full support for it.
</div>

### Can I use HeroUI with other front-end frameworks or libraries, such as Vue or Angular?

<div className="text-default-600 dark:text-default-500">
  No, HeroUI is specifically designed for React as it is built on top of React Aria. However, you
  can still use the HeroUI components styling part with other frameworks or libraries.
</div>

### Why does HeroUI use Framer Motion?

<div className="text-default-600 dark:text-default-500">
  We use [Framer Motion](https://www.framer.com/motion) to animate some components due to
  the complexity of the animations and their physics-based nature. Framer Motion allows us to
  handle these animations in a more straightforward and performant way. In addition, it is
  well tested and production ready.
</div>

---

## Community

We're excited to see the community adopt HeroUI, raise issues, and provide feedback.
Whether it's a feature request, bug report, or a project to showcase, please get involved!

<Community />

## Contributing

PRs on **HeroUI** are always welcome, please see our [contribution guidelines](https://github.com/heroui-inc/heroui/blob/main/CONTRIBUTING.md) to learn how you can contribute to this project.

<Spacer y={4}/>

<CarbonAd/>

--- Содержимое из файла: introduction.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\introduction.mdx) ---

---
title: NextUI to HeroUI
description: Learn how to migrate your NextUI project to HeroUI, including automatic and manual migration steps.
---

# NextUI to HeroUI

HeroUI is the new identity for NextUI, bringing the same powerful components and features you love under a new name. This guide will help you migrate your existing NextUI project to HeroUI.

---

<CarbonAd/>

## Automatic Migration (Recommended)

The easiest way to migrate your NextUI project to HeroUI is using our official codemod:

<Steps>

### Run Migration

Execute the codemod in your project directory:

<PackageManagers
  commands={{
    npm: "npx @heroui/codemod@latest migrate",
    pnpm: "pnpm dlx @heroui/codemod@latest migrate",
    yarn: "yarn dlx @heroui/codemod@latest migrate",
    bun: "bunx --bun @heroui/codemod@latest migrate"
  }}
/>


> **Note:** If you're using a monorepo, run the codemod from the root directory

This will automatically:
- Update all package names from `@nextui-org/*` to `@heroui/*`
- Rename component imports and references
- Update TailwindCSS configuration
- Transform provider components
- Adjust any NextUI-specific utilities or hooks
- Update `.npmrc` file pnpm only

### Install Dependencies

After running the codemod, install the new dependencies:

<PackageManagers
  commands={{
    npm: "npm install",
    yarn: "yarn install",
    pnpm: "pnpm install",
    bun: "bun install"
  }}
/>

</Steps>

## Manual Migration

If you prefer to migrate manually, follow these steps:

<Steps>

### Update Dependencies

Replace NextUI packages with their HeroUI equivalents:

<PackageManagers
  commands={{
    npm: "npm uninstall @nextui-org/react && npm install @heroui/react",
    yarn: "yarn remove @nextui-org/react && yarn add @heroui/react",
    pnpm: "pnpm remove @nextui-org/react && pnpm add @heroui/react",
    bun: "bun remove @nextui-org/react && bun add @heroui/react"
  }}
/>

### Update TailwindCSS Configuration

Update your `tailwind.config.js`:

```js
// Before
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  plugins: [nextui()]
};

// After
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  plugins: [heroui()]
};
```

### Update Provider Component

Replace the NextUI provider with HeroUI's provider:

```jsx
// Before
import {NextUIProvider} from "@nextui-org/react";

// After
import {HeroUIProvider} from "@heroui/react";
```

### Update Imports

Update all component imports to use the new package name:

```jsx
// Before
import {Button, Input} from "@nextui-org/react";

// After
import {Button, Input} from "@heroui/react";
```

### Individual Packages

If you're using individual packages, update each package name:

```jsx
// Before
import {Button} from "@nextui-org/button";
import {Input} from "@nextui-org/input";
import {nextui} from "@nextui-org/theme";
import {NextUIProvider} from "@nextui-org/react";

// After
import {Button} from "@heroui/button";
import {Input} from "@heroui/input";
import {heroui} from "@heroui/theme";
import {HeroUIProvider} from "@heroui/react";
```

### Npmrc Pnpm Only

If you are using pnpm, you need to update your .npmrc file to use the new package name:

```bash
# Before
public-hoist-pattern[]=*@nextui-org/*

# After
public-hoist-pattern[]=*@heroui/*
```

</Steps>

## Verification

After migration, verify that:
1. All components render correctly
2. Theme customizations are preserved
3. No NextUI imports remain in your codebase
4. Your application builds without errors

<Blockquote color="primary">
  The functionality and API of all components remain the same - only the package names and imports have changed.
</Blockquote>

## Troubleshooting

If you encounter issues during migration, try these steps:

### NPM Users
If you're using `npm`, you may need to:
1. Delete your `node_modules` folder
2. Delete your `package-lock.json` file
3. Reinstall all packages with `npm install`

### Package.json Check
Ensure that no `@nextui-org` packages remain in your `package.json` dependencies or devDependencies.

### Need Help?
Join our Discord community in the **#nextui-to-heroui** channel [https://discord.gg/9b6yyZKmH4](https://discord.gg/9b6yyZKmH4) - our team is happy to help!

---

If you encounter any issues during migration, please [open an issue](https://github.com/heroui-inc/heroui/issues) on our GitHub repository.


--- Содержимое из файла: nextui-to-heroui.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\nextui-to-heroui.mdx) ---

---
title: Routing
description: Learn how to integrate client side routing into your HeroUI application.
---

# Routing

HeroUI Components such as [Tabs](/docs/components/tabs), [Listbox](/docs/components/listbox), [Dropdown](/docs/components/dropdown) and many others offer
the flexibility to be rendered as **HTML links**.

<CarbonAd />

## Introduction

By default, links perform native browser navigation when they are interacted with. However, many apps and
frameworks use client side routers to avoid a full page reload when navigating between pages.

The `HeroUIProvider` component configures all HeroUI components within it to navigate using the client side
router you provide.

Set this up once in the `root` of your app, and any HeroUI component with the `href` prop will automatically navigate
using your router.

## HeroUIProvider Setup

The `HeroUIProvider` component accepts `navigate` and `useHref` props. `navigate` is a router function for client-side
navigation, while `useHref` optionally converts router hrefs to native HTML hrefs. Here's the pattern:

```jsx
import * as React from "react";

import {HeroUIProvider} from "@heroui/react";
import {useNavigate, useHref} from "your-router";

function App() {
  const navigate = useNavigate();

  return (
    <HeroUIProvider navigate={navigate} useHref={useHref}>
      <YourApplication />
    </HeroUIProvider>
  );
}
```

<Spacer y={2} />

> **Note**: Framework-specific examples are shown below.

### Router Options

All `HeroUI` link components accept a `routerOptions` prop that passes options to the router's navigate function for
controlling behavior like scrolling and history navigation.

```jsx
<DropdownItem href="/login" routerOptions={{replace: true}}>
  {/* ...*/}
</DropdownItem>
```

When using TypeScript, you can configure the RouterConfig type globally so that all link components have auto
complete and type safety using a type provided by your router.

```tsx
import type {RouterOptions} from "your-router";

declare module "@react-types/shared" {
  interface RouterConfig {
    routerOptions: RouterOptions;
  }
}
```

<Spacer y={2} />

## Next.js

#### App Router

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and add the
`useRouter` hook from `next/navigation`, it returns a router object that can be used to perform navigation.

> Check the [Next.js docs](https://nextjs.org/docs/app/api-reference/functions/use-router) for more details.

<Steps>

#### Add the `useRouter`

```tsx {15}
// app/providers.tsx
"use client";

import {useRouter} from "next/navigation";
import {HeroUIProvider} from "@heroui/react";

// Only if using TypeScript
declare module "@react-types/shared" {
  interface RouterConfig {
    routerOptions: NonNullable<Parameters<ReturnType<typeof useRouter>["push"]>[1]>;
  }
}

export function Providers({children}: {children: React.ReactNode}) {
  const router = useRouter();

  return <HeroUIProvider navigate={router.push}>{children}</HeroUIProvider>;
}
```

#### Add Provider to Root

Now, Go to your `root` layout page and wrap it with the `HeroUIProvider`:

```tsx {8}
// app/layout.tsx
import {Providers} from "./providers";

export default function RootLayout({children}: {children: React.ReactNode}) {
  return (
    <html lang="en" className="dark">
      <body>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
```

> **Note**: Skip this step if you already set up the `HeroUIProvider` in your app.

#### Next.js Base Path (Optional)

If you are using the Next.js [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) setting,
you'll need to configure an environment variable to access it.

```js
// next.config.js
const basePath = "...";
const nextConfig = {
  basePath,
  env: {
    BASE_PATH: basePath,
  },
};
```

Then, provide a custom `useHref` function to prepend it to the href for all links.

```tsx {9,12}
// app/providers.tsx
"use client";

import {useRouter} from "next/navigation";
import {HeroUIProvider} from "@heroui/react";

export function Providers({children}: {children: React.ReactNode}) {
  const router = useRouter();
  const useHref = (href: string) => process.env.BASE_PATH + href;

  return (
    <HeroUIProvider navigate={router.push} useHref={useHref}>
      {children}
    </HeroUIProvider>
  );
}
```

</Steps>

### Pages Router

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook
from `next/router`, it returns a router object that can be used to perform navigation.

```tsx
// pages/_app.tsx
import type {AppProps} from "next/app";
import {type NextRouter, useRouter} from "next/router";
import {HeroUIProvider} from "@heroui/react";

declare module "@react-types/shared" {
  interface RouterConfig {
    routerOptions: NonNullable<
      Parameters<NextRouter['push']>[2]
    >;
  }
}

function MyApp({Component, pageProps}: AppProps) {
  const router = useRouter();

  return (
    <HeroUIProvider navigate={router.push}>
      <Component {...pageProps} />
    </HeroUIProvider>
  );
}

export default MyApp;
```

When using the [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) configuration option, 
provide a `useHref` option to the router passed to Provider to prepend it to links automatically.

```tsx {8}
// pages/_app.tsx
import type {AppProps} from "next/app";
import {HeroUIProvider} from "@heroui/react";
import {useRouter} from "next/router";

function MyApp({Component, pageProps}: AppProps) {
  const router = useRouter();
  const useHref = (href: string) => router.basePath + href;

  return (
    <HeroUIProvider navigate={router.push} useHref={useHref}>
      <Component {...pageProps} />
    </HeroUIProvider>
  );
}

export default MyApp;
```

## React Router

Use the `useNavigate` hook from `react-router-dom` to get the `navigate` function for routing. The `useHref` hook can be used with React Router's `basename` option.

Make sure to place the component using these hooks inside `BrowserRouter` and keep `<Routes>` within `HeroUIProvider`. Here's how to set it up in your App component:

```tsx
// App.tsx or App.jsx
import type {NavigateOptions} from "react-router-dom";

import {BrowserRouter, useNavigate, useHref} from "react-router-dom";
import {HeroUIProvider} from "@heroui/react";

declare module "@react-types/shared" {
  interface RouterConfig {
    routerOptions: NavigateOptions;
  }
}

function App() {
  const navigate = useNavigate();

  return (
    <HeroUIProvider navigate={navigate} useHref={useHref}>
      {/* Your app here... */}
      <Routes>
        <Route path="/" element={<HomePage />} />
        {/* ... */}
      </Routes>
    </HeroUIProvider>
  );
}

// main.tsx or main.jsx
ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
);
```

Ensure that the component that calls `useNavigate` and renders `HeroUIProvider` is inside the router
component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>`
element should also be defined inside `HeroUIProvider` so that links inside the rendered routes have access
to the router.

## Remix

Remix uses React Router under the hood, so the same `useNavigate` and `useHref` hook described above also works in Remix
apps. `HeroUIProvider` should be rendered at the `root` of each page that includes HeroUI components, or in
`app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root)
for more details.

```tsx
// app/root.tsx
import type {NavigateOptions} from 'react-router-dom';

import {useNavigate, useHref, Outlet} from "@remix-run/react";
import {HeroUIProvider} from "@heroui/react";

declare module "@react-types/shared" {
  interface RouterConfig {
    routerOptions: NavigateOptions;
  }
}

export default function App() {
  const navigate = useNavigate();

  return (
    <html lang="en">
      <head>{/* ... */}</head>
      <body>
        <HeroUIProvider navigate={navigate} useHref={useHref}>
          <Outlet />
        </HeroUIProvider>
        {/* ... */}
      </body>
    </html>
  );
}
```

## TanStack

To use [TanStack Router](https://tanstack.com/router/latest) with HeroUI, render HeroUI's RouterProvider inside your root route. 
Use `router.navigate` in the `navigate` prop, and `router.buildLocation` in the `useHref` prop.

```tsx
// app/root.tsx
import type {NavigateOptions, ToOptions} from '@tanstack/react-router';

import {useRouter} from '@tanstack/react-router';
import {HeroUIProvider} from "@heroui/react";


declare module "@react-types/shared" {
  interface RouterConfig {
    href: ToOptions['to'];
    routerOptions: Omit<NavigateOptions, keyof ToOptions>;
  }
}

function RootRoute() {
  let router = useRouter();

  return (
    <HeroUIProvider
      navigate={(to, options) => router.navigate({to, ...options})}
      useHref={(to) => router.buildLocation({to}).href}
    >
      {/* You app here... */}
    </HeroUIProvider>
  );
}
```

## Usage examples

Now that you have set up the `HeroUIProvider` in your app, you can use the `href` prop in the `Tabs`,
`Listbox` and `Dropdown` items to navigate between pages.

The [Link](/docs/components/link) component will also use the `navigate` function from the
`HeroUIProvider` to navigate between pages.

```jsx
import {
  Tabs,
  Tab,
  Listbox,
  ListboxItem,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Button,
  Link,
} from "@heroui/react";

function App() {
  return (
    <>
      <Tabs aria-label="Navigation">
        <Tab key="home" href="/home">
          Home
        </Tab>
        <Tab key="about" href="/about">
          About
        </Tab>
      </Tabs>
      <Listbox aria-label="Navigation">
        <ListboxItem key="home" href="/home">
          Home
        </ListboxItem>
        <ListboxItem key="about" href="/about">
          About
        </ListboxItem>
      </Listbox>
      <Dropdown>
        <DropdownTrigger>
          <Button>Open</Button>
        </DropdownTrigger>
        <DropdownMenu aria-label="Navigation">
          <DropdownItem key="home" href="/home">
            Home
          </DropdownItem>
          <DropdownItem key="about" href="/about">
            About
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
      <Link href="/home">Home</Link>
      <Link href="/about">About</Link>
    </>
  );
}
```

<Spacer y={2} />

> For more information about routing in React Aria, visit the [React Aria Routing Guide](https://react-spectrum.adobe.com/react-aria/routing.html).


--- Содержимое из файла: routing.mdx (путь: c:\Users\mikae\Desktop\Проекты\EA\documentation\guide\routing.mdx) ---

