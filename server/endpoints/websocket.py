from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from fastapi.responses import JSONResponse
import asyncio
import json
import logging
from typing import Set
import time
import threading
import sys

router = APIRouter()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å thread-safe –∑–∞—â–∏—Ç–æ–π
active_connections: Set[WebSocket] = set()
connections_lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
current_progress = None
progress_lock = threading.Lock()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
last_team_name = None
last_player_count = 0
last_operation = None

def _format_progress_output(progress_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤"""
    global last_team_name, last_player_count, last_operation
    
    try:
        operation = progress_data.get("operation", "")
        function_name = progress_data.get("function_name", "")
        current_team = progress_data.get("current_team", "")
        message = progress_data.get("message", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        if operation == "add_teams" or function_name == "add_teams":
            
            # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            if current_team and current_team != last_team_name:
                if last_team_name:  # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    print()
                print(f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {current_team}")
                print("=" * (len(current_team) + 20))
                last_team_name = current_team
                last_player_count = -1  # Reset to -1 to track first player
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
            players_progress = progress_data.get("players_processing_progress", {})
            if players_progress:
                current_player = progress_data.get("current_player", "")
                player_index = progress_data.get("player_index", None)
                total_players = progress_data.get("total_players", 0)
                
                # –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –∫–æ–≥–¥–∞ –µ—Å—Ç—å player_index –∏ total_players
                if current_player and player_index is not None and total_players > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∏–ª–∏ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
                    if player_index != last_player_count:
                        player_rating = progress_data.get("player_overall_rating", "")
                        player_position = progress_data.get("player_position", "")
                        
                        rating_str = f" (OVR: {player_rating})" if player_rating else ""
                        position_str = f" [{player_position}]" if player_position else ""
                        
                        print(f"  üë§ {player_index + 1:2d}/{total_players} {current_player}{position_str}{rating_str}")
                        
                        last_player_count = player_index
                        
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ù–ï–¢ player_index/total_players)
                elif message and current_player and player_index is None:
                    if "ML predictions" in message or "AI" in message:
                        print(f"    ü§ñ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é –ò–ò –¥–ª—è {current_player}...")
                        # –î–µ—Ç–∞–ª–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã —Å–∞–º–æ–π ML —Ñ—É–Ω–∫—Ü–∏–µ–π
                    elif "Downloading photo" in message:
                        print(f"    üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è {current_player}")
                    elif "name to playernames" in message:
                        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ players.py
                        pass
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–æ–≤
            elif message and not players_progress:
                if "Starting" in message or "–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è" in message.lower():
                    if current_team:
                        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {current_team}")
                elif "Successfully" in message or "—É—Å–ø–µ—à–Ω–æ" in message.lower():
                    if "players" in message.lower() or "–∏–≥—Ä–æ–∫–æ–≤" in message.lower():
                        print(f"‚úÖ –ò–≥—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                elif "tactics" in message.lower() or "—Ç–∞–∫—Ç–∏–∫–∞" in message.lower():
                    print(f"üéØ –¢–∞–∫—Ç–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                elif "completed" in message.lower() or "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" in message.lower():
                    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {current_team} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    print()
                elif "Successfully added" in message and "teams" in message:
                    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
                    print("\n" + "=" * 60)
                    print("üéâ –í–°–ï –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
                    print("=" * 60)
                    total_teams = progress_data.get("total_added", 0)
                    if total_teams > 0:
                        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {total_teams}")
                        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    print("=" * 60)
        
        # –î—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥)
        elif operation and operation != last_operation:
            if operation not in ["add_teams"]:
                print(f"üîÑ {operation}: {message}")
                last_operation = operation
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        logger.debug(f"Error formatting progress output: {e}")
        pass

async def broadcast_progress(progress_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    global current_progress
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    with progress_lock:
        if progress_data.get("type") == "progress":
            current_progress = progress_data
        elif progress_data.get("status") == "completed":
            current_progress = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    with connections_lock:
        connections = active_connections.copy()
    
    if not connections:
        return
    
    to_remove = set()
    message = json.dumps(progress_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    send_tasks = []
    for ws in connections:
        send_tasks.append(send_with_timeout(ws, message, to_remove))
    
    await asyncio.gather(*send_tasks, return_exceptions=True)
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if to_remove:
        with connections_lock:
            for ws in to_remove:
                active_connections.discard(ws)
                logger.info("Removed inactive WebSocket connection")

async def send_with_timeout(ws: WebSocket, message: str, to_remove: set, timeout: float = 5.0):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        await asyncio.wait_for(ws.send_text(message), timeout=timeout)
        logger.debug(f"Sent message to client")
    except asyncio.TimeoutError:
        logger.warning(f"Timeout sending to WebSocket")
        to_remove.add(ws)
    except Exception as e:
        logger.error(f"Error sending to WebSocket: {e}")
        to_remove.add(ws)

@router.websocket("/ws/progress")
async def websocket_progress(websocket: WebSocket):
    await websocket.accept()
    
    with connections_lock:
        active_connections.add(websocket)
        connection_count = len(active_connections)
    
    logger.info(f"WebSocket connected. Total connections: {connection_count}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await websocket.send_text(json.dumps({"type": "connected", "message": "WebSocket connected"}))
        
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            try:
                # –¢–∞–π–º–∞—É—Ç –¥–ª—è ping/pong
                await asyncio.wait_for(websocket.receive_text(), timeout=30.0)
            except asyncio.TimeoutError:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await websocket.send_text(json.dumps({"type": "ping"}))
    except WebSocketDisconnect:
        logger.info("WebSocket disconnected normally")
    except Exception as e:
        logger.error(f"WebSocket error: {e}")
    finally:
        with connections_lock:
            active_connections.discard(websocket)
            connection_count = len(active_connections)
        logger.info(f"WebSocket removed. Total connections: {connection_count}")

@router.websocket("/ws")
async def websocket_main(websocket: WebSocket):
    """–û—Å–Ω–æ–≤–Ω–æ–π WebSocket endpoint —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await websocket.accept()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        with connections_lock:
            active_connections.add(websocket)
            connection_count = len(active_connections)
        
        logger.info(f"WebSocket connected on /ws. Total connections: {connection_count}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await websocket.send_text(json.dumps({"type": "connected", "message": "WebSocket connected"}))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
        with progress_lock:
            if current_progress:
                await websocket.send_text(json.dumps(current_progress))
        
        last_ping = time.time()
        
        while True:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                message = await asyncio.wait_for(websocket.receive_text(), timeout=30.0)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    data = json.loads(message)
                    if data.get("type") == "ping":
                        await websocket.send_text(json.dumps({"type": "pong"}))
                        last_ping = time.time()
                except json.JSONDecodeError:
                    pass
                    
            except asyncio.TimeoutError:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–∞–≤–Ω–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π ping
                if time.time() - last_ping > 60:
                    logger.warning("No ping received for 60 seconds, closing connection")
                    break
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    await asyncio.wait_for(
                        websocket.send_text(json.dumps({"type": "ping"})),
                        timeout=5.0
                    )
                except asyncio.TimeoutError:
                    logger.warning("Timeout sending ping, closing connection")
                    break
                except Exception:
                    break
                    
    except WebSocketDisconnect:
        logger.info("WebSocket disconnected normally")
    except Exception as e:
        logger.error(f"WebSocket error: {type(e).__name__}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        with connections_lock:
            active_connections.discard(websocket)
            connection_count = len(active_connections)
        
        logger.info(f"WebSocket removed from /ws. Total connections: {connection_count}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–æ
        try:
            await websocket.close()
        except Exception:
            pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
def send_progress_sync(progress_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'timestamp' not in progress_data:
            progress_data['timestamp'] = time.time()
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∏–≥—Ä–æ–∫–æ–≤
        _format_progress_output(progress_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        global current_progress
        with progress_lock:
            if progress_data.get("type") == "progress":
                current_progress = progress_data
            elif progress_data.get("status") == "completed":
                current_progress = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        with connections_lock:
            connections = active_connections.copy()
        
        if not connections:
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        def send_messages():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                async def send_to_all():
                    message = json.dumps(progress_data)
                    to_remove = set()
                    
                    for ws in connections:
                        try:
                            await asyncio.wait_for(ws.send_text(message), timeout=5.0)
                        except Exception as e:
                            logger.debug(f"Error sending to WebSocket: {e}")
                            to_remove.add(ws)
                    
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    if to_remove:
                        with connections_lock:
                            for ws in to_remove:
                                active_connections.discard(ws)
                
                loop.run_until_complete(send_to_all())
                loop.close()
                
            except Exception as e:
                logger.debug(f"Error in send_messages thread: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=send_messages, daemon=True)
        thread.start()
        
    except Exception as e:
        logger.error(f"Critical error in send_progress_sync: {type(e).__name__}: {e}")

@router.get("/progress/current")
async def get_current_progress():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    with progress_lock:
        if current_progress:
            return current_progress
        else:
            return JSONResponse(
                status_code=404,
                content={"message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"}
            )

@router.get("/ws/status")
async def websocket_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    with connections_lock:
        return {
            "active_connections": len(active_connections),
            "has_current_progress": current_progress is not None
        }