#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ML —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç FastAPI.
"""

import asyncio
import os
import random
from typing import Dict, Any, List

# –ü—Ä–æ—Å—Ç–∞—è mock –≤–µ—Ä—Å–∏—è –±–µ–∑ FastAPI
class SimpleMLPredictor:
    def __init__(self):
        self.parameter_ranges = {
            "haircolorcode": {"min": 1, "max": 10},
            "facialhairtypecode": {"min": 0, "max": 300},
            "skintonecode": {"min": 1, "max": 10},
            "eyecolorcode": {"min": 1, "max": 5},
        }
        self.available_models = self._scan_models()
    
    def _scan_models(self):
        models_dir = "/root/EA/server/models"
        available = []
        
        if os.path.exists(models_dir):
            for filename in os.listdir(models_dir):
                if filename.endswith('.pth'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    if filename.startswith('model_') and '_' in filename[6:]:
                        param_name = filename[6:].split('_')[0]
                        if param_name in self.parameter_ranges:
                            available.append(param_name)
        
        return available
    
    def predict_all(self, image_path):
        predictions = {}
        for param in self.available_models:
            if os.path.exists(image_path):
                param_info = self.parameter_ranges[param]
                value = random.randint(param_info["min"], param_info["max"])
                predictions[param] = str(value)
        return predictions

async def enhance_player_data_simple(player_data: Dict[str, Any], image_path: str) -> Dict[str, Any]:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
    if not os.path.exists(image_path):
        return player_data
    
    try:
        predictor = SimpleMLPredictor()
        predictions = predictor.predict_all(image_path)
        
        enhanced_data = player_data.copy()
        updated_params = []
        
        for param_name, predicted_value in predictions.items():
            if param_name not in enhanced_data or enhanced_data[param_name] in ["0", "", None]:
                old_value = enhanced_data.get(param_name, "0")
                enhanced_data[param_name] = predicted_value
                updated_params.append({
                    "parameter": param_name,
                    "old_value": old_value,
                    "new_value": predicted_value
                })
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö
        if updated_params:
            print(f"        ü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ({len(updated_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):")
            for param in updated_params:
                print(f"           üìä {param['parameter']}: {param['old_value']} ‚Üí {param['new_value']}")
        else:
            print(f"        ü§ñ ML –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        
        return enhanced_data
        
    except Exception as e:
        print(f"        ‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
        return player_data

async def test_ml_output():
    """–¢–µ—Å—Ç ML –≤—ã–≤–æ–¥–∞"""
    print("üß™ –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ ML –≤—ã–≤–æ–¥–∞")
    print("=" * 40)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    predictor = SimpleMLPredictor()
    available = predictor.available_models
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    print(f"üìä –ü—Ä–æ–µ–∫—Ç: test-project")
    print(f"üèÜ –õ–∏–≥–∞: Test League")
    print(f"üìà –ö–æ–º–∞–Ω–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: 1")
    
    if available:
        print(f"ü§ñ ML –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è: {', '.join(available)}")
    else:
        print(f"ü§ñ ML –º–æ–¥–µ–ª–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ models/")
    
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = "/tmp/test_player.jpg"
    with open(test_image, 'w') as f:
        f.write("test")
    
    try:
        print(f"\nüèÜ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: Test FC")
        print("=" * 27)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        players = [
            {
                "name": "Test Player 1",
                "data": {"playerid": "300001", "haircolorcode": "0", "eyecolorcode": "0"}
            },
            {
                "name": "Test Player 2", 
                "data": {"playerid": "300002", "haircolorcode": "5", "skintonecode": "0"}
            },
            {
                "name": "Test Player 3",
                "data": {"playerid": "300003", "haircolorcode": "3", "skintonecode": "2"}
            }
        ]
        
        for i, player in enumerate(players):
            print(f"  üë§ {i+1:2d}/3 {player['name']} [ST] (OVR: 75)")
            
            enhanced = await enhance_player_data_simple(player["data"], test_image)
            
            await asyncio.sleep(0.1)
        
        print(f"üéØ –¢–∞–∫—Ç–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ Test FC —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    finally:
        if os.path.exists(test_image):
            os.remove(test_image)

async def main():
    await test_ml_output()
    
    print("\nüìä –ò–¢–û–ì:")
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    print("‚úÖ –ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π")
    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Å—Ç–∞—Ä–æ–µ ‚Üí –Ω–æ–≤–æ–µ)")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

if __name__ == "__main__":
    asyncio.run(main())