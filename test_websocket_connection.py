#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ping/pong –º–µ—Ö–∞–Ω–∏–∑–º–∞
"""

import asyncio
import websockets
import json
import time
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_websocket_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
    uri = "ws://localhost:8000/ws"
    
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...")
        async with websockets.connect(uri, ping_interval=None) as websocket:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π ping
            await websocket.send(json.dumps({"type": "ping"}))
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π ping")
            
            start_time = time.time()
            ping_count = 0
            pong_count = 0
            
            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç
            while time.time() - start_time < 120:  # 2 –º–∏–Ω—É—Ç—ã
                try:
                    # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    message = await asyncio.wait_for(websocket.recv(), timeout=30.0)
                    data = json.loads(message)
                    
                    if data.get("type") == "ping":
                        logger.info("üì• –ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º pong")
                        await websocket.send(json.dumps({"type": "pong"}))
                        ping_count += 1
                        
                    elif data.get("type") == "pong":
                        logger.info("üì• –ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                        pong_count += 1
                        
                    elif data.get("type") == "connected":
                        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
                        
                    else:
                        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('type', 'unknown')}")
                        
                except asyncio.TimeoutError:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                    current_time = time.time()
                    logger.info(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping (–≤—Ä–µ–º—è: {current_time - start_time:.1f}—Å)")
                    await websocket.send(json.dumps({"type": "ping"}))
                    
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2 –º–∏–Ω—É—Ç—ã:")
            logger.info(f"   - –ü–æ–ª—É—á–µ–Ω–æ ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {ping_count}")
            logger.info(f"   - –ü–æ–ª—É—á–µ–Ω–æ pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {pong_count}")
            logger.info(f"   - –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º: {time.time() - start_time:.1f} —Å–µ–∫—É–Ω–¥")
            
    except websockets.exceptions.ConnectionClosed as e:
        logger.error(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print("–¢–µ—Å—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è 2 –º–∏–Ω—É—Ç—ã...")
    print()
    
    asyncio.run(test_websocket_connection())